{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/athena/source/js/script.js","path":"js/script.js","modified":1},{"_id":"themes/athena/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/athena/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/athena/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/athena/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/athena/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/athena/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/athena/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/athena/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/athena/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/athena/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/athena/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/athena/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/athena/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/athena/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/athena/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/athena/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/athena/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1},{"_id":"themes/athena/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1},{"_id":"themes/athena/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1},{"_id":"themes/athena/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1},{"_id":"themes/athena/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1},{"_id":"themes/athena/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1}],"Cache":[{"_id":"source/_posts/Techniques/2015-10-15-java-produce-consumer.md","shasum":"539e3da32892ba9ff637c2ab0fdb3610d949ad42","modified":1449574511000},{"_id":"source/about/index.md","shasum":"05c422f209ab643583febec820464fac05caf274","modified":1449574511000},{"_id":"source/_posts/hello-world.md","shasum":"d04ea662273ef79f07a0bbfc91b177adaafa0f32","modified":1449574511000},{"_id":"source/_posts/favicon.jpg","shasum":"3c497df313945d25106f4e06316e7e70dce3116c","modified":1449574511000},{"_id":"themes/athena/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1449574511000},{"_id":"themes/athena/layout/_partial/after-footer.ejs","shasum":"b7afccd52b1828c14928ece4d58383b0cf12f550","modified":1449574511000},{"_id":"themes/athena/README.md","shasum":"00f76fbfb76dcae2134b94396ea1049862c8cdd5","modified":1449574511000},{"_id":"themes/athena/_config.yml","shasum":"6abd59a5228cc8e06bf70da673d7a05bec01c3de","modified":1449574511000},{"_id":"themes/athena/layout/_partial/archive-post.ejs","shasum":"d45b85c4067ed8bacee55ce6b9b53c774628c66f","modified":1449574511000},{"_id":"themes/athena/layout/_partial/article.ejs","shasum":"369a5175af4aff7b0a7d47664283d316575c21bf","modified":1449574511000},{"_id":"themes/athena/layout/_partial/footer.ejs","shasum":"4687fdae77b1609403a177d6c40b3778a8ce6f5c","modified":1449574511000},{"_id":"themes/athena/layout/_partial/archive.ejs","shasum":"80fffbd8692f1f25d82b2cefc96d21f88c92f0cc","modified":1449574511000},{"_id":"themes/athena/layout/_partial/google-analytics.ejs","shasum":"98a27ce8a3d3e4596787b8661efc2a59b182c13a","modified":1449574511000},{"_id":"themes/athena/layout/_partial/head.ejs","shasum":"9dfef443b2b6eebb27d1586548e91d02d5af83ef","modified":1449574511000},{"_id":"themes/athena/layout/_partial/page.ejs","shasum":"cac8c44f734f147f035070b64e61b20d53d964b4","modified":1449574511000},{"_id":"themes/athena/layout/_partial/header.ejs","shasum":"23c4b63ab02ec4607b287d21b3bfd50e8617b9db","modified":1449574511000},{"_id":"themes/athena/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1449574511000},{"_id":"themes/athena/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1449574511000},{"_id":"themes/athena/layout/_partial/post/nav.ejs","shasum":"f26d30355ba9144c51e700e8edc6a4ab6144ff9a","modified":1449574511000},{"_id":"themes/athena/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1449574511000},{"_id":"themes/athena/layout/_partial/post/title.ejs","shasum":"f1c2029deedf8d245d8ec1d946f9ec393e3e08d0","modified":1449574511000},{"_id":"themes/athena/layout/_partial/post/date.ejs","shasum":"5256891d3457fe928d9e81c805bca8821fca4393","modified":1449574511000},{"_id":"themes/athena/layout/_widget/archive.ejs","shasum":"985fbeb01142b9d526cda8ebc372c1d361d69a6b","modified":1449574511000},{"_id":"themes/athena/layout/_widget/category.ejs","shasum":"36ab37878129d152e3cbdeb839c08e52af1acd58","modified":1449574511000},{"_id":"themes/athena/layout/_widget/recent_posts.ejs","shasum":"feba7c00fa59ba13bf870b358a499fde4473d335","modified":1449574511000},{"_id":"themes/athena/layout/_widget/tag.ejs","shasum":"b3f321ddda6be2702a286d5b11af9533509506fb","modified":1449574511000},{"_id":"themes/athena/layout/_widget/tagcloud.ejs","shasum":"34dc8cdd96cdb41dd11cb7513f13714373e5104a","modified":1449574511000},{"_id":"themes/athena/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1449574511000},{"_id":"themes/athena/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1449574511000},{"_id":"themes/athena/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1449574511000},{"_id":"themes/athena/layout/layout.ejs","shasum":"81c85de246e1a18c2114dacf484e9c2ec0e01bc6","modified":1449574511000},{"_id":"themes/athena/layout/page.ejs","shasum":"906d4d06ddc09beb258dd72bc1d3b7b8997054dd","modified":1449574511000},{"_id":"themes/athena/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1449574511000},{"_id":"themes/athena/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1449574511000},{"_id":"themes/athena/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1449574511000},{"_id":"themes/athena/source/css/_extend.styl","shasum":"ac8f00fc2d65d7440b1aacb0643a6ec4989d3b5e","modified":1449574511000},{"_id":"themes/athena/source/css/_partial/archive.styl","shasum":"bbf774b0c4447500c53dcaf67d4198afa8406d16","modified":1449574511000},{"_id":"themes/athena/source/css/_partial/comment.styl","shasum":"57ff147ed385771c71a2a1c1e97f980c437ce461","modified":1449574511000},{"_id":"themes/athena/source/css/_partial/footer.styl","shasum":"c96a1536944c9d2ab14ca6d55e03d64814d64f7d","modified":1449574511000},{"_id":"themes/athena/source/css/_partial/header.styl","shasum":"49dd41599525deb80737d8764f2ddf95d78a52ff","modified":1449574511000},{"_id":"themes/athena/source/css/_partial/highlight.styl","shasum":"46ed50deb267278df2b355186fe034f08a2d3bfb","modified":1449574511000},{"_id":"themes/athena/source/css/_partial/article.styl","shasum":"a1def237a714c4e9b3a75cdaa4867ba55eee5bbe","modified":1449574511000},{"_id":"themes/athena/source/css/_partial/mobile.styl","shasum":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1449574511000},{"_id":"themes/athena/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1449574511000},{"_id":"themes/athena/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1449574511000},{"_id":"themes/athena/source/css/_variables.styl","shasum":"89b5ac6cea322c46e2548ef4db9e48a12eb24eb5","modified":1449574511000},{"_id":"themes/athena/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1449574511000},{"_id":"themes/athena/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1449574511000},{"_id":"themes/athena/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1449574511000},{"_id":"themes/athena/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1449574511000},{"_id":"themes/athena/source/css/style.styl","shasum":"def9a4c0d2f5c95b6e342abd56a24f822a7eda7b","modified":1449574511000},{"_id":"themes/athena/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1449574511000},{"_id":"themes/athena/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1449574511000},{"_id":"themes/athena/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1449574511000},{"_id":"themes/athena/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1449574511000},{"_id":"themes/athena/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1449574511000},{"_id":"themes/athena/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1449574511000},{"_id":"themes/athena/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1449574511000},{"_id":"themes/athena/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1449574511000},{"_id":"themes/athena/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1449574511000},{"_id":"themes/athena/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1449574511000},{"_id":"themes/athena/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1449574511000},{"_id":"themes/athena/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1449574511000},{"_id":"themes/athena/source/js/script.js","shasum":"8fc5beeb797d3222768b0b11f7dc3318715df765","modified":1449574511000},{"_id":"themes/athena/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1449574511000},{"_id":"themes/athena/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1449574511000},{"_id":"themes/athena/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1449574511000},{"_id":"themes/athena/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1449574511000},{"_id":"themes/athena/source/css/images/banner.jpg","shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1449574511000}],"Category":[{"name":"技术","_id":"cihxbdnyt0001br63827tgfu4"}],"Data":[],"Page":[{"title":"about","date":"2015-12-08T10:18:53.000Z","_content":"","source":"about/index.md","raw":"title: about\ndate: 2015-12-08 18:18:53\n---\n","updated":"2015-12-08T11:35:11.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cihxbdnz40005br632dhzdt4m"}],"Post":[{"layout":"post","title":"生产者消费者问题及其Java的多种实现方式","keywords":null,"description":null,"_content":"\n### 生产者消费者模式（以下简称PC)\n\n生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，`阻塞队列就相当于一个缓冲区`，平衡了生产者和消费者的处理能力。\n\n<!--more-->\n\n#### 为什么使用PC模式\n- 解耦\n- 缓冲\n- 兼容不同端的处理能力差异\n\n### Java实现方式\n\n#### 1. wait()/nofify()\n\n简单实现：\n\n``` java\n// 简单实现\npublic class PCQueueUsingWait<T> {\n    \n    private final int MAX_CAPACITY = 5;\n    private Object[] items = new Object[MAX_CAPACITY];\n    \n    private int putptr, takeptr;\n    private int count; // count total number of items\n    \n    public void put(T x) throws InterruptedException {\n        synchronized(items) {\n            /*\n             * 唤醒之后，可能还会被其他put线程抢占，从而导致full，因此需要用while判断\n             */\n            while(count == items.length) {\n                System.out.println(\"queue is full, please wait for consumer to take\");\n                items.wait();\n            }\n            \n            items[putptr] = x;\n            if (++putptr == items.length) {\n                putptr = 0;\n            }\n            ++count;\n            items.notifyAll(); // 对比PCQueueUsingLock,这里的实现没有区分full和empty的条件，因此需要notifyAll，否则会导致put之后唤醒的依旧是producer\n        }\n    }\n    \n    @SuppressWarnings(\"unchecked\")\n    public T take() throws InterruptedException {\n        synchronized(items) {\n            /*\n             * 唤醒之后，可能还会被其他take线程抢占，从而导致empty，因此需要用while判断\n             */\n            while(count == 0) {\n                System.out.println(\"queue is empty, please wait for producer to put\");\n                items.wait();\n            }\n            Object x = items[takeptr];\n            if (++takeptr == items.length) {\n                putptr = 0;\n            }\n            ++count;\n            items.notifyAll(); // 同理\n            return (T)x;\n            /*\n             * 这里亮神提出一个问题：是否需要再finally中使用notifyAll？ —— NO\n             * 1. synchronized会自动释放锁（包括异常情况下），除非遇到blocked。yet，blocked这种情况，finally也没有办法啊~~\n             * 2. notifyAll之后只会让线程进入到获取锁的等待队列中，还需要等到syn块结束之后，其他线程才能竞争到锁，因此不会出现return之前其他线程就执行的情况\n             * 3. 对比：Lock需要手动去释放，因此为了保证异常情况下也能够正常释放，需要通过finally块来unLock\n             */\n        }\n    }\n}\n```\n\n改进：(TODO==)\n\n``` java\n\n```\n\n\n#### 2. ReentrantLock - Condition\n\n``` java\nimport java.util.Random;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class PCQueueUsingLock<T> {\n    \n    // max capacity for queue\n    private final int MAX_CAPACITY = 5;\n    private final Object[] items = new Object[MAX_CAPACITY];\n    \n    \n    private final Lock lock = new ReentrantLock();\n    private final Condition notFull = lock.newCondition();\n    private final Condition notEmpty = lock.newCondition();\n    \n    \n    private int putptr, takeptr;\n    private int count; // count total number of items\n    \n    \n    public void put(T x) throws InterruptedException {\n        lock.lock();\n        try {\n            while (count == items.length) {\n                System.out.println(\"queue full, wait for consumer\");\n                notFull.await(); // condition not met, make the thread to await\n            }\n            items[putptr] = x;\n            if (++putptr == items.length) {\n                putptr = 0;\n            }\n            ++count;\n            notEmpty.signal(); // 唤醒所有的线程没有意义，因为最终只有一个能够执行\n            \n            // test \n            System.out.print(\"after put: \");\n            for(Object obj : items) {\n                System.out.print(obj + \" \");\n            }\n            System.out.println();\n            \n        } finally {\n            lock.unlock(); // must in finally !!!\n        }\n    }\n    \n    @SuppressWarnings(\"unchecked\")\n    public T take() throws InterruptedException {\n        lock.lock();\n        try {\n            while (count == 0) {\n                // test\n                System.out.println(\"queue empty, wait for producer\");\n                notEmpty.await();\n            }\n            Object x = items[takeptr];\n            items[takeptr] = null; // set reference to null\n            if (++takeptr == items.length) {\n                takeptr = 0;\n            }\n            --count;\n            notFull.signal();\n            \n            // test \n            System.out.print(\"after take: \");\n            for(Object obj : items) {\n                System.out.print(obj + \" \");\n            }\n            System.out.println();\n            \n            return (T)x;\n        } finally {\n            lock.unlock(); // must use finally !!!\n        }\n    }\n    \n    \n    public static void main(String[] args) {\n        Random rand = new Random(System.currentTimeMillis());\n        final int round = 10;\n        \n        PCQueueUsingLock<Integer> pcQueue = new PCQueueUsingLock<>();\n        final CountDownLatch startGate = new CountDownLatch(1);\n        \n        Thread p = new Thread(){\n            public void run() {\n                try {\n                    startGate.await();  // wait \n                    for(int i=0; i<round; i++) {\n                        pcQueue.put(rand.nextInt(10));\n                        //Thread.sleep((long) (3000*Math.random()));\n                    }\n                } catch (InterruptedException e) {\n                   Thread.currentThread().interrupt(); // best practice: reset interrupt flag\n                }\n            }\n        };\n        \n        Thread c = new Thread(){\n            public void run() {\n                try {\n                    startGate.await();  // wait \n                    for(int i=0; i<round; i++) {\n                        pcQueue.take();\n                        Thread.sleep((long) (3000*Math.random()));\n                    }\n                } catch (InterruptedException e) {\n                   Thread.currentThread().interrupt(); // best practice: reset interrupt flag\n                }\n            }\n        };\n        \n        p.start();\n        c.start();\n        \n        startGate.countDown();  // start together\n    }\n}\n```\n测试结果\n\n``` java\nqueue empty, wait for producer\nafter put: 4 null null null null \nafter put: 4 2 null null null \nafter put: 4 2 7 null null \nafter put: 4 2 7 5 null \nafter put: 4 2 7 5 8 \nqueue full, wait for consumer\nafter take: null 2 7 5 8 \nafter put: 4 2 7 5 8 \nqueue full, wait for consumer\nafter take: 4 null 7 5 8 \nafter put: 4 1 7 5 8 \nqueue full, wait for consumer\nafter take: 4 1 null 5 8 \nafter put: 4 1 8 5 8 \nqueue full, wait for consumer\nafter take: 4 1 8 null 8 \nafter put: 4 1 8 8 8 \nqueue full, wait for consumer\nafter take: 4 1 8 8 null \nafter put: 4 1 8 8 5 \nafter take: null 1 8 8 5 \nafter take: null null 8 8 5 \nafter take: null null null 8 5 \nafter take: null null null null 5 \nafter take: null null null null null \n```\n\n\n#### 3. BlockingQueue \n``` java\n// 简单封装即可\npublic class PCQueueUsingBlockingQueue<T> {\n    \n    private final int MAX_CAPACITY = 10;\n    private LinkedBlockingQueue<T> items = new LinkedBlockingQueue<>(MAX_CAPACITY);\n    \n    public void put(T x) throws InterruptedException {\n        items.put(x); // offer() will not block, while put() will block if queue is full.\n    }\n    \n    public T take() throws InterruptedException {\n        T x = items.take(); // poll() will not block, will take() will block if queue is empty.\n        return x;\n    }\n}\n```\nLinkedBlockingQueue的put内部实现(采用了ReentrantLock的方式)\n\n``` java\n public void put(E e) throws InterruptedException {\n        if (e == null) throw new NullPointerException();   // 空元素判断\n        // Note: convention in all put/take/etc is to preset local var\n        // holding count negative to indicate failure unless set.\n        int c = -1;\n        Node<E> node = new Node<E>(e);\n        final ReentrantLock putLock = this.putLock;\n        final AtomicInteger count = this.count; // 使用atomic的方式计数，保证并发put+take下的count统计正确\n        putLock.lockInterruptibly(); // 可以被中断的lock\n        try {\n            /*\n             * Note that count is used in wait guard even though it is\n             * not protected by lock. This works because count can\n             * only decrease at this point (all other puts are shut\n             * out by lock), and we (or some other waiting put) are\n             * signalled if it ever changes from capacity. Similarly\n             * for all other uses of count in other wait guards.\n             */\n            while (count.get() == capacity) {\n                notFull.await();\n            }\n            enqueue(node);\n            c = count.getAndIncrement();\n            if (c + 1 < capacity)\n                notFull.signal();\n        } finally {\n            putLock.unlock();\n        }\n        if (c == 0)\n            signalNotEmpty();\n    }\n```\n\nLinkedBlockingQueue的offer内部实现（非阻塞，立刻返回）\n\n``` java\n public boolean offer(E e) {\n        if (e == null) throw new NullPointerException();\n        final AtomicInteger count = this.count;\n        if (count.get() == capacity)\n            return false; // 立刻返回false\n        int c = -1;\n        Node<E> node = new Node<E>(e);\n        final ReentrantLock putLock = this.putLock;\n        putLock.lock(); // 不可中断，why？\n        try {\n            if (count.get() < capacity) {\n                enqueue(node);\n                c = count.getAndIncrement();\n                if (c + 1 < capacity)\n                    notFull.signal();\n            }\n        } finally {\n            putLock.unlock();\n        }\n        if (c == 0)\n            signalNotEmpty();\n        return c >= 0;\n    }\n```\n\n#### 4. Semaphore\n\n``` java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.Semaphore;\n\npublic class PCQueueUsingSemaphore {\n    private List<Object> items = new ArrayList<Object>(10);\n    /*\n     * 1. mutex保证存取缓冲区时必须是线程互斥的\n     * 2. isFull保证缓冲区最多元素为initPermits，初始值代表缓冲区开始可以存放多少元素\n     * 3. isEmpty保证缓冲区为0是阻塞，初始值代表缓冲区开始有多少元素\n     * 4. = 也就是isFull和isEmpty的初始化值加起来等于缓冲区的大小\n     * \n     * 5. 注意不同的semaphore的顺序，否则会出现并发问题\n     *      - isFull的信号量可以并发获得\n     *      - 但take和put实际操作时，必须只能有一个线程，因此mutex的permit=1\n     * \n     * 6. 使用semaphore的好处：\n     *      - 避免采用wait\\notify等底层机制，封装更完善\n     *      - 可以避免手动判断缓冲区的当前大小是否满或空，（Condition需要）\n     *      - 借助了AQS，似乎效率上得到了优化？？？？\n     */\n    Semaphore mutex = new Semaphore(1); // mutex put or take\n    Semaphore isFull = new Semaphore(10); // 缓冲区最多允许10个\n    Semaphore isEmpty = new Semaphore(0); // 缓冲区初始值为0\n    \n    public void put(Object x) throws InterruptedException {\n        isFull.acquire(); // 大于0,意味着还有permit可以使用，缓冲区未满\n        try {\n            mutex.acquire(); // acquire = ++\n            items.add(x);  // release = --\n        } finally {\n            mutex.release();\n            isEmpty.release();\n        }\n    }\n    \n    public Object take() throws InterruptedException { \n        Object x = null;\n        isEmpty.acquire();\n        try {\n            mutex.acquire();\n            /* 注意List的remove定义：\n             * Removes the element at the specified position in this list (optional operation). \n             * Shifts any subsequent elements to the left (subtracts one from their indices). \n             * Returns the element that was removed from the list.\n             */\n            x = items.remove(0);\n            return x;\n        } finally {\n            mutex.release();\n            isFull.release();\n        }\n    }\n}\n```\n\n#### 5. LockSupport\n\nLockSupport可以通过park(thread)和unpark(thread)，精确地指定阻塞和唤醒线程。但是貌似就欠缺了wait/notify能够让线程在一个object上等待的接口，因此我考虑要实现PC，需要自己维护一个thread的队列才可以。\n\n#### 6. PipedInputStream / PipedOutputStream\n\n\n### 应用场景\n\n- 需要处理任务时间比较长的场景：\n    + 附件上传\n    + 远程接口查询数据  \n    + Java线程池\n\n### 线程池中如何实现PC模式\n\n### 更高效的考虑\n\n1. putLock与takeLock分离（jdk LinkedBlockingQueue中的实现方式）\n2. 如果能够直接处理，则直接被consumer取走，不需要再存储到queue中，减少复制的开销\n\n### 队列的循环数组方式实现\n\n\n### 参考\n[1] [聊聊并发-生产者消费者模式](http://www.infoq.com/cn/articles/producers-and-consumers-mode)\n\n[2] [生产者消费者问题的实现方式](http://java--hhf.iteye.com/blog/2064926)","source":"_posts/Techniques/2015-10-15-java-produce-consumer.md","raw":"---\nlayout: post\ntitle: 生产者消费者问题及其Java的多种实现方式\ncategory: 技术\ntags: Java MultiThreading\nkeywords: \ndescription: \n---\n\n### 生产者消费者模式（以下简称PC)\n\n生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，`阻塞队列就相当于一个缓冲区`，平衡了生产者和消费者的处理能力。\n\n<!--more-->\n\n#### 为什么使用PC模式\n- 解耦\n- 缓冲\n- 兼容不同端的处理能力差异\n\n### Java实现方式\n\n#### 1. wait()/nofify()\n\n简单实现：\n\n``` java\n// 简单实现\npublic class PCQueueUsingWait<T> {\n    \n    private final int MAX_CAPACITY = 5;\n    private Object[] items = new Object[MAX_CAPACITY];\n    \n    private int putptr, takeptr;\n    private int count; // count total number of items\n    \n    public void put(T x) throws InterruptedException {\n        synchronized(items) {\n            /*\n             * 唤醒之后，可能还会被其他put线程抢占，从而导致full，因此需要用while判断\n             */\n            while(count == items.length) {\n                System.out.println(\"queue is full, please wait for consumer to take\");\n                items.wait();\n            }\n            \n            items[putptr] = x;\n            if (++putptr == items.length) {\n                putptr = 0;\n            }\n            ++count;\n            items.notifyAll(); // 对比PCQueueUsingLock,这里的实现没有区分full和empty的条件，因此需要notifyAll，否则会导致put之后唤醒的依旧是producer\n        }\n    }\n    \n    @SuppressWarnings(\"unchecked\")\n    public T take() throws InterruptedException {\n        synchronized(items) {\n            /*\n             * 唤醒之后，可能还会被其他take线程抢占，从而导致empty，因此需要用while判断\n             */\n            while(count == 0) {\n                System.out.println(\"queue is empty, please wait for producer to put\");\n                items.wait();\n            }\n            Object x = items[takeptr];\n            if (++takeptr == items.length) {\n                putptr = 0;\n            }\n            ++count;\n            items.notifyAll(); // 同理\n            return (T)x;\n            /*\n             * 这里亮神提出一个问题：是否需要再finally中使用notifyAll？ —— NO\n             * 1. synchronized会自动释放锁（包括异常情况下），除非遇到blocked。yet，blocked这种情况，finally也没有办法啊~~\n             * 2. notifyAll之后只会让线程进入到获取锁的等待队列中，还需要等到syn块结束之后，其他线程才能竞争到锁，因此不会出现return之前其他线程就执行的情况\n             * 3. 对比：Lock需要手动去释放，因此为了保证异常情况下也能够正常释放，需要通过finally块来unLock\n             */\n        }\n    }\n}\n```\n\n改进：(TODO==)\n\n``` java\n\n```\n\n\n#### 2. ReentrantLock - Condition\n\n``` java\nimport java.util.Random;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class PCQueueUsingLock<T> {\n    \n    // max capacity for queue\n    private final int MAX_CAPACITY = 5;\n    private final Object[] items = new Object[MAX_CAPACITY];\n    \n    \n    private final Lock lock = new ReentrantLock();\n    private final Condition notFull = lock.newCondition();\n    private final Condition notEmpty = lock.newCondition();\n    \n    \n    private int putptr, takeptr;\n    private int count; // count total number of items\n    \n    \n    public void put(T x) throws InterruptedException {\n        lock.lock();\n        try {\n            while (count == items.length) {\n                System.out.println(\"queue full, wait for consumer\");\n                notFull.await(); // condition not met, make the thread to await\n            }\n            items[putptr] = x;\n            if (++putptr == items.length) {\n                putptr = 0;\n            }\n            ++count;\n            notEmpty.signal(); // 唤醒所有的线程没有意义，因为最终只有一个能够执行\n            \n            // test \n            System.out.print(\"after put: \");\n            for(Object obj : items) {\n                System.out.print(obj + \" \");\n            }\n            System.out.println();\n            \n        } finally {\n            lock.unlock(); // must in finally !!!\n        }\n    }\n    \n    @SuppressWarnings(\"unchecked\")\n    public T take() throws InterruptedException {\n        lock.lock();\n        try {\n            while (count == 0) {\n                // test\n                System.out.println(\"queue empty, wait for producer\");\n                notEmpty.await();\n            }\n            Object x = items[takeptr];\n            items[takeptr] = null; // set reference to null\n            if (++takeptr == items.length) {\n                takeptr = 0;\n            }\n            --count;\n            notFull.signal();\n            \n            // test \n            System.out.print(\"after take: \");\n            for(Object obj : items) {\n                System.out.print(obj + \" \");\n            }\n            System.out.println();\n            \n            return (T)x;\n        } finally {\n            lock.unlock(); // must use finally !!!\n        }\n    }\n    \n    \n    public static void main(String[] args) {\n        Random rand = new Random(System.currentTimeMillis());\n        final int round = 10;\n        \n        PCQueueUsingLock<Integer> pcQueue = new PCQueueUsingLock<>();\n        final CountDownLatch startGate = new CountDownLatch(1);\n        \n        Thread p = new Thread(){\n            public void run() {\n                try {\n                    startGate.await();  // wait \n                    for(int i=0; i<round; i++) {\n                        pcQueue.put(rand.nextInt(10));\n                        //Thread.sleep((long) (3000*Math.random()));\n                    }\n                } catch (InterruptedException e) {\n                   Thread.currentThread().interrupt(); // best practice: reset interrupt flag\n                }\n            }\n        };\n        \n        Thread c = new Thread(){\n            public void run() {\n                try {\n                    startGate.await();  // wait \n                    for(int i=0; i<round; i++) {\n                        pcQueue.take();\n                        Thread.sleep((long) (3000*Math.random()));\n                    }\n                } catch (InterruptedException e) {\n                   Thread.currentThread().interrupt(); // best practice: reset interrupt flag\n                }\n            }\n        };\n        \n        p.start();\n        c.start();\n        \n        startGate.countDown();  // start together\n    }\n}\n```\n测试结果\n\n``` java\nqueue empty, wait for producer\nafter put: 4 null null null null \nafter put: 4 2 null null null \nafter put: 4 2 7 null null \nafter put: 4 2 7 5 null \nafter put: 4 2 7 5 8 \nqueue full, wait for consumer\nafter take: null 2 7 5 8 \nafter put: 4 2 7 5 8 \nqueue full, wait for consumer\nafter take: 4 null 7 5 8 \nafter put: 4 1 7 5 8 \nqueue full, wait for consumer\nafter take: 4 1 null 5 8 \nafter put: 4 1 8 5 8 \nqueue full, wait for consumer\nafter take: 4 1 8 null 8 \nafter put: 4 1 8 8 8 \nqueue full, wait for consumer\nafter take: 4 1 8 8 null \nafter put: 4 1 8 8 5 \nafter take: null 1 8 8 5 \nafter take: null null 8 8 5 \nafter take: null null null 8 5 \nafter take: null null null null 5 \nafter take: null null null null null \n```\n\n\n#### 3. BlockingQueue \n``` java\n// 简单封装即可\npublic class PCQueueUsingBlockingQueue<T> {\n    \n    private final int MAX_CAPACITY = 10;\n    private LinkedBlockingQueue<T> items = new LinkedBlockingQueue<>(MAX_CAPACITY);\n    \n    public void put(T x) throws InterruptedException {\n        items.put(x); // offer() will not block, while put() will block if queue is full.\n    }\n    \n    public T take() throws InterruptedException {\n        T x = items.take(); // poll() will not block, will take() will block if queue is empty.\n        return x;\n    }\n}\n```\nLinkedBlockingQueue的put内部实现(采用了ReentrantLock的方式)\n\n``` java\n public void put(E e) throws InterruptedException {\n        if (e == null) throw new NullPointerException();   // 空元素判断\n        // Note: convention in all put/take/etc is to preset local var\n        // holding count negative to indicate failure unless set.\n        int c = -1;\n        Node<E> node = new Node<E>(e);\n        final ReentrantLock putLock = this.putLock;\n        final AtomicInteger count = this.count; // 使用atomic的方式计数，保证并发put+take下的count统计正确\n        putLock.lockInterruptibly(); // 可以被中断的lock\n        try {\n            /*\n             * Note that count is used in wait guard even though it is\n             * not protected by lock. This works because count can\n             * only decrease at this point (all other puts are shut\n             * out by lock), and we (or some other waiting put) are\n             * signalled if it ever changes from capacity. Similarly\n             * for all other uses of count in other wait guards.\n             */\n            while (count.get() == capacity) {\n                notFull.await();\n            }\n            enqueue(node);\n            c = count.getAndIncrement();\n            if (c + 1 < capacity)\n                notFull.signal();\n        } finally {\n            putLock.unlock();\n        }\n        if (c == 0)\n            signalNotEmpty();\n    }\n```\n\nLinkedBlockingQueue的offer内部实现（非阻塞，立刻返回）\n\n``` java\n public boolean offer(E e) {\n        if (e == null) throw new NullPointerException();\n        final AtomicInteger count = this.count;\n        if (count.get() == capacity)\n            return false; // 立刻返回false\n        int c = -1;\n        Node<E> node = new Node<E>(e);\n        final ReentrantLock putLock = this.putLock;\n        putLock.lock(); // 不可中断，why？\n        try {\n            if (count.get() < capacity) {\n                enqueue(node);\n                c = count.getAndIncrement();\n                if (c + 1 < capacity)\n                    notFull.signal();\n            }\n        } finally {\n            putLock.unlock();\n        }\n        if (c == 0)\n            signalNotEmpty();\n        return c >= 0;\n    }\n```\n\n#### 4. Semaphore\n\n``` java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.Semaphore;\n\npublic class PCQueueUsingSemaphore {\n    private List<Object> items = new ArrayList<Object>(10);\n    /*\n     * 1. mutex保证存取缓冲区时必须是线程互斥的\n     * 2. isFull保证缓冲区最多元素为initPermits，初始值代表缓冲区开始可以存放多少元素\n     * 3. isEmpty保证缓冲区为0是阻塞，初始值代表缓冲区开始有多少元素\n     * 4. = 也就是isFull和isEmpty的初始化值加起来等于缓冲区的大小\n     * \n     * 5. 注意不同的semaphore的顺序，否则会出现并发问题\n     *      - isFull的信号量可以并发获得\n     *      - 但take和put实际操作时，必须只能有一个线程，因此mutex的permit=1\n     * \n     * 6. 使用semaphore的好处：\n     *      - 避免采用wait\\notify等底层机制，封装更完善\n     *      - 可以避免手动判断缓冲区的当前大小是否满或空，（Condition需要）\n     *      - 借助了AQS，似乎效率上得到了优化？？？？\n     */\n    Semaphore mutex = new Semaphore(1); // mutex put or take\n    Semaphore isFull = new Semaphore(10); // 缓冲区最多允许10个\n    Semaphore isEmpty = new Semaphore(0); // 缓冲区初始值为0\n    \n    public void put(Object x) throws InterruptedException {\n        isFull.acquire(); // 大于0,意味着还有permit可以使用，缓冲区未满\n        try {\n            mutex.acquire(); // acquire = ++\n            items.add(x);  // release = --\n        } finally {\n            mutex.release();\n            isEmpty.release();\n        }\n    }\n    \n    public Object take() throws InterruptedException { \n        Object x = null;\n        isEmpty.acquire();\n        try {\n            mutex.acquire();\n            /* 注意List的remove定义：\n             * Removes the element at the specified position in this list (optional operation). \n             * Shifts any subsequent elements to the left (subtracts one from their indices). \n             * Returns the element that was removed from the list.\n             */\n            x = items.remove(0);\n            return x;\n        } finally {\n            mutex.release();\n            isFull.release();\n        }\n    }\n}\n```\n\n#### 5. LockSupport\n\nLockSupport可以通过park(thread)和unpark(thread)，精确地指定阻塞和唤醒线程。但是貌似就欠缺了wait/notify能够让线程在一个object上等待的接口，因此我考虑要实现PC，需要自己维护一个thread的队列才可以。\n\n#### 6. PipedInputStream / PipedOutputStream\n\n\n### 应用场景\n\n- 需要处理任务时间比较长的场景：\n    + 附件上传\n    + 远程接口查询数据  \n    + Java线程池\n\n### 线程池中如何实现PC模式\n\n### 更高效的考虑\n\n1. putLock与takeLock分离（jdk LinkedBlockingQueue中的实现方式）\n2. 如果能够直接处理，则直接被consumer取走，不需要再存储到queue中，减少复制的开销\n\n### 队列的循环数组方式实现\n\n\n### 参考\n[1] [聊聊并发-生产者消费者模式](http://www.infoq.com/cn/articles/producers-and-consumers-mode)\n\n[2] [生产者消费者问题的实现方式](http://java--hhf.iteye.com/blog/2064926)","slug":"Techniques/2015-10-15-java-produce-consumer","published":1,"date":"2015-12-08T11:35:11.000Z","updated":"2015-12-08T11:35:11.000Z","comments":1,"photos":[],"link":"","_id":"cihxbdnyn0000br63l823gznc"},{"title":"Hello World","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"title: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2015-12-08T11:35:11.000Z","updated":"2015-12-08T11:35:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihxbdnz60006br63vss2aknu"}],"PostAsset":[],"PostCategory":[{"post_id":"cihxbdnyn0000br63l823gznc","category_id":"cihxbdnyt0001br63827tgfu4","_id":"cihxbdnyw0004br634i487hpi"}],"PostTag":[{"post_id":"cihxbdnyn0000br63l823gznc","tag_id":"cihxbdnyt0002br63gggobp1e","_id":"cihxbdnyw0003br63mb9zasqe"}],"Tag":[{"name":"Java MultiThreading","_id":"cihxbdnyt0002br63gggobp1e"}]}}