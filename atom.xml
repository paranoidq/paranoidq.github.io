<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[钱唯の个人博客]]></title>
  <subtitle><![CDATA[佳思忽来，书能下酒；侠情一往，云可赠人。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://paranoidq.github.io/"/>
  <updated>2016-10-20T14:52:23.000Z</updated>
  <id>http://paranoidq.github.io/</id>
  
  <author>
    <name><![CDATA[Paranoid Qian]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Java Webservice实践（2）构建Webservice客户端]]></title>
    <link href="http://paranoidq.github.io/2016/10/20/java-webservice-tutorial-2/"/>
    <id>http://paranoidq.github.io/2016/10/20/java-webservice-tutorial-2/</id>
    <published>2016-10-20T13:39:04.000Z</published>
    <updated>2016-10-20T14:52:23.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h3><p>总体而言，构建Webservice的方式有很多种，概括起来可以分为以下几种：</p>
<ol>
<li>通过Stub的方式，用工具生成客户端的代理，具体的工具可以细分为很多：<br>a. jdk1.6+/bin中自带工具: <code>wsimport</code><br>b. cxf/bin中的工具: <code>wsdl2java</code><br>c. axis/bin中工具</li>
<li>通过CXF动态调用：<br>a. DynamicClientFactory<br>b. JaxWsDynamicClientFactory</li>
<li>通过Axis动态调用：<br>a. Service.createCall()</li>
<li>通过HTTPURLConnection的方式调用（手动组装SOAP报文）</li>
<li>通过SOAPConnection的方式调用</li>
</ol>
<a id="more"></a>
<h3 id="Stub_u7684_u751F_u6210"><a href="#Stub_u7684_u751F_u6210" class="headerlink" title="Stub的生成"></a>Stub的生成</h3><h4 id="u76F4_u63A5_u62F7_u8D1D_u63A5_u53E3"><a href="#u76F4_u63A5_u62F7_u8D1D_u63A5_u53E3" class="headerlink" title="直接拷贝接口"></a>直接拷贝接口</h4><p>拷贝接口，然后利用JaxWsServerFactoryBean方式进行调用<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JaxWsProxyFactoryBean <span class="keyword">factory</span> = <span class="keyword">new</span> JaxWsProxyFactoryBean();</span><br><span class="line"><span class="keyword">factory</span>.setServiceClass(CXFDemo.<span class="keyword">class</span>);</span><br><span class="line"><span class="keyword">factory</span>.setAddress(ADDRESS);</span><br><span class="line">CXFDemo client = (CXFDemo)<span class="keyword">factory</span>.create();</span><br></pre></td></tr></table></figure></p>
<h4 id="u901A_u8FC7wsimport_u751F_u6210stub"><a href="#u901A_u8FC7wsimport_u751F_u6210stub" class="headerlink" title="通过wsimport生成stub"></a>通过wsimport生成stub</h4><p>wsimport调用的方法是：<code>wsimport -d [目录] -keep -Xnocompile -verbose [wsdl]</code><br>其中<code>-d</code>后面表示生成文件存放的目录，<code>-keep</code>表示生成源文件，<code>-verbose</code>表示显示生成的详细过程，<code>-Xnocompile</code>表示不自动编译源码。<br>生成之后，导入到客户端的项目中。生成文件的结构类似下图：<br><img src="/img/webservice/wsimport.png" alt="wsimport-java-structure"></p>
<p>接着，就可以在客户端调用了<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WcgWebService serverStub = <span class="keyword">new</span> WcgWebService();</span><br><span class="line">com.up.<span class="keyword">client</span>.WcgWsInterface <span class="keyword">client</span> = serverStub.getWcgWsImplPort();</span><br><span class="line">String resp = <span class="keyword">client</span>.wsRequest(<span class="string">"service"</span>, <span class="string">"requestMsg"</span>);</span><br><span class="line">System.out.println(resp);</span><br></pre></td></tr></table></figure></p>
<h4 id="u901A_u8FC7wsdl2java_u751F_u6210"><a href="#u901A_u8FC7wsdl2java_u751F_u6210" class="headerlink" title="通过wsdl2java生成"></a>通过wsdl2java生成</h4><p>wsdl2java的调用方法与wsimport类似：<code>sh wsdl2java -d src -client http://localhost:8080/cxf-server/wcg/webservice/interface\?wsdl</code><br>其中<code>-d</code>指定输出的目录，<code>-client</code>输出客户端代码，也可以指定<code>-server</code>输出服务端代码<br>生成之后，导入客户端的项目中。生成的文件结构类似下图：<br><img src="/img/webservice/wsdl2java.png" alt="wsdl2java"></p>
<p>接着，在客户端调用如下：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WcgWebserviceInterface client = <span class="keyword">new</span> Webservice().getWcgWebserviceImplPort();</span><br><span class="line"><span class="keyword">String</span> requestResponse = client.request(<span class="string">"param"</span>, <span class="string">"param"</span>);</span><br><span class="line">System.out.<span class="built_in">println</span>(requestResponse);</span><br></pre></td></tr></table></figure></p>
<h4 id="u901A_u8FC7Axis_u751F_u6210"><a href="#u901A_u8FC7Axis_u751F_u6210" class="headerlink" title="通过Axis生成"></a>通过Axis生成</h4><p>调用方式：<br>…</p>
<p>这里需要注意的是：需要指定编码方式时，可以通过以下方式设置<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stub<span class="selector-class">._setProperty</span>(Call.CHARACTER_SET_ENCODING, <span class="string">"GBK"</span>);</span><br></pre></td></tr></table></figure></p>
<p>参考自：<a href="http://stackoverflow.com/questions/9093078/apache-axis-charset-wrong-encoding-on-tomcat" target="_blank" rel="external">http://stackoverflow.com/questions/9093078/apache-axis-charset-wrong-encoding-on-tomcat</a></p>
<h3 id="u901A_u8FC7CXF_u52A8_u6001_u8C03_u7528"><a href="#u901A_u8FC7CXF_u52A8_u6001_u8C03_u7528" class="headerlink" title="通过CXF动态调用"></a>通过CXF动态调用</h3><p>通过以上的几种方法，可以看出Stub调用的方式比较简单，只需要根据wsdl生成好对应的代理类就可以了，一般3-4行代码可以搞定。但是缺点就是接口不能随意改动，并且扩展起来不方便。</p>
<h3 id="u901A_u8FC7Axis_u52A8_u6001_u8C03_u7528"><a href="#u901A_u8FC7Axis_u52A8_u6001_u8C03_u7528" class="headerlink" title="通过Axis动态调用"></a>通过Axis动态调用</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> namespace = <span class="string">"http://ws.wcg.unionpay.com"</span>;  <span class="comment">// 定义命名空间</span></span><br><span class="line"><span class="keyword">String</span> serviceName = <span class="string">"wcgWebService"</span>; <span class="comment">// 定义服务名</span></span><br><span class="line">QName service = <span class="keyword">new</span> QName(namespace, serviceName);</span><br><span class="line"><span class="keyword">String</span> operationName = <span class="string">"WsRequest"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Call</span> <span class="keyword">call</span> = <span class="keyword">new</span> Service().createCall();</span><br><span class="line"><span class="keyword">call</span>.setPortTypeName(service);</span><br><span class="line"><span class="keyword">call</span>.setOperationName(<span class="keyword">new</span> QName(namespace, operationName));</span><br><span class="line"><span class="keyword">call</span>.setProperty(...)</span><br><span class="line"><span class="keyword">call</span>.addParameter(<span class="string">"service"</span>, ParameterMode.IN);</span><br><span class="line"><span class="keyword">call</span>.addParameter(<span class="string">"requestMsg"</span>, ParameterMode.IN);</span><br><span class="line"><span class="keyword">call</span>.setReturnType();</span><br><span class="line">Object[] inParams = <span class="keyword">new</span> Object[]&#123;<span class="string">"demo"</span>, <span class="string">"demo"</span>&#125;;</span><br><span class="line"><span class="keyword">String</span> ret = (<span class="keyword">String</span>)<span class="keyword">call</span>.invoke(inParams);</span><br></pre></td></tr></table></figure>
<h3 id="u901A_u8FC7HTTPURLConnection_u8C03_u7528"><a href="#u901A_u8FC7HTTPURLConnection_u8C03_u7528" class="headerlink" title="通过HTTPURLConnection调用"></a>通过HTTPURLConnection调用</h3><p>这种调用方式就需要手动去组装SOAP报文，是一种最为原始的方式。但其实这种方式体现除了Webservice的本质，就是SOAP + HTTP POST。只不过这种方式在便利程度和扩展性方面都是很不友好的。<br>具体的代码如下：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">private static String <span class="keyword">buildSOAP() </span>&#123;</span><br><span class="line">    String soap = <span class="string">"&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ws=\"http://ws.wcg.unionpay.com\"&gt;\n"</span> +</span><br><span class="line">            <span class="string">"    &lt;soapenv:Header/&gt;\n"</span> +</span><br><span class="line">            <span class="string">"    &lt;soapenv:Body&gt;\n"</span> +</span><br><span class="line">            <span class="string">"    &lt;ws:WsRequest&gt;\n"</span> +</span><br><span class="line">            <span class="string">"    &lt;service&gt;apram&lt;/service&gt;\n"</span> +</span><br><span class="line">            <span class="string">"    &lt;requestMsg&gt;param&lt;/requestMsg&gt;\n"</span> +</span><br><span class="line">            <span class="string">"    &lt;/ws:WsRequest&gt;\n"</span> +</span><br><span class="line">            <span class="string">"    &lt;/soapenv:Body&gt;\n"</span> +</span><br><span class="line">            <span class="string">"    &lt;/soapenv:Envelope&gt;"</span><span class="comment">;</span></span><br><span class="line">    return soap<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    String soap = <span class="keyword">buildSOAP();</span><br><span class="line"></span></span><br><span class="line">    HttpURLConnection connection = (HttpURLConnection) (new URL(<span class="string">"http://localhost:8080/cxf-server/ws/request?wsdl"</span>)).openConnection()<span class="comment">;</span></span><br><span class="line">    connection.setDoInput(true)<span class="comment">;</span></span><br><span class="line">    connection.setDoOutput(true)<span class="comment">;</span></span><br><span class="line">    connection.setRequestMethod(<span class="string">"POST"</span>)<span class="comment">;</span></span><br><span class="line">    connection.setRequestProperty(<span class="string">"Content-Length"</span>, String.valueOf(soap.length()))<span class="comment">;</span></span><br><span class="line">    connection.setRequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"application/xop+xml; charset=utf-8; type=\"test/xml\""</span>)<span class="comment">;</span></span><br><span class="line">    connection.setRequestProperty(<span class="string">"SOAPAction"</span>, <span class="string">"soap_action"</span>)<span class="comment">;</span></span><br><span class="line">    connection.setUseCaches(false)<span class="comment">;</span></span><br><span class="line">    connection.connect()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    connection.getOutputStream().write(soap.getBytes(<span class="string">"UTF-8"</span>))<span class="comment">;</span></span><br><span class="line">    connection.getOutputStream().flush()<span class="comment">;</span></span><br><span class="line">    connection.getOutputStream().<span class="keyword">close();</span><br><span class="line"></span></span><br><span class="line">    InputStream in = connection.getInputStream()<span class="comment">;</span></span><br><span class="line">    String resp = IOUtils.toString(in)<span class="comment">;</span></span><br><span class="line">    System.out.println(resp)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="u901A_u8FC7SOAPConnection_u7684_u65B9_u5F0F_u8C03_u7528"><a href="#u901A_u8FC7SOAPConnection_u7684_u65B9_u5F0F_u8C03_u7528" class="headerlink" title="通过SOAPConnection的方式调用"></a>通过SOAPConnection的方式调用</h3><p>相比于之前的HttpURLConnection方式，SOAPConnection的方式稍微高级一些，不需要通过字符串的方式手动拼报文了，SOAPConnection的API会帮你拼，你只需要做一些定制化的工作就可以了，并且可以进行一些复杂的配置。</p>
<h3 id="Axis_u548CApache_u7684_u5BF9_u6BD4"><a href="#Axis_u548CApache_u7684_u5BF9_u6BD4" class="headerlink" title="Axis和Apache的对比"></a>Axis和Apache的对比</h3><table>
<thead>
<tr>
<th></th>
<th>Axis2</th>
<th>CXF</th>
</tr>
</thead>
<tbody>
<tr>
<td>目标</td>
<td>WebService引擎</td>
<td>简易的SOA框架，可以作为ESB</td>
</tr>
<tr>
<td>ws* 标准支持</td>
<td>不支持WS-Policy</td>
<td>WS-Addressing，WS-Policy， WS-RM， WS-Security，WS-I Basic Profile</td>
</tr>
<tr>
<td>数据绑定支持</td>
<td>XMLBeans、JiBX、JaxMe 、JaxBRI、ADB</td>
<td>JAXB, Aegis, XMLBeans, SDO, JiBX</td>
</tr>
<tr>
<td>spring集成</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>应用集成</td>
<td>困难</td>
<td>简单</td>
</tr>
<tr>
<td>多语言</td>
<td>支持C/C++</td>
<td>不支持</td>
</tr>
<tr>
<td>部署</td>
<td>web应用</td>
<td>嵌入式</td>
</tr>
<tr>
<td>服务监控和管理</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody>
</table>
<h3 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.cnblogs.com/holbrook/archive/2012/12/12/2814821.html" target="_blank" rel="external">http://www.cnblogs.com/holbrook/archive/2012/12/12/2814821.html</a></li>
<li><a href="http://blog.csdn.net/zolalad/article/details/31735791" target="_blank" rel="external">http://blog.csdn.net/zolalad/article/details/31735791</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h3><p>总体而言，构建Webservice的方式有很多种，概括起来可以分为以下几种：</p>
<ol>
<li>通过Stub的方式，用工具生成客户端的代理，具体的工具可以细分为很多：<br>a. jdk1.6+/bin中自带工具: <code>wsimport</code><br>b. cxf/bin中的工具: <code>wsdl2java</code><br>c. axis/bin中工具</li>
<li>通过CXF动态调用：<br>a. DynamicClientFactory<br>b. JaxWsDynamicClientFactory</li>
<li>通过Axis动态调用：<br>a. Service.createCall()</li>
<li>通过HTTPURLConnection的方式调用（手动组装SOAP报文）</li>
<li>通过SOAPConnection的方式调用</li>
</ol>]]>
    
    </summary>
    
      <category term="webservice" scheme="http://paranoidq.github.io/tags/webservice/"/>
    
      <category term="webservice" scheme="http://paranoidq.github.io/categories/webservice/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java Webservice实践（1）构建简单的Webservice服务]]></title>
    <link href="http://paranoidq.github.io/2016/10/20/java-webservice-tutorial-1/"/>
    <id>http://paranoidq.github.io/2016/10/20/java-webservice-tutorial-1/</id>
    <published>2016-10-20T12:45:04.000Z</published>
    <updated>2016-10-20T14:48:00.000Z</updated>
    <content type="html"><![CDATA[<h3 id="JAX-WS"><a href="#JAX-WS" class="headerlink" title="JAX-WS"></a>JAX-WS</h3><p>JAX-WS(Java API for XML Web Services)，是SOAP协议的一个Java的实现规范，这个新规范是为了简化基于SOAP的Java开发。JAX-WS规范其实就是一组XMLweb services的JAVA API，JAX-WS允许开发者可以选择RPCoriented或者message-oriented来实现自己的web services。通过使用Java™ API for XMLWeb Services (JAX-WS) 技术设计和开发 Web服务，可以带来很多好处，能简化 Web 服务的开发和部署，并能加速 Web 服务的开发。</p>
<p>JAX-WS将本地的远程调用转换为XML协议（一般为SOAP格式），从而开发者不需要编写任何SOAP组装消息代码；同样，在服务端的JAX-WS会将SOAP消息解析为具体的函数调用，并返回结果。</p>
<p><img src="/img/webservice/jax-ws-tutorials.gif" alt="jax-runtime"></p>
<a id="more"></a>
<h3 id="u5B9E_u73B0_u4E00_u4E2Awebservice_u7684_u9700_u8981_u7684_u5927_u81F4_u6D41_u7A0B"><a href="#u5B9E_u73B0_u4E00_u4E2Awebservice_u7684_u9700_u8981_u7684_u5927_u81F4_u6D41_u7A0B" class="headerlink" title="实现一个webservice的需要的大致流程"></a>实现一个webservice的需要的大致流程</h3><ol>
<li>服务端，定义服务接口（SEI: service endpoint interface）,并提供相关的实现类（SIB: service implementation bean）</li>
<li>通过JAX-WS服务API接口发布为webservice服务，从而可以产生一个公开的?wsdl网页，能够访问到提供了哪些服务</li>
<li><p>客户端通过JAX-WS的API根据公开的wsdl生成本地的代理（Stub）来实现对于远程方法的调用，调用过程就像在调用本地方法一样，JAX-WS Runtime会处理SOAP报文组装和网络传输等底层细节</p>
<p>当然，JAX-WS 也提供了一组针对底层消息进行操作的API调用，你可以通过Dispatch 直接使用SOAP消息或XML消息发送请求或者使用Provider处理SOAP或XML消息。</p>
</li>
</ol>
<h3 id="u4E00_u4E2A_u7B80_u5355_u7684_u5B9E_u73B0"><a href="#u4E00_u4E2A_u7B80_u5355_u7684_u5B9E_u73B0" class="headerlink" title="一个简单的实现"></a>一个简单的实现</h3><h4 id="u9996_u5148_u5B9A_u4E49_u63A5_u53E3_uFF1A"><a href="#u9996_u5148_u5B9A_u4E49_u63A5_u53E3_uFF1A" class="headerlink" title="首先定义接口："></a>首先定义接口：</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com<span class="selector-class">.up</span><span class="selector-class">.ws</span><span class="selector-class">.server</span>;</span><br><span class="line"></span><br><span class="line">import javax<span class="selector-class">.jws</span><span class="selector-class">.WebMethod</span>;</span><br><span class="line">import javax<span class="selector-class">.jws</span><span class="selector-class">.WebParam</span>;</span><br><span class="line">import javax<span class="selector-class">.jws</span><span class="selector-class">.WebResult</span>;</span><br><span class="line">import javax<span class="selector-class">.jws</span><span class="selector-class">.WebService</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * @author paranoidq</span><br><span class="line"> * @since 0.1</span><br><span class="line"> */</span></span><br><span class="line"><span class="variable">@WebService</span>(targetNamespace = <span class="string">"http://ws.wcg.unionpay.com"</span>)</span><br><span class="line">public interface WcgWsInterface &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@WebMethod</span>(operationName = <span class="string">"WsRequest"</span>)</span><br><span class="line">    <span class="variable">@WebResult</span>(name = <span class="string">"WsResponse"</span>)</span><br><span class="line">    String request(<span class="variable">@WebParam</span>(name = <span class="string">"service"</span>) String service, <span class="variable">@WebParam</span>(name = <span class="string">"requestMsg"</span>) String requestMsg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意点：</p>
<ol>
<li>这里定义了targetNamespace, 如果没有定义，则默认为该类的包名</li>
<li>用@WebMethod注解来指定了operationName，如果没有指定，则操作名默认为方法名</li>
<li>用@WebResult定义了返回值的名字，如果没有指定，默认为response</li>
<li>用@WebParamd定义了参数名字，如果没有指定，默认为param1（或arg1？）</li>
</ol>
<p>实际上，这些注解提高了wsdl的可读性。</p>
<h4 id="u5B9A_u4E49_u5B9E_u73B0_u7C7B"><a href="#u5B9A_u4E49_u5B9E_u73B0_u7C7B" class="headerlink" title="定义实现类"></a>定义实现类</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com<span class="selector-class">.up</span><span class="selector-class">.ws</span><span class="selector-class">.server</span>;</span><br><span class="line"></span><br><span class="line">import javax<span class="selector-class">.jws</span><span class="selector-class">.WebService</span>;</span><br><span class="line">import javax<span class="selector-class">.jws</span><span class="selector-class">.soap</span><span class="selector-class">.SOAPBinding</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * @author paranoidq</span><br><span class="line"> * @since 0.1</span><br><span class="line"> */</span></span><br><span class="line"><span class="variable">@WebService</span>(endpointInterface = <span class="string">"com.up.ws.server.WcgWsInterface"</span>, serviceName = <span class="string">"wcgWebService"</span>, targetNamespace = <span class="string">"http://ws.wcg.unionpay.com"</span>)</span><br><span class="line"><span class="variable">@SOAPBinding</span>(style = SOAPBinding.Style.DOCUMENT)</span><br><span class="line">public class WcgWsImpl implements WcgWsInterface &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Override</span></span><br><span class="line">    public String request(String service, String requestMsg) &#123;</span><br><span class="line">        return "hello world";</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里指定了实现类对应的接口，以及服务名。同时，指定了SOAPBinding的类型。<br>一般而言，SOAP消息的格式有两种：RPC和DOCUMENT。(<strong>后面再理解区别</strong>)</p>
<h4 id="u53D1_u5E03_u63A5_u53E3"><a href="#u53D1_u5E03_u63A5_u53E3" class="headerlink" title="发布接口"></a>发布接口</h4><p>这里我们采用两种简单的方式发布接口</p>
<ol>
<li><p>第一种方式：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">IHelloServices impl = <span class="keyword">new</span> WcgWsImpl();  </span><br><span class="line"><span class="comment">// 创建WebServices服务接口  </span></span><br><span class="line">WcgWsInterface <span class="keyword">factory</span> = <span class="keyword">new</span> JaxWsServerFactoryBean();  </span><br><span class="line"><span class="comment">// 注册webservices接口  </span></span><br><span class="line"><span class="keyword">factory</span>.setServiceClass(WcgWsInterface.<span class="keyword">class</span>);  </span><br><span class="line"><span class="comment">// 发布接口  </span></span><br><span class="line"><span class="keyword">factory</span>.setAddress(<span class="string">"http://localhost:8090/webservice"</span>);  </span><br><span class="line"><span class="keyword">factory</span>.setServiceBean(impl);  </span><br><span class="line"><span class="comment">// 创建服务  </span></span><br><span class="line"><span class="keyword">factory</span>.create();</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二种方式：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Endpoint<span class="selector-class">.publish</span>(<span class="string">"http://localhost:8090/webservice"</span>, new WcgWsImpl());</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>发布之后，我们就可以通过<code>http://localhost:8090/webservice?wsdl</code>查看提供的服务了。<br>需要注意的是：CXF看上去没有在tomcat容器中运行，其实还是有容器的，而容器就是jetty。因此，需要我们在pom文件中包含相应的依赖。这里列出所有的依赖：(利用Endpoint的方式发布的时候，不需要<code>cxf-rt-frontend-jaxws</code>这个依赖)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-discovery<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>20040218.194635<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-transports-http<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-frontend-jaxws<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-transports-http-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>注意</strong>：<code>cxf-rt-transports-http-jetty</code>这个依赖一定要包含，否则会出现<code>CXF BusException No DestinationFactory for Namespace: http://cxf.apache.org/transport/http</code>的错误, 参考：<br><a href="http://stackoverflow.com/questions/24447280/cxf-busexception-no-destinationfactory-for-namespace-http-cxf-apache-org-trans" target="_blank" rel="external">http://stackoverflow.com/questions/24447280/cxf-busexception-no-destinationfactory-for-namespace-http-cxf-apache-org-trans</a></p>
<p>这样我们的一个webservice就构建好了。<br>下一篇将讲解如何构建客户端来访问我们的服务。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="JAX-WS"><a href="#JAX-WS" class="headerlink" title="JAX-WS"></a>JAX-WS</h3><p>JAX-WS(Java API for XML Web Services)，是SOAP协议的一个Java的实现规范，这个新规范是为了简化基于SOAP的Java开发。JAX-WS规范其实就是一组XMLweb services的JAVA API，JAX-WS允许开发者可以选择RPCoriented或者message-oriented来实现自己的web services。通过使用Java™ API for XMLWeb Services (JAX-WS) 技术设计和开发 Web服务，可以带来很多好处，能简化 Web 服务的开发和部署，并能加速 Web 服务的开发。</p>
<p>JAX-WS将本地的远程调用转换为XML协议（一般为SOAP格式），从而开发者不需要编写任何SOAP组装消息代码；同样，在服务端的JAX-WS会将SOAP消息解析为具体的函数调用，并返回结果。</p>
<p><img src="/img/webservice/jax-ws-tutorials.gif" alt="jax-runtime"></p>]]>
    
    </summary>
    
      <category term="webservice" scheme="http://paranoidq.github.io/tags/webservice/"/>
    
      <category term="webservice" scheme="http://paranoidq.github.io/categories/webservice/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NoHttpResponseException问题分析]]></title>
    <link href="http://paranoidq.github.io/2016/10/17/NoHttpResponseException-problem-analysis/"/>
    <id>http://paranoidq.github.io/2016/10/17/NoHttpResponseException-problem-analysis/</id>
    <published>2016-10-17T02:11:30.000Z</published>
    <updated>2016-10-17T02:21:56.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u573A_u666F"><a href="#u573A_u666F" class="headerlink" title="场景"></a>场景</h3><p>在性能测试的时候，使用apache httpclient连续发送报文到server进行压测。压测的配置如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">总数：10000</span><br><span class="line">并发：400</span><br><span class="line">每个发送线程的QPS限制：20</span><br></pre></td></tr></table></figure></p>
<p>出现的问题是： 大概1000左右的报文会出现 <code>NoHttpResponseException [server ip] failed to respond</code>。调低并发度到300一下时，不会出现这样的异常。<br><a id="more"></a></p>
<h3 id="u539F_u56E0_u5206_u6790"><a href="#u539F_u56E0_u5206_u6790" class="headerlink" title="原因分析"></a>原因分析</h3><p>查阅相关资料，官方对于<code>NoHttpResponseException</code>解释是：</p>
<blockquote>
<p>In some circumstances, usually when under heavy load, the web server may be able to receive requests but unable to process them. A lack of sufficient resources like worker threads is a good example. This may cause the server to drop the connection to the client without giving any response. HttpClient throws NoHttpResponseException when it encounters such a condition. In most cases it is safe to retry a method that failed with NoHttpResponseException.</p>
</blockquote>
<p>大致意思跟我之前构想的一样，在某些情况下，通常在重负载下时，Web服务器可能能够接收请求，但无法处理它们。缺乏足够的资源，比如工作线程，这可能会导致服务器断开客户端连接，并且没有给予任何回应。当它遇到这样的条件HttpClient会抛出NoHttpResponseException。此异常是由于服务器端过载而拒绝接受请求（不再响应）所致。<br>但是细想，为什么服务端会drop掉连接呢？首先贴一则查阅到的stackoverflow上的分析：</p>
<blockquote>
<p>Most likely persistent connections that are kept alive by the connection manager become stale. That is, the target server shuts down the connection on its end without HttpClient being able to react to that event, while the connection is being idle, thus rendering the connection half-closed or ‘stale’. Usually this is not a problem. HttpClient employs several techniques to verify connection validity upon its lease from the pool. Even if the stale connection check is disabled and a stale connection is used to transmit a request message the request execution usually fails in the write operation with SocketException and gets automatically retried. However under some circumstances the write operation can terminate without an exception and the subsequent read operation returns -1 (end of stream). In this case HttpClient has no other choice but to assume the request succeeded but the server failed to respond most likely due to an unexpected error on the server side.</p>
</blockquote>
<p>大致含义：httpclient的连接一般由一个poolConnectionManager管理，而往往会有keep-alive的设置，即保持这个连接多久。但是当server端主动关闭连接的时候，由于<strong>Connection可能处于idle状态，因此pool没有通知到HttpClient对应的connection，从而造成了connection处于半关闭的状态</strong>。<br>因此在这种状态下，之后connection从pool中被唤醒或取出，然后发送报文在某些情况下write会在没有报异常的情况下结束，然后httpclient尝试从connection中read应答时返回了-1（注意，不是没有返回，否则应该是WaitTimeoutException）。httpclient认为server返回了应答，但实际上没有，因此抛出了NoHttpResponseException异常。</p>
<p>进一步思考：为什么server会主动关闭Connection呢？如果是处理能力有限，那么应该更加利用connection才对，而不应该主动drop。我的思考如下：</p>
<blockquote>
<p>1.假设server的连接限制是10，那么显然，如果现在只有5个请求来了，那么会创建5个connection。<br>2.如果现在来了20个请求，那么显然server是处理不过来的</p>
</blockquote>
<h3 id="u89E3_u51B3_u65B9_u6848"><a href="#u89E3_u51B3_u65B9_u6848" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="1-__u589E_u52A0_u670D_u52A1_u5668_u5904_u7406_u80FD_u529B"><a href="#1-__u589E_u52A0_u670D_u52A1_u5668_u5904_u7406_u80FD_u529B" class="headerlink" title="1. 增加服务器处理能力"></a>1. 增加服务器处理能力</h4><p>这种方法在我们的项目中有效，我们通过修改JBoss服务器的两个参数来达到增强服务器处理能力的效果：</p>
<ul>
<li>maxThreads 最大线程数</li>
<li>acceptCount 最大等待线程数</li>
</ul>
<p>Jboss的线程模型：（引用自<a href="http://blog.csdn.net/lengyuhong/article/details/6319069" target="_blank" rel="external">http://blog.csdn.net/lengyuhong/article/details/6319069
</a>）<br><img src="/img/jboss-thread-model.gif" alt="jboss-thread-model"></p>
<h4 id="2-_retry"><a href="#2-_retry" class="headerlink" title="2. retry"></a>2. retry</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpClientBuilder.setRetryHandler(<span class="keyword">new</span> StandardHttpRequestRetryHandler(<span class="number">3</span>, <span class="literal">true</span>));</span><br></pre></td></tr></table></figure>
<h4 id="3-__u9650_u5236keepAlive_u7684_u65F6_u95F4"><a href="#3-__u9650_u5236keepAlive_u7684_u65F6_u95F4" class="headerlink" title="3. 限制keepAlive的时间"></a>3. 限制keepAlive的时间</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ConnectionKeepAliveStrategy connectionKeepAliveStrategy = new ConnectionKeepAliveStrategy() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public long getKeepAliveDuration(HttpResponse httpResponse, HttpContext httpContext) &#123;</span><br><span class="line">            return <span class="number">20</span> * <span class="number">1000</span><span class="comment">; // tomcat默认keepAliveTimeout为20s</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">;</span></span><br><span class="line">PoolingHttpClientConnectionManager connManager = new PoolingHttpClientConnectionManager(<span class="number">20</span>, TimeUnit.SECONDS)<span class="comment">;</span></span><br><span class="line">connManager.setMaxTotal(<span class="number">200</span>)<span class="comment">;</span></span><br><span class="line">connManager.setDefaultMaxPerRoute(<span class="number">200</span>)<span class="comment">;</span></span><br><span class="line">RequestConfig requestConfig = RequestConfig.custom()</span><br><span class="line">    .setConnectTimeout(<span class="number">10</span> * <span class="number">1000</span>)</span><br><span class="line">    .setSocketTimeout(<span class="number">10</span> * <span class="number">1000</span>)</span><br><span class="line">    .setConnectionRequestTimeout(<span class="number">10</span> * <span class="number">1000</span>)</span><br><span class="line">    .<span class="keyword">build();</span><br><span class="line"></span>HttpClientBuilder httpClientBuilder = HttpClientBuilder.create()<span class="comment">;</span></span><br><span class="line">httpClientBuilder.setConnectionManager(connManager)<span class="comment">;</span></span><br><span class="line">httpClientBuilder.setDefaultRequestConfig(requestConfig)<span class="comment">;</span></span><br><span class="line">httpClientBuilder.setRetryHandler(new DefaultHttpRequestRetryHandler())<span class="comment">;</span></span><br><span class="line">httpClientBuilder.setKeepAliveStrategy(connectionKeepAliveStrategy)<span class="comment">;</span></span><br><span class="line">HttpClient httpClient = httpClientBuilder.<span class="keyword">build();</span><br><span class="line"></span>ClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient)<span class="comment">;</span></span><br><span class="line">restTemplate = new RestTemplate(requestFactory)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>主要是增加keepalive的策略，但这又带来一个问题，所有的连接只有20秒，无法使用长连接的性能优势</p>
<h4 id="4-_closeIdleConnections"><a href="#4-_closeIdleConnections" class="headerlink" title="4. closeIdleConnections"></a>4. closeIdleConnections</h4><p>PoolingHttpClientConnectionManager.closeIdleConnections 方法<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">closeIdleConnections</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> idleTimeout, <span class="keyword">final</span> TimeUnit tunit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.log.isDebugEnabled()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.log.debug(<span class="string">"Closing connections idle longer than "</span> + idleTimeout + <span class="string">" "</span> + tunit);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.pool.closeIdle(idleTimeout, tunit);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>三种方案暂且列出，准备实践一下效果，后续再更新到博客中来。相比而言，retry的方案比较sb，但是估计很好用；keepAlive限制需要考虑场景，某些需要长连接的场景下可能不是很合适，并且把统一把连接过期关掉，显然会带来不小的性能损失。最后一种方案，应该是keepAlive的折中优化，本质上是如果connection一直被pool拿出来使用，那我就不关闭你；如果connection一直idle，那么过了一段时间我就主动关闭你了。这样就避免了keepAlive统一限制的问题，同时如果一个connection被pool拿出来用了，那么显然他不可能被server关闭；而idle connection被关闭了，所以不会出现上述server端drop connection而pool又无法通知idle connection的问题。</p>
<h3 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://my.oschina.net/sannychan/blog/485677" target="_blank" rel="external">https://my.oschina.net/sannychan/blog/485677</a></li>
<li><a href="http://stackoverflow.com/questions/10558791/apache-httpclient-interim-error-nohttpresponseexception" target="_blank" rel="external">http://stackoverflow.com/questions/10558791/apache-httpclient-interim-error-nohttpresponseexception</a></li>
<li><a href="http://stackoverflow.com/questions/10570672/get-nohttpresponseexception-for-load-testing/10680629#10680629" target="_blank" rel="external">http://stackoverflow.com/questions/10570672/get-nohttpresponseexception-for-load-testing/10680629#10680629</a></li>
<li><a href="https://www.nuxeo.com/blog/using-httpclient-properly-avoid-closewait-tcp-connections/" target="_blank" rel="external">https://www.nuxeo.com/blog/using-httpclient-properly-avoid-closewait-tcp-connections/</a></li>
<li><a href="http://luan.iteye.com/blog/1820054" target="_blank" rel="external">http://luan.iteye.com/blog/1820054</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u573A_u666F"><a href="#u573A_u666F" class="headerlink" title="场景"></a>场景</h3><p>在性能测试的时候，使用apache httpclient连续发送报文到server进行压测。压测的配置如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">总数：10000</span><br><span class="line">并发：400</span><br><span class="line">每个发送线程的QPS限制：20</span><br></pre></td></tr></table></figure></p>
<p>出现的问题是： 大概1000左右的报文会出现 <code>NoHttpResponseException [server ip] failed to respond</code>。调低并发度到300一下时，不会出现这样的异常。<br>]]>
    
    </summary>
    
      <category term="httpclient" scheme="http://paranoidq.github.io/tags/httpclient/"/>
    
      <category term="tcp" scheme="http://paranoidq.github.io/tags/tcp/"/>
    
      <category term="java" scheme="http://paranoidq.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[(翻译) Using HttpClient properly to avoid CLOSE_WAIT TCP connections]]></title>
    <link href="http://paranoidq.github.io/2016/10/11/Using-HttpClient-properly-to-avoid-CLOSE-WAIT-TCP-connections/"/>
    <id>http://paranoidq.github.io/2016/10/11/Using-HttpClient-properly-to-avoid-CLOSE-WAIT-TCP-connections/</id>
    <published>2016-10-11T12:46:41.000Z</published>
    <updated>2016-10-11T13:26:29.000Z</updated>
    <content type="html"><![CDATA[<p>原文链接：<a href="https://www.nuxeo.com/blog/using-httpclient-properly-avoid-closewait-tcp-connections/" target="_blank" rel="external">https://www.nuxeo.com/blog/using-httpclient-properly-avoid-closewait-tcp-connections/</a></p>
<p>在我帮助我的客户debug一个TCP connection关于CLOSE_WAIT状态的问题时，我发现我们错误的使用了HttpClient。在这个问题上，如果你试图google <a href="http://www.google.com/search?q=HttpClient+CLOSE_WAIT" target="_blank" rel="external">HttpClient CLOSE_WAIT</a>，你会发现很多人跟我们一样存在疑惑。但是关于这个问题，很多的解答不够直观，甚至<a href="http://hc.apache.org/httpclient-legacy/tutorial.html" target="_blank" rel="external">官方文档</a>都是错误的。所以我在这篇文章中进行了分析。</p>
<p>Apache HttpClient的基本用法如下：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HttpClient httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line">HttpMethod <span class="function"><span class="keyword">method</span> = <span class="title">new</span> <span class="title">GetMethod</span><span class="params">(uri)</span>;</span></span><br><span class="line"><span class="keyword">try</span> <span class="comment">&#123;</span><br><span class="line">    int statusCode = httpClient.executeMethod(method);</span><br><span class="line">    byte[] responseBody = method.getResponseBody();</span><br><span class="line">    // ...</span><br><span class="line">    return stuff;</span><br><span class="line">&#125;</span> <span class="keyword">finally</span> <span class="comment">&#123;</span><br><span class="line">    method.releaseConnection();</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>但事实上，这是不够的。问题在于释放connection使得connection对于HttpClient而言重新可用，而非真正的关闭该connection，原因在于使用了Http1.1协议，HttpClient可以在同一个connection中批量发送后续的请求(?)。</p>
<p>尽管，server端可能单向关闭了连接，但是客户端的connection还是打开的，并且一直持续到下一次尝试从connection中读报文时（此时，客户端才会意识到服务端已经关闭了这个连接）。TCP就是采用这种方式工作的。上面的情况我们称之为<code>半关闭的连接</code>，<strong>因为close()操作仅仅意味着我不会再往发送任何数据了，但是我还是可以从已经“closed”的连接中读取数据，只要另一端没有调用这个close()操作。</strong>[译注: 理解这一点非常重要]</p>
<p>因此，当HttpClient实例超过作用域的时候，它会被GC标记为可回收状态，但是GC并不会立即回收它。在GC真正回收它之前，HttpClient内部的connection仍然处于打开的状态，此时的TCP状态就处于CLOSE-WAIT。</p>
<p>为了解决这个问题，最简单的方法是在调用method之前设置如下代码：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">method</span>.<span class="title">setRequestHeader</span><span class="params">("Connection", "close")</span>;</span></span><br></pre></td></tr></table></figure></p>
<p>这会导致HttpClient在接受完应答报文之后立即关闭connection。</p>
<p>另外一个方法是在finally块中添加如下代码：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpClient<span class="selector-class">.getHttpConnectionManager</span>()<span class="selector-class">.closeIdleConnections</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></p>
<p>效果应该跟上面的一样，都是让connection在idle之后立即销毁connection。</p>
<p>更好的方法是：不要每次都new HttpClient，而重用经过<code>MultiThreadedHttpConnectionManager</code>配置的一个client实例。当然，这种情况下，就需要最终记得清理MultiThreadedHttpConnectionManager。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> MultiThreadedHttpConnectionManager connectionManager;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">HttpClient</span> httpClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> init() &#123;</span><br><span class="line">    connectionManager = <span class="keyword">new</span> MultiThreadedHttpConnectionManager()</span><br><span class="line">    <span class="comment">// ... configure connectionManager ...</span></span><br><span class="line">    httpClient = <span class="keyword">new</span> <span class="built_in">HttpClient</span>(connectionManager);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">shutdown</span>() &#123;</span><br><span class="line">    connectionManager.<span class="built_in">shutdown</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> <span class="built_in">process</span>(<span class="keyword">String</span> uri) &#123;</span><br><span class="line">    HttpMethod method = <span class="keyword">new</span> GetMethod(uri);</span><br><span class="line">    <span class="built_in">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> statusCode = httpClient.executeMethod(method);</span><br><span class="line">        <span class="keyword">byte</span>[] responseBody = method.getResponseBody();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="built_in">return</span> stuff;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        method.releaseConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文链接：<a href="https://www.nuxeo.com/blog/using-httpclient-properly-avoid-closewait-tcp-connections/">https://www.nuxeo.com/blog/using-httpclient-properly-avoid-closewait-tcp-connections/</a></p>
<p>在我帮助我的客户debug一个TCP connection关于CLOSE_WAIT状态的问题时，我发现我们错误的使用了HttpClient。在这个问题上，如果你试图google <a href="http://www.google.com/search?q=HttpClient+CLOSE_WAIT">HttpClient CLOSE_WAIT</a>，你会发现很多人跟我们一样存在疑惑。但是关于这个问题，很多的解答不够直观，甚至<a href="http://hc.apache.org/httpclient-legacy/tutorial.html">官方文档</a>都是错误的。所以我在这篇文章中进行了分析。</p>
<p>Apache HttpClient的基本用法如下：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HttpClient httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line">HttpMethod <span class="function"><span class="keyword">method</span> = <span class="title">new</span> <span class="title">GetMethod</span><span class="params">(uri)</span>;</span></span><br><span class="line"><span class="keyword">try</span> <span class="comment">&#123;</span><br><span class="line">    int statusCode = httpClient.executeMethod(method);</span><br><span class="line">    byte[] responseBody = method.getResponseBody();</span><br><span class="line">    // ...</span><br><span class="line">    return stuff;</span><br><span class="line">&#125;</span> <span class="keyword">finally</span> <span class="comment">&#123;</span><br><span class="line">    method.releaseConnection();</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="httpclient" scheme="http://paranoidq.github.io/tags/httpclient/"/>
    
      <category term="tcp" scheme="http://paranoidq.github.io/tags/tcp/"/>
    
      <category term="java" scheme="http://paranoidq.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[转载：大棋局与大智慧 —— 《时寒冰说》豆瓣书评]]></title>
    <link href="http://paranoidq.github.io/2016/08/26/%E6%97%B6%E5%AF%92%E5%86%B0%E8%AF%B4-%E8%B1%86%E7%93%A3%E8%AF%84%E8%AE%BA/"/>
    <id>http://paranoidq.github.io/2016/08/26/时寒冰说-豆瓣评论/</id>
    <published>2016-08-26T05:21:30.000Z</published>
    <updated>2016-08-26T05:28:38.000Z</updated>
    <content type="html"><![CDATA[<p>《时寒冰说：经济大棋局，我们怎么办》是一部窥透世界大棋局的智慧之作，也是一部还原真相，普及常识的启蒙之作，时寒冰在书中淋漓尽致的演绎了他的利益与趋势分析法。</p>
<p>赵汀阳说，思想的主体部分虽然是知识，但思想的奠基部分却是智慧，尽管我们无法保证那些代表智慧的观念是真理。① 全球化时代，智慧的稀缺使得信息爆炸与思想贫乏成为最具讽刺意义的矛盾，而中国的现状尤为突出。时下，主旋律的和谐之音，左派救亡图存的革命论调，右派改革体制的变法主张，由“左右之争”②衍生出的国家主义、民族主义、民粹主义意识形态以及专靠胡说八道混饭吃的砖家叫兽的大放厥词③,可谓“五色令人目盲，五音令人耳聋，五味令人口爽” ④。可见，比通货膨胀更可怕的是信息爆炸和思想贫乏导致的大脑膨胀，我们需要用智慧来稀释膨胀。<br><a id="more"></a></p>
<p>时寒冰说：经济大棋局，我们怎么办》透过政治、经济、金融、军事等纷繁复杂的乱象，紧扣全球范围内货币迅猛膨胀与资源日益减少所造成的“资源为王”和债务危机并存这一条主线，指出经济大棋局的本质就是主要经济体转嫁债务危机的博弈，这既是经济大棋局的结论，也是趋势分析的起点。在此基础上，作者给出了“我们怎么办”的答案。具体而言，对于国家，只有贯彻“资源为王”和“藏富于民”的战略才可化解危机，对于个人，只有“固化财富”才可避免财富的不断缩水。本书中，时寒冰将“良性的制度”纳入“资源为王”的战略之中，这样以来“资源为王”战略包括了保护现有资源，通过技术创新提高资源的附加值，通过优良的制度和环境确保资源最大限度发挥效用三个方面，依次涵盖了资源命脉、技术创新、制度保障三个层面，由此可见，时寒冰的思想体系已初具雏形。虽然该书尚算不上纯正的思想之作，但这种先融天地于一炉⑤，再抽丝剥茧，化繁为简，进而窥透大棋局的才华和境界，非大智慧者不能有。这种大智慧不仅体现在作者对各种知识和多家思想的驾驭上，更体现在作者用绝大多数人都能接受的常识完成了对大棋局的推理和演绎。</p>
<p>在经济大棋局中，货币战争、石油战争、粮食危机，中东危机、朝韩危机、人民币升值、汇率操纵、贸易战只是大棋局中居于不同节点的一个个棋子。美国不仅因为其经济军事势力，更因为深谙“资源为王”之道，因此在整个大棋局中，始终掌握着主动权。虽然，美国是世界上债务危机最严重的国家，但每当危机出现时，要么引爆欧元区某个主权国家的债务危机，要么制造中东危机，操纵国际油价，要么通过压迫人民币升值或汇率战，迫使中国政府送上采购订单，这些屡试不爽的招数，既转移了视线，也转移了危机，更重要的是为寻找新的经济增长点争取了时间，如金融危机后奥巴马政府的新能源战略，既是稀释美元泡沫的“海绵”，也是美国主导下一轮经济周期的货币之锚。相反，西班牙等“笨猪五国”自身经济的脆弱，日本巨额债务的内生性及社会的老龄化，中国的体制弊端和内需不足，都成为悬挂在各自债务危机头顶的达摩克利斯之剑，因此，未来的变数必然发生在这些国家。正因为大智慧窥透了大棋局的本质，因此，时寒冰在解读已经发生的事情时总是得心应手，在预测即将发生的事情时绝不模棱两可，这是智者和学者的区别，前者有卓越的智慧，后者只有渊博的知识。</p>
<p>在对经济大棋局分析论证的逻辑体系中，地缘政治学、意识形态、宗教信仰、国家主义、民族主义、体制改革、“阴谋论”则成为时寒冰演绎利益分析法的一个个“棋子”。近年来“阴谋论”甚嚣尘上，何新⑥、刘军洛⑦、郎咸平⑧等人从不同角度阐述华尔街和美国政府合谋控制全世界特别控制中国的阴谋，而布热津斯基早在10多年前就提出建立美国在世界范围内战略大棋局的构想⑨。但如果回归常识，战略和阴谋不过是一枚硬币的两面。大棋局中，掌握主动权者，棋局只是自己的战略，而被动承受者，棋局则是别人的阴谋。但无论阴谋还是战略，我们所能做的只有反省自身的不足并加以修正，唯有此才可能绝处逢生，这也是时寒冰贯穿全书的基本格调，正是这种超越利益，尊重常识的智者情怀，才有本书中对各种思想批判吸收后让其成为利益分析的一道道工具，也才有用常识还原真相的启蒙意义。比如，作者对“破窗理论”的批判，对美国在对外扩张中兼顾意识形态和国家利益的分析，对民主体制有利于促进财富创造的论断，都是超越意识形态和利益羁绊的常识启蒙。</p>
<p>智者总是独孤悲壮的，当抽丝剥茧后发现中国的经济问题并不在经济本身，而在经济之外，这对一个智者而言，是一种既尴尬又无奈的结果，或许只有在字里行间对民主制度不吝赞美，对领导人政治智慧满怀期望，对人应常怀爱心、公心大声呼唤。权力至上，蔑视常识与规则，缺乏信仰，投机盛行，这是中国国家性、国民性的基本“土壤”，我非常赞同乔良将军关于土壤的改造重于制度移植的观点⑩，但对制度的批判，对常识的启蒙本身就是对土壤的改造，所以，当时寒冰用他的智慧窥透经济大棋局，并告诉我们应该怎么办的时候，作为一名先知，他的使命就已经完成了，剩下的就是接受启蒙的每个人的行动。正如作者书中所言：“良性机制是大棋局中至关重要的保障。如果我们的制度也完善起来，中国将不惧怕任何挑战和博弈，而这，需要每个个体的努力。每个人都不应该简单的做一个等待者，而应该是一个推动者、行动者。”</p>
<h3 id="u6CE8_u91CA_uFF1A"><a href="#u6CE8_u91CA_uFF1A" class="headerlink" title="注释："></a>注释：</h3><p>①赵汀阳：《每个人的政治》，社会科学文献出版社。</p>
<p>②张宏良在《当前中国左派和右派的斗争》、《中华民族再次到了最危险的时候》等文章中，提出新“左派”、“右派”概念，并打出毛泽东思想的旗帜，反对资本主义和平演变的“颜色革命”。本文除有说明外，所引“左”“右”，仅是从革命与改良路径选择上的“左”“右”区分。</p>
<p>③“砖家叫兽”本是一个错别“词”，但用拼音输入后，第一个选项竟然就是“砖家叫兽”，不得不发出“时势造错字”的感叹。思考我们身边的现象，一条道路，今天建，明天拆，这竟然是砖家叫兽的“破冰理论”，岂不知这是在用消灭今天的财富来恢复本来就存在的财富。</p>
<p>④老子，《道德经·德经第十二章》。本文寓指今天中国思想界的混乱，这种混乱因本身的极端功利化，尚不等于思想的多元化。“五色”指种种丑恶离奇的乱像，“五音”指狭隘的民族主义、民粹主义、国家主义；被政治化的“左”“右”之争，以及被妖魔化的“阴谋论”等；“五味”指因为价值观与信仰迷失，人们行为的普遍功利化。</p>
<p>⑤《时寒冰说：经济大棋局，我们怎么办》一书中，政治、经济、金融、军事、历史、宗教等无所不包，地缘政治、阴谋论等或经典或流行的思想流派均有涉及。因此，本书被普遍认为是一本“小百科全书”。</p>
<p>⑥何新在《统治世界：神秘共济会揭秘》中分析指出，世界上存在一个集金融、政治和意识形态于一身，隐秘遥控着重大国际事件，并企图通过生物战争等方式消灭世界上“垃圾人口”的共济会。</p>
<p>⑦刘军洛在《被绑架的中国经济》、《高等文化的控制》等书中分析指出，美国对外经济扩展是由跨国公司、军火商、农场主、华尔街、美国政府组成的多维一体的立体作战模式，而最重要的手段就是培植利益代言人，让这些代言人给国民“洗脑”，从而达到通过文化控制实现战略利益的目标。</p>
<p>⑧郎咸平在《新帝国主义在中国》等书中分析指出，华尔街和国家机器默契配合，开始侵吞中国民族工业和优质企业。</p>
<p>⑨美国当代著名的战略思想家，美国总统前国家安全事务助理布热津斯基博士在20世纪90年代所著的《大棋局:美国的首要地位及其地缘战略》将欧亚大陆视为美国全球战略构想的关键区域。</p>
<p>⑩乔良在《时寒冰说：经济大棋局，我们怎么办》序言《悲壮的先知》结尾指出，国家性、国民性是构成制度和体制的土壤，不改变土壤结构去移植体制或制度，是本末倒置。</p>
<h3 id="u539F_u6587_u94FE_u63A5_uFF1A"><a href="#u539F_u6587_u94FE_u63A5_uFF1A" class="headerlink" title="原文链接："></a>原文链接：</h3><p><a href="https://book.douban.com/review/4980808/" target="_blank" rel="external">https://book.douban.com/review/4980808/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>《时寒冰说：经济大棋局，我们怎么办》是一部窥透世界大棋局的智慧之作，也是一部还原真相，普及常识的启蒙之作，时寒冰在书中淋漓尽致的演绎了他的利益与趋势分析法。</p>
<p>赵汀阳说，思想的主体部分虽然是知识，但思想的奠基部分却是智慧，尽管我们无法保证那些代表智慧的观念是真理。① 全球化时代，智慧的稀缺使得信息爆炸与思想贫乏成为最具讽刺意义的矛盾，而中国的现状尤为突出。时下，主旋律的和谐之音，左派救亡图存的革命论调，右派改革体制的变法主张，由“左右之争”②衍生出的国家主义、民族主义、民粹主义意识形态以及专靠胡说八道混饭吃的砖家叫兽的大放厥词③,可谓“五色令人目盲，五音令人耳聋，五味令人口爽” ④。可见，比通货膨胀更可怕的是信息爆炸和思想贫乏导致的大脑膨胀，我们需要用智慧来稀释膨胀。<br>]]>
    
    </summary>
    
      <category term="社会" scheme="http://paranoidq.github.io/tags/%E7%A4%BE%E4%BC%9A/"/>
    
      <category term="思考" scheme="http://paranoidq.github.io/tags/%E6%80%9D%E8%80%83/"/>
    
      <category term="趋势" scheme="http://paranoidq.github.io/tags/%E8%B6%8B%E5%8A%BF/"/>
    
      <category term="阅读" scheme="http://paranoidq.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何优雅的在多线程环境中log]]></title>
    <link href="http://paranoidq.github.io/2016/08/25/graceful-logging-in-concurrent-context/"/>
    <id>http://paranoidq.github.io/2016/08/25/graceful-logging-in-concurrent-context/</id>
    <published>2016-08-25T08:16:39.000Z</published>
    <updated>2016-08-26T05:24:51.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u95EE_u9898_u63CF_u8FF0"><a href="#u95EE_u9898_u63CF_u8FF0" class="headerlink" title="问题描述"></a>问题描述</h3><h3 id="u65B9_u6848_u8BBE_u8BA1"><a href="#u65B9_u6848_u8BBE_u8BA1" class="headerlink" title="方案设计"></a>方案设计</h3><h3 id="u7F3A_u9677_u548C_u74F6_u9888"><a href="#u7F3A_u9677_u548C_u74F6_u9888" class="headerlink" title="缺陷和瓶颈"></a>缺陷和瓶颈</h3><h3 id="u4E3A_u4EC0_u4E48_u4E0D_u4F7F_u7528ELK"><a href="#u4E3A_u4EC0_u4E48_u4E0D_u4F7F_u7528ELK" class="headerlink" title="为什么不使用ELK"></a>为什么不使用ELK</h3><h3 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h3>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u95EE_u9898_u63CF_u8FF0"><a href="#u95EE_u9898_u63CF_u8FF0" class="headerlink" title="问题描述"></a>问题描述</h3><h3 id="u65B9_u6848_u8BBE_u]]>
    </summary>
    
      <category term="java" scheme="http://paranoidq.github.io/tags/java/"/>
    
      <category term="log" scheme="http://paranoidq.github.io/tags/log/"/>
    
      <category term="系统设计" scheme="http://paranoidq.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="java" scheme="http://paranoidq.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux服务器性能调优常用工具及实例]]></title>
    <link href="http://paranoidq.github.io/2016/08/02/linux-server-optimization-tools/"/>
    <id>http://paranoidq.github.io/2016/08/02/linux-server-optimization-tools/</id>
    <published>2016-08-01T16:37:17.000Z</published>
    <updated>2016-08-01T17:00:58.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u67E5_u770B_u8FDB_u7A0B_u60C5_u51B5_3A_ps"><a href="#u67E5_u770B_u8FDB_u7A0B_u60C5_u51B5_3A_ps" class="headerlink" title="查看进程情况: ps"></a>查看进程情况: ps</h3><h4 id="u663E_u793A_u6240_u6709_u8FDB_u7A0B_u4FE1_u606F"><a href="#u663E_u793A_u6240_u6709_u8FDB_u7A0B_u4FE1_u606F" class="headerlink" title="显示所有进程信息"></a>显示所有进程信息</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ps -A</span><br><span class="line">PID TTY      TIME   CMD</span><br><span class="line"><span class="number">1</span> ?        00:<span class="number">00</span>:<span class="number">00</span> init</span><br><span class="line"><span class="number">2</span> ?        00:<span class="number">00</span>:<span class="number">01</span> migration/<span class="number">0</span></span><br><span class="line"><span class="number">3</span> ?        00:<span class="number">00</span>:<span class="number">00</span> ksoftirqd/<span class="number">0</span></span><br><span class="line"><span class="number">4</span> ?        00:<span class="number">00</span>:<span class="number">01</span> migration/<span class="number">1</span></span><br><span class="line"><span class="number">5</span> ?        00:<span class="number">00</span>:<span class="number">00</span> ksoftirqd/<span class="number">1</span></span><br><span class="line"><span class="number">6</span> ?        00:<span class="number">29</span>:<span class="number">57</span> events/<span class="number">0</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="u663E_u793A_u6307_u5B9A_u7528_u6237"><a href="#u663E_u793A_u6307_u5B9A_u7528_u6237" class="headerlink" title="显示指定用户"></a>显示指定用户</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ps -u root</span><br><span class="line">PID TTY      TIME   CMD</span><br><span class="line"><span class="number">1</span> ?        00:<span class="number">00</span>:<span class="number">00</span> init</span><br><span class="line"><span class="number">2</span> ?        00:<span class="number">00</span>:<span class="number">01</span> migration/<span class="number">0</span></span><br><span class="line"><span class="number">3</span> ?        00:<span class="number">00</span>:<span class="number">00</span> ksoftirqd/<span class="number">0</span></span><br><span class="line"><span class="number">4</span> ?        00:<span class="number">00</span>:<span class="number">01</span> migration/<span class="number">1</span></span><br><span class="line"><span class="number">5</span> ?        00:<span class="number">00</span>:<span class="number">00</span> ksoftirqd/<span class="number">1</span></span><br><span class="line"><span class="number">6</span> ?        00:<span class="number">29</span>:<span class="number">57</span> events/<span class="number">0</span></span><br><span class="line"><span class="number">7</span> ?        00:<span class="number">00</span>:<span class="number">00</span> events/<span class="number">1</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h4 id="ps__u4E0Egrep__u7EC4_u5408_u4F7F_u7528_uFF0C_u67E5_u627E_u7279_u5B9A_u8FDB_u7A0B__28_u5E38_u7528_29"><a href="#ps__u4E0Egrep__u7EC4_u5408_u4F7F_u7528_uFF0C_u67E5_u627E_u7279_u5B9A_u8FDB_u7A0B__28_u5E38_u7528_29" class="headerlink" title="ps 与grep 组合使用，查找特定进程 (常用)"></a>ps 与grep 组合使用，查找特定进程 (常用)</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef|grep ssh</span><br><span class="line">root      <span class="number">2720</span>     <span class="number">1</span>  <span class="number">0</span> Nov02 ?        00:<span class="number">00</span>:<span class="number">00</span> <span class="regexp">/usr/</span>sbin/sshd</span><br><span class="line">root     <span class="number">17394</span>  <span class="number">2720</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">58</span> ?        00:<span class="number">00</span>:<span class="number">00</span> <span class="string">sshd:</span> root<span class="meta">@pts</span>/<span class="number">0</span></span><br><span class="line">root     <span class="number">17465</span> <span class="number">17398</span>  <span class="number">0</span> <span class="number">15</span>:<span class="number">57</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep ssh</span><br></pre></td></tr></table></figure>
<h4 id="u5217_u51FA_u76EE_u524D_u6240_u6709_u7684_u6B63_u5728_u5185_u5B58_u4E2D_u7684_u7A0B_u5E8F__28_u5E38_u7528_uFF09"><a href="#u5217_u51FA_u76EE_u524D_u6240_u6709_u7684_u6B63_u5728_u5185_u5B58_u4E2D_u7684_u7A0B_u5E8F__28_u5E38_u7528_uFF09" class="headerlink" title="列出目前所有的正在内存中的程序 (常用）"></a>列出目前所有的正在内存中的程序 (常用）</h4><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ps aux</span><br><span class="line"><span class="symbol">USER</span>       <span class="symbol">PID</span> <span class="comment">%CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span></span><br><span class="line">root         <span class="number">1</span>  <span class="number">0.0</span>  <span class="number">0.0</span>  <span class="number">10368</span>   <span class="number">676</span> ?        <span class="symbol">Ss</span>   <span class="symbol">Nov02</span>   <span class="number">0</span>:<span class="number">00</span> init [<span class="number">3</span>]</span><br><span class="line">root         <span class="number">2</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        <span class="symbol">S</span>&lt;   <span class="symbol">Nov02</span>   <span class="number">0</span>:<span class="number">01</span> [migration/<span class="number">0</span>]</span><br><span class="line">root         <span class="number">3</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        <span class="symbol">SN</span>   <span class="symbol">Nov02</span>   <span class="number">0</span>:<span class="number">00</span> [ksoftirqd/<span class="number">0</span>]</span><br><span class="line">root         <span class="number">4</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        <span class="symbol">S</span>&lt;   <span class="symbol">Nov02</span>   <span class="number">0</span>:<span class="number">01</span> [migration/<span class="number">1</span>]</span><br><span class="line">root         <span class="number">5</span>  <span class="number">0.0</span>  <span class="number">0.0</span>      <span class="number">0</span>     <span class="number">0</span> ?        <span class="symbol">SN</span>   <span class="symbol">Nov02</span>   <span class="number">0</span>:<span class="number">00</span> [ksoftirqd/<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>输出含义：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">USER：该 <span class="keyword">process</span> 属于那个使用者账号的</span><br><span class="line">PID ：该 <span class="keyword">process</span> 的号码</span><br><span class="line">%CPU：该 <span class="keyword">process</span> 使用掉的 CPU 资源百分比</span><br><span class="line">%MEM：该 <span class="keyword">process</span> 所占用的物理内存百分比</span><br><span class="line">VSZ ：该 <span class="keyword">process</span> 使用掉的虚拟内存量 (Kbytes)</span><br><span class="line">RSS ：该 <span class="keyword">process</span> 占用的固定的内存量 (Kbytes)</span><br><span class="line">TTY ：该 <span class="keyword">process</span> 是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts/<span class="number">0</span> 等等的，则表示为由网络连接进主机的程序。</span><br><span class="line">STAT：该程序目前的状态，主要的状态有</span><br><span class="line">R ：该程序目前正在运作，或者是可被运作</span><br><span class="line">S ：该程序目前正在睡眠当中 (可说是 idle 状态)，但可被某些讯号 (<span class="keyword">signal</span>) 唤醒。</span><br><span class="line">T ：该程序目前正在侦测或者是停止了</span><br><span class="line">Z ：该程序应该已经终止，但是其父程序却无法正常的终止他，造成 zombie (疆尸) 程序的状态</span><br><span class="line">START：该 <span class="keyword">process</span> 被触发启动的时间</span><br><span class="line"><span class="built_in">TIME</span> ：该 <span class="keyword">process</span> 实际使用 CPU 运作的时间</span><br><span class="line">COMMAND：该程序的实际指令</span><br></pre></td></tr></table></figure></p>
<h4 id="ps_-ef_u4E0E_ps_aux_u7684_u533A_u522B"><a href="#ps_-ef_u4E0E_ps_aux_u7684_u533A_u522B" class="headerlink" title="ps -ef与 ps aux的区别"></a>ps -ef与 ps aux的区别</h4><p><code>ps aux</code>最初用到Unix Style中，而<code>ps -ef</code>被用在System V Style中，两者输出略有不同。现在的大部分Linux系统都是可以同时使用这两种方式的。</p>
<p><code>ps aux</code>中与<code>ps -ef</code>不同的列有：<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USER      <span class="comment">//用户名</span></span><br><span class="line"><span class="built_in">%CPU</span>      <span class="comment">//进程占用的CPU百分比</span></span><br><span class="line"><span class="built_in">%MEM</span>      <span class="comment">//占用内存的百分比</span></span><br><span class="line">VSZ       <span class="comment">//该进程使用的虚拟內存量（KB）</span></span><br><span class="line">RSS       <span class="comment">//该进程占用的固定內存量（KB）（驻留中页的数量）</span></span><br><span class="line">STAT      <span class="comment">//进程的状态</span></span><br><span class="line">START     <span class="comment">//该进程被触发启动时间</span></span><br><span class="line">TIME      <span class="comment">//该进程实际使用CPU运行的时间</span></span><br></pre></td></tr></table></figure></p>
<p>其中<code>STAT</code>状态为的常见字符有：<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">D</span>      <span class="comment">//无法中断的休眠状态（通常 IO 的进程）；</span></span><br><span class="line"><span class="keyword">R</span>      <span class="comment">//正在运行可中在队列中可过行的；</span></span><br><span class="line"><span class="keyword">S</span>      <span class="comment">//处于休眠状态；</span></span><br><span class="line">T      <span class="comment">//停止或被追踪；</span></span><br><span class="line"><span class="keyword">W</span>      <span class="comment">//进入内存交换 （从内核2.6开始无效）；</span></span><br><span class="line"><span class="keyword">X</span>      <span class="comment">//死掉的进程 （基本很少见）；</span></span><br><span class="line">Z      <span class="comment">//僵尸进程；</span></span><br><span class="line">&lt;      <span class="comment">//优先级高的进程</span></span><br><span class="line">N      <span class="comment">//优先级较低的进程</span></span><br><span class="line"><span class="keyword">L</span>      <span class="comment">//有些页被锁进内存；</span></span><br><span class="line"><span class="keyword">s</span>      <span class="comment">//进程的领导者（在它之下有子进程）；</span></span><br><span class="line"><span class="keyword">l</span>      <span class="comment">//多线程，克隆线程（使用 CLONE_THREAD, 类似 NPTL pthreads）；</span></span><br><span class="line">+      <span class="comment">//位于后台的进程组；</span></span><br></pre></td></tr></table></figure></p>
<h3 id="u67E5_u770B_u7AEF_u53E3_u60C5_u51B5_netstat"><a href="#u67E5_u770B_u7AEF_u53E3_u60C5_u51B5_netstat" class="headerlink" title="查看端口情况 netstat"></a>查看端口情况 netstat</h3><h4 id="u5217_u51FA_u6240_u6709_u8FDE_u63A5"><a href="#u5217_u51FA_u6240_u6709_u8FDE_u63A5" class="headerlink" title="列出所有连接"></a>列出所有连接</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>netstat -a</span><br><span class="line">Active Internet connections (servers <span class="keyword">and</span> established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State      </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="symbol">enlightened:</span>domain      *<span class="symbol">:*</span>                     LISTEN     </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="symbol">localhost:</span>ipp           *<span class="symbol">:*</span>                     LISTEN     </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> enlightened.<span class="symbol">local:</span><span class="number">54750</span> li24<span class="number">0</span>-<span class="number">5</span>.members.<span class="symbol">li:</span>http ESTABLISHED</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> enlightened.<span class="symbol">local:</span><span class="number">49980</span> del01s07-<span class="keyword">in</span>-f14.<span class="number">1</span><span class="symbol">:https</span> ESTABLISHED</span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> ip6-<span class="symbol">localhost:</span>ipp       [<span class="symbol">:</span><span class="symbol">:</span>]<span class="symbol">:*</span>                  LISTEN </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h4 id="u5217_u51FAtcp/udp_u8FDE_u63A5_-u_u548C-t"><a href="#u5217_u51FAtcp/udp_u8FDE_u63A5_-u_u548C-t" class="headerlink" title="列出tcp/udp连接 <code>-u</code>和<code>-t</code>"></a>列出tcp/udp连接 <code>-u</code>和<code>-t</code></h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>netstat -at</span><br><span class="line"><span class="variable">$ </span>netstat -au</span><br></pre></td></tr></table></figure>
<h4 id="u7981_u7528_u53CD_u5411_u57DF_u540D_u89E3_u6790_uFF0C_u52A0_u5FEB_u67E5_u8BE2_u901F_u5EA6_-n"><a href="#u7981_u7528_u53CD_u5411_u57DF_u540D_u89E3_u6790_uFF0C_u52A0_u5FEB_u67E5_u8BE2_u901F_u5EA6_-n" class="headerlink" title="禁用反向域名解析，加快查询速度 <code>-n</code>"></a>禁用反向域名解析，加快查询速度 <code>-n</code></h4><p>没有必要知道主机名，就使用 -n 选项禁用域名解析功能<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>netstat -ant</span><br></pre></td></tr></table></figure></p>
<h4 id="u53EA_u5217_u51FA_u76D1_u542C_u4E2D_u7684_u7AEF_u53E3_-l"><a href="#u53EA_u5217_u51FA_u76D1_u542C_u4E2D_u7684_u7AEF_u53E3_-l" class="headerlink" title="只列出监听中的端口 <code>-l</code>"></a>只列出监听中的端口 <code>-l</code></h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -tnl</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State      </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">127.0</span><span class="meta">.1</span><span class="meta">.1</span>:<span class="number">53</span>            <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:*               LISTEN     </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">631</span>           <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:*               LISTEN     </span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> ::<span class="number">1</span>:<span class="number">631</span>                 :::*                    LISTEN</span><br></pre></td></tr></table></figure>
<p>不要使用<code>-a</code>，否则linux会列出所有端口，而不只是监听（LISTEN）端口</p>
<h4 id="u53EA_u5217_u51FAactive_u7AEF_u53E3"><a href="#u53EA_u5217_u51FAactive_u7AEF_u53E3" class="headerlink" title="只列出active端口"></a>只列出active端口</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -atnp | grep ESTA</span><br><span class="line">(<span class="keyword">Not</span> all processes could be identified, non-owned process info</span><br><span class="line"> will <span class="keyword">not</span> be shown, you would have to be root to see it all.)</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.2</span>:<span class="number">49156</span>       <span class="number">173.255</span><span class="meta">.230</span><span class="meta">.5</span>:<span class="number">80</span>        ESTABLISHED <span class="number">1691</span>/chrome     </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.2</span>:<span class="number">33324</span>       <span class="number">173.194</span><span class="meta">.36</span><span class="meta">.117</span>:<span class="number">443</span>      ESTABLISHED <span class="number">1691</span>/chrome</span><br></pre></td></tr></table></figure>
<p>active 状态的套接字连接用 “ESTABLISHED” 字段表示</p>
<h4 id="u5217_u51FA_u8FDB_u7A0B_u540D_uFF0C_u8FDB_u7A0B_u53F7_u548C_u7528_u6237ID_-p"><a href="#u5217_u51FA_u8FDB_u7A0B_u540D_uFF0C_u8FDB_u7A0B_u53F7_u548C_u7528_u6237ID_-p" class="headerlink" title="列出进程名，进程号和用户ID <code>-p</code>"></a>列出进程名，进程号和用户ID <code>-p</code></h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~$ sudo netstat -nlpt</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">127.0</span><span class="meta">.1</span><span class="meta">.1</span>:<span class="number">53</span>            <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:*               LISTEN      <span class="number">1144</span>/dnsmasq    </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">631</span>           <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:*               LISTEN      <span class="number">661</span>/cupsd       </span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> ::<span class="number">1</span>:<span class="number">631</span>                 :::*                    LISTEN      <span class="number">661</span>/cupsd</span><br></pre></td></tr></table></figure>
<p>必须要root权限才能显示！如果没有root需要查看端口对应的进程，请参考<code>lsof</code><br><code>-ep</code>选项可以同时查看进程名和用户名</p>
<h4 id="u5B9E_u6218"><a href="#u5B9E_u6218" class="headerlink" title="实战"></a>实战</h4><ol>
<li>查看服务是否运行<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo netstat -aple | grep ntp</span><br><span class="line">udp        <span class="number">0</span>      <span class="number">0</span> enlightened.<span class="symbol">local:</span>ntp   *<span class="symbol">:*</span>     root       <span class="number">17430</span>       <span class="number">1789</span>/ntpd       </span><br><span class="line">udp        <span class="number">0</span>      <span class="number">0</span> <span class="symbol">localhost:</span>ntp           *<span class="symbol">:*</span>     root       <span class="number">17429</span>       <span class="number">1789</span>/ntpd       </span><br><span class="line">udp        <span class="number">0</span>      <span class="number">0</span> *<span class="symbol">:ntp</span>                   *<span class="symbol">:*</span>     root       <span class="number">17422</span>       <span class="number">1789</span>/ntpd       </span><br><span class="line">udp6       <span class="number">0</span>      <span class="number">0</span> <span class="symbol">fe80:</span><span class="symbol">:</span><span class="number">216</span><span class="symbol">:</span><span class="number">36</span><span class="symbol">ff:</span><span class="symbol">fef8:</span>ntp [<span class="symbol">:</span><span class="symbol">:</span>]    root       <span class="number">17432</span>       <span class="number">1789</span>/ntpd</span><br></pre></td></tr></table></figure>
</li>
</ol>
<!--more-->
<ol>
<li><p>查看端口号的占用情况</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -an <span class="string">| grep 12000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>结合<code>watch</code>监控active状态的连接</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ watch <span class="_">-d</span> -n0 <span class="string">"netstat -atnp | grep ESTA"</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="u9644_uFF1Awatch_u547D_u4EE4"><a href="#u9644_uFF1Awatch_u547D_u4EE4" class="headerlink" title="附：watch命令"></a>附：watch命令</h4><p>watch可以帮助使用者监测一个命令的运行结果，避免重复手动运行。watch命令会周期执行<br>参数：</p>
<ul>
<li>-n 时间间隔，缺省值为2s</li>
<li>-d 高亮显示变化区域</li>
<li>-t 关闭watch命令在顶部的时间间隔</li>
</ul>
<p>实例：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">每隔一秒高亮显示http链接数的变化情况</span><br><span class="line"><span class="variable">$ </span>watch -n <span class="number">1</span> -d <span class="string">'pstree|grep http'</span></span><br><span class="line"></span><br><span class="line"><span class="number">10</span>秒一次输出系统的平均负载</span><br><span class="line"><span class="variable">$ </span>watch -n <span class="number">10</span> <span class="string">'cat /proc/loadavg'</span></span><br></pre></td></tr></table></figure></p>
<h3 id="u67E5_u770B_u4F7F_u7528CPU_5CMEM_u6700_u591A_u7684_u8FDB_u7A0B"><a href="#u67E5_u770B_u4F7F_u7528CPU_5CMEM_u6700_u591A_u7684_u8FDB_u7A0B" class="headerlink" title="查看使用CPU\MEM最多的进程"></a>查看使用CPU\MEM最多的进程</h3><h3 id="u53C2_u8003_u6587_u732E"><a href="#u53C2_u8003_u6587_u732E" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/ps.html" target="_blank" rel="external">ps</a><br><a href="https://linux.cn/article-2434-1.html" target="_blank" rel="external">netstat</a><br><a href="http://www.cnblogs.com/peida/archive/2012/12/31/2840241.html" target="_blank" rel="external">watch</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u67E5_u770B_u8FDB_u7A0B_u60C5_u51B5_3A_ps"><a href="#u67E5_u770B_u8FDB_u7A0B_u60C5_u51B5_3A_ps" class="headerlink" title="查看进程情况: ps"></a>查看进程情况: ps</h3><h4 id="u663E_u793A_u6240_u6709_u8FDB_u7A0B_u4FE1_u606F"><a href="#u663E_u793A_u6240_u6709_u8FDB_u7A0B_u4FE1_u606F" class="headerlink" title="显示所有进程信息"></a>显示所有进程信息</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ps -A</span><br><span class="line">PID TTY      TIME   CMD</span><br><span class="line"><span class="number">1</span> ?        00:<span class="number">00</span>:<span class="number">00</span> init</span><br><span class="line"><span class="number">2</span> ?        00:<span class="number">00</span>:<span class="number">01</span> migration/<span class="number">0</span></span><br><span class="line"><span class="number">3</span> ?        00:<span class="number">00</span>:<span class="number">00</span> ksoftirqd/<span class="number">0</span></span><br><span class="line"><span class="number">4</span> ?        00:<span class="number">00</span>:<span class="number">01</span> migration/<span class="number">1</span></span><br><span class="line"><span class="number">5</span> ?        00:<span class="number">00</span>:<span class="number">00</span> ksoftirqd/<span class="number">1</span></span><br><span class="line"><span class="number">6</span> ?        00:<span class="number">29</span>:<span class="number">57</span> events/<span class="number">0</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="linux" scheme="http://paranoidq.github.io/tags/linux/"/>
    
      <category term="server" scheme="http://paranoidq.github.io/tags/server/"/>
    
      <category term="linux" scheme="http://paranoidq.github.io/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BASE64换行符的坑]]></title>
    <link href="http://paranoidq.github.io/2016/08/01/base64-newline-trap/"/>
    <id>http://paranoidq.github.io/2016/08/01/base64-newline-trap/</id>
    <published>2016-08-01T13:29:38.000Z</published>
    <updated>2016-10-11T12:15:05.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u95EE_u9898_u63CF_u8FF0"><a href="#u95EE_u9898_u63CF_u8FF0" class="headerlink" title="问题描述"></a>问题描述</h3><p>client发报文给server，server端接收到http post发来的报文之后做base64解码，然后通过消息中间件传给核心系统进行处理。然后发现，client端发过来的报文会多出很多<code>/r/n</code>这样的字符，导致核心系统base64解码后也多出了<code>/r/n</code>，而核心系统之前没有考虑到这些问题，从而报错。</p>
<a id="more"></a>
<h3 id="u95EE_u9898_u7684_u5206_u6790"><a href="#u95EE_u9898_u7684_u5206_u6790" class="headerlink" title="问题的分析"></a>问题的分析</h3><p>问题在于为什么发送方的报文会多出来<code>/r/n</code>呢？</p>
<h4 id="Step_1"><a href="#Step_1" class="headerlink" title="Step 1"></a>Step 1</h4><p>首先看回车和换行符的区别：</p>
<blockquote>
<p>在计算机还没有出现之前，有一种叫做电传打字机（Teletype Model 33）的玩意，每秒钟可以打10个字符。但是它有一个问题，就是打完一行换行的时候，要用去0.2秒，正好可以打两个字符。要是在这0.2秒里面，又有新的字符传过来，那么这个字符将丢失。<br>     于是，研制人员想了个办法解决这个问题，就是在每行后面加两个表示结束的字符。一个叫做“回车”，告诉打字机把打印头定位在左边界；另一个叫做“换行”，告诉打字机把纸向下移一行。<br>这就是“换行”和“回车”的来历，从它们的英语名字上也可以看出一二。<br>      后来，计算机发明了，这两个概念也就被般到了计算机上。那时，存储器很贵，一些科学家认为在每行结尾加两个字符太浪费了，加一个就可以。于是，就出现了分歧。<br>Unix 系统里，每行结尾只有“&lt;换行&gt;”，即“\n”；Windows系统里面，每行结尾是“ &lt;回车&gt;&lt;换 行&gt;”，即“\r\n”；Mac系统里，每行结尾是“&lt;回车&gt;”。一个直接后果是，Unix/Mac系统下的文件在Windows里打 开的话，所有文字会变成一行；而Windows里的文件在Unix/Mac下打开的话，在每行的结尾可能会多出一个^M符号。</p>
</blockquote>
<p>所以导致的问题应该就是client端是windows系统，而我们这边处理的系统在linux下，因此就会有<code>/r/n</code>的问题。</p>
<h4 id="Step_2"><a href="#Step_2" class="headerlink" title="Step 2"></a>Step 2</h4><p>OK，让对方去掉报文中的换行之后，问题还是存在。而且还有新的发现：</p>
<blockquote>
<p>BASE64之后，当字符串过长（一般超过76）时会自动在中间加一个换行符。及时我们自己测试的报文完全没有任何换行存在。</p>
</blockquote>
<p>于是想办法去研究<code>sun.misc.BASE64Encoder</code>的源码，有了一些发现。</p>
<p>BASE64主要调用的方法是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] bytes = <span class="string">"abcd"</span>.getBytes();</span><br><span class="line">BASE64Encoder encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">encoder.encodeBuffer(bytes);</span><br></pre></td></tr></table></figure></p>
<p>encodeBuffer源码的大致情况：(大部分源码位于<code>BASE64Encoder</code>的父类<code>CharacterEncoder</code>中)<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> encodeBuffer(<span class="built_in">byte</span> aBuffer[]) &#123;</span><br><span class="line">    ByteArrayOutputStream   outStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    ByteArrayInputStream    inStream = <span class="keyword">new</span> ByteArrayInputStream(aBuffer);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        encodeBuffer(inStream, outStream);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception IOException) &#123;</span><br><span class="line">        <span class="comment">// This should never happen.</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"CharacterEncoder.encodeBuffer internal error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (outStream.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Encode bytes from the input stream, and write them as text characters</span><br><span class="line"> * to the output stream. This method will run until it exhausts the</span><br><span class="line"> * input stream, but does not print the line suffix for a final</span><br><span class="line"> * line that is shorter than bytesPerLine().</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> encode(InputStream inStream, OutputStream outStream)</span><br><span class="line">    <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="built_in">int</span>     j;</span><br><span class="line">    <span class="built_in">int</span>     numBytes;</span><br><span class="line">    <span class="built_in">byte</span>    tmpbuffer[] = <span class="keyword">new</span> <span class="built_in">byte</span>[bytesPerLine()];</span><br><span class="line"></span><br><span class="line">    encodeBufferPrefix(outStream); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        numBytes = readFully(inStream, tmpbuffer);</span><br><span class="line">        <span class="keyword">if</span> (numBytes == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        encodeLinePrefix(outStream, numBytes); </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; numBytes; j += bytesPerAtom()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((j + bytesPerAtom()) &lt;= numBytes) &#123;</span><br><span class="line">                encodeAtom(outStream, tmpbuffer, j, bytesPerAtom());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                encodeAtom(outStream, tmpbuffer, j, (numBytes)- j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (numBytes &lt; bytesPerLine()) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            encodeLineSuffix(outStream); <span class="comment">// 这一行会输出换行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    encodeBufferSuffix(outStream); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Encode the suffix that ends every output line. By default</span><br><span class="line"> * this method just prints a &lt;newline&gt; into the output stream.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> encodeLineSuffix(OutputStream aStream) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    pStream.<span class="built_in">println</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意，<code>encodeLineSuffix</code>会输出换行。也就是每次读满一个buffer大小的时候，都会输出一个换行。buffer的大小是由<code>bytesPerLine()</code>函数决定的，该函数是一个抽象函数，由子类实现。而在BASE64Encoder中，该函数的返回值为57.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * this class encodes 57 bytes per line. This results in a maximum</span><br><span class="line"> * of 57/3 * 4 or 76 characters per output line. Not counting the</span><br><span class="line"> * line termination.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">bytesPerLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">57</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="http://stackoverflow.com/questions/9341047/carriage-return-issue-decoding-base64-from-java-and-sending-to-browser" target="_blank" rel="external">StackOverflow上有回答</a>这是做了一种<code>chunking</code>，在每一个<code>chunk</code>后面添加了<code>/n</code>。并且sun的库函数只存在于oracle的jvm下面，而不存在于其他jvm中。</p>
<h3 id="Step_3"><a href="#Step_3" class="headerlink" title="Step 3"></a>Step 3</h3><p><code>encode</code>与<code>encodeBuffer</code>有细微的区别：<code>encodeBuffer</code>会在最后一行不足<code>bytesPerline()</code>时添加一个换行符，而encode则不会做处理。</p>
<p>貌似很坑爹，做了如此多的隐含处理，让调用者想死的心都有了。</p>
<h3 id="u4E00_u52B3_u6C38_u9038_u7684_u529E_u6CD5"><a href="#u4E00_u52B3_u6C38_u9038_u7684_u529E_u6CD5" class="headerlink" title="一劳永逸的办法"></a>一劳永逸的办法</h3><p>建议使用<code>org.apache.commons.codec.binary.Base64</code>库：<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Base<span class="number">64.</span>e<span class="symbol">ncodeBase64</span><span class="comment">(..)</span>;</span><br><span class="line">Base<span class="number">64.</span>decodeBase<span class="number">64</span><span class="comment">(..)</span></span><br></pre></td></tr></table></figure></p>
<p>并且该库显示指明了，你是否需要<code>chunk</code>选项和<code>urlsafe</code>选项（避免输出<code>+</code>和<code>/</code>，而是输出<code>-</code>和<code>_</code>）：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encodeBase64Chunked(<span class="keyword">final</span> <span class="keyword">byte</span>[] binaryData)</span><br><span class="line">encodeBase64(<span class="keyword">final</span> <span class="keyword">byte</span>[] binaryData, <span class="keyword">final</span> <span class="keyword">boolean</span> isChunked)</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u95EE_u9898_u63CF_u8FF0"><a href="#u95EE_u9898_u63CF_u8FF0" class="headerlink" title="问题描述"></a>问题描述</h3><p>client发报文给server，server端接收到http post发来的报文之后做base64解码，然后通过消息中间件传给核心系统进行处理。然后发现，client端发过来的报文会多出很多<code>/r/n</code>这样的字符，导致核心系统base64解码后也多出了<code>/r/n</code>，而核心系统之前没有考虑到这些问题，从而报错。</p>]]>
    
    </summary>
    
      <category term="java" scheme="http://paranoidq.github.io/tags/java/"/>
    
      <category term="todo" scheme="http://paranoidq.github.io/tags/todo/"/>
    
      <category term="base64" scheme="http://paranoidq.github.io/tags/base64/"/>
    
      <category term="java" scheme="http://paranoidq.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[个人已经破产，靠还没倒闭的行业活着（转载）]]></title>
    <link href="http://paranoidq.github.io/2016/07/25/%E4%B8%AA%E4%BA%BA%E5%B7%B2%E7%BB%8F%E7%A0%B4%E4%BA%A7/"/>
    <id>http://paranoidq.github.io/2016/07/25/个人已经破产/</id>
    <published>2016-07-25T13:14:31.000Z</published>
    <updated>2016-07-25T13:24:20.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>本文转载自: <a href="http://mp.weixin.qq.com/s?__biz=MjM5OTM4MDY4MQ==&amp;mid=2650101881&amp;idx=1&amp;sn=19f426423f01f34015685ab146119469&amp;scene=23&amp;srcid=0725foRg46546T20CysgOR9b#rd" target="_blank" rel="external">读库-张立宪</a></p>
</blockquote>
<p>遇到几件职场上的事情，引发一些感触，在这里一并写出来，与大家一起怀疑下人生。</p>
<h3 id="u4E00"><a href="#u4E00" class="headerlink" title="一"></a>一</h3><p>我属于那种乐观型选手，相信在现在这个世道，不管是来自家人扶助、社会救济，或者有基本社会能力的成年人随便找个工作，温饱都不会有问题，至少饿不死。有了这个底气，再去做什么，就看自己的能力、志趣和因缘了。去年在上海，有位杂志编辑，说他们的杂志快不行了。我便与他共勉：只有破产的公司，没有倒闭的个人。</p>
<p>两个月前又见到一位同行，他本是一家颇有名望的杂志社老总，如今再创业，风生水起。我问他用人之道，他说很重要的一条心得是：尽量不用媒体人，尤其是那些老部下。</p>
<p>这种说法让我很是意外。听他一一道来：当年纸媒红火的时候，那些以“名记”身份行走传媒江湖的人，既眼高手低，又好吃懒做，真真徒有虚名，名不副实。整天乐于听人恭维，忙于开发布会拿红包，急于炫耀自己社会关系之广，却连篇软文也写不好。我不由得表示赞同，听他接着说：这样的名记，是被他所在的媒体赋予的名声，并且也被惯坏了，我要真把他招过来，既不好用，也用不起。</p>
<p>这位仁兄的偏见实在是颇有道理：有的人实际上已经个人破产，只是在靠所供职的还没倒闭的机构活着。</p>
<p>冷静想一下，我们是否已经让自己处于这种境地？</p>
<a id="more"></a>
<h3 id="u4E8C"><a href="#u4E8C" class="headerlink" title="二"></a>二</h3><p>想起当年电视台如日中天炙手可热的时候，我领教过的一个台里员工。那位负责灯光的人被称为“灯爷”，对别人永远是颐指气使的口吻，对自己永远觉得含着天大的委屈，找他做最简单的事情都得陪着笑脸，而他做最分内的事情都觉得是别人在给他添麻烦。</p>
<p>更可怕的是，我们都对这样的大爷习以为常。他老人家稍微嘴脸好看点儿，手脚勤快点儿，便觉得是恩赐。</p>
<p>直到后来见识了一位香港“灯爷”：永远不用你操心、催促，在规定的时间内到位，黑着脸不许别人碰他的器材，手脚麻利地快速解决一切事情，工作成效之高、之专业，几乎都让你意识不到他的存在。</p>
<p>再看我们这位爷，遇到潜在的金主，想给自己捞点野活挣点外快，就倨傲又殷勤地给人家递名片：我是中央台的。</p>
<p>那时的我年轻气盛，看到这一幕，鄙夷地想：把你名片上“中央电视台”那几个字划掉，你什么也不是。</p>
<h3 id="u4E09"><a href="#u4E09" class="headerlink" title="三"></a>三</h3><p>这些年，中国房地产行业空前繁荣。建筑师这个职业，应该是机会大大的，挣钱多多的，心里美美的吧。</p>
<p>一位建筑界的老师却对我说，高歌猛进的房地产行业，还有那些地标式的公共建筑，不仅对城市、对环境造成破坏，对公众审美形成摧残，还把一代建筑师给毁了。</p>
<p>我吃惊地问为什么。他的要点是：因为活儿太多，素质不高的设计师也可以有干不完的单子应接不暇；因为钱太好挣，许多建筑师没有了自我提高的主动与自觉；因为工程太赶，缺乏原创、智慧含量和时间成本越少的设计成为首选，行业的水准线便越来越低。</p>
<p>一位做建筑图书的出版业同行，准备引进一套欧洲建筑丛书，全套有二三百本，囊括了当代建筑的各位大师，全面呈现其作品和建筑理念。我想当然地认为这套书会很好卖，因为它本来口碑就好，建筑装饰类图书又永远在书店里占据相当比重，中国的建筑设计行业人多，钱多，需求又大。</p>
<p>她说给我的发行量却低得惊人。这套书只引进了十几种，原来宏伟的出版计划看来会中途夭折。</p>
<p>她的观点也是：大家的学习动力没有了，因为钱太容易挣。一个建筑师不用看这些书，照样有挣不完的钱。</p>
<p>一个行业的繁荣，对个人来说是好事还是坏事？</p>
<h3 id="u56DB"><a href="#u56DB" class="headerlink" title="四"></a>四</h3><p>我们去年签下一套英文书的版权，写人类伟大的历史文化遗迹。因为它和建筑有很大关系，所以我想邀请建筑界的专家——外语又好、又懂建筑的人来翻译。</p>
<p>找到一位人脉广的老师求助，他说，你可能在建筑界找不到人。没人愿意接你的活儿。你看，能够胜任翻译的人，得是具备一定能力和资历的人。一本书的翻译至少要几个月的时间，稿费最多几万块钱，可人家用几个晚上时间画建筑图纸，就能挣几万块。</p>
<p>我说，这不正好吗？用几天时间画图，把几万块钱挣出来，那不就没有后顾之忧，更能踏踏实实、专心致志搞翻译了吗？</p>
<p>你这个逻辑太自作多情了，也把你的书看得太重要了。人家想的是，花几个月时间来翻译你这本书的话，就意味着耽误了画多少图、失去了挣多少钱的机会。并且这种活儿都还排着队等他来接呢，谁还稀罕为你翻译，谁算不明白这笔账呢？</p>
<p>一个人都温饱无忧了，何必还为挣钱，把自己搞得连翻译一本书这么有乐趣的事都不做呢？我兀自不甘心地咕哝。</p>
<p>有了小房子还要改善性住宅，有了大房子还要弄别墅。永远挣不完的钱，永远画不完的图。大家的时间，都用来赶这些行活了。</p>
<p>好吧，我之蜜糖，彼之砒霜。</p>
<h3 id="u4E94"><a href="#u4E94" class="headerlink" title="五"></a>五</h3><p>改革开放三十多年，破产的公司、机构不计其数，但中国几百家出版社，好像自始至终没有一家倒闭的。</p>
<p>行业的繁荣或依赖政策形成的稳定，会给一些鱼龙混杂、蜂拥而入的从业人员造成错觉，相信自己可以高枕无忧不思进取，甚至以为自己“亦有贡献”。可在危机来临之前，一个人的能力储备、职业素养、知识更新、自我成长，会自觉地被激发、强调出来么？</p>
<p>写到这里，我突然有一种担心：这些永不倒闭的出版社，已经把一些编辑养残，自我破产了。</p>
<p>我们有没有勇气和清醒，独立于外部环境和行业冷暖，明白自己要做些什么？</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>本文转载自: <a href="http://mp.weixin.qq.com/s?__biz=MjM5OTM4MDY4MQ==&amp;mid=2650101881&amp;idx=1&amp;sn=19f426423f01f34015685ab146119469&amp;scene=23&amp;srcid=0725foRg46546T20CysgOR9b#rd">读库-张立宪</a></p>
</blockquote>
<p>遇到几件职场上的事情，引发一些感触，在这里一并写出来，与大家一起怀疑下人生。</p>
<h3 id="u4E00"><a href="#u4E00" class="headerlink" title="一"></a>一</h3><p>我属于那种乐观型选手，相信在现在这个世道，不管是来自家人扶助、社会救济，或者有基本社会能力的成年人随便找个工作，温饱都不会有问题，至少饿不死。有了这个底气，再去做什么，就看自己的能力、志趣和因缘了。去年在上海，有位杂志编辑，说他们的杂志快不行了。我便与他共勉：只有破产的公司，没有倒闭的个人。</p>
<p>两个月前又见到一位同行，他本是一家颇有名望的杂志社老总，如今再创业，风生水起。我问他用人之道，他说很重要的一条心得是：尽量不用媒体人，尤其是那些老部下。</p>
<p>这种说法让我很是意外。听他一一道来：当年纸媒红火的时候，那些以“名记”身份行走传媒江湖的人，既眼高手低，又好吃懒做，真真徒有虚名，名不副实。整天乐于听人恭维，忙于开发布会拿红包，急于炫耀自己社会关系之广，却连篇软文也写不好。我不由得表示赞同，听他接着说：这样的名记，是被他所在的媒体赋予的名声，并且也被惯坏了，我要真把他招过来，既不好用，也用不起。</p>
<p>这位仁兄的偏见实在是颇有道理：有的人实际上已经个人破产，只是在靠所供职的还没倒闭的机构活着。</p>
<p>冷静想一下，我们是否已经让自己处于这种境地？</p>]]>
    
    </summary>
    
      <category term="社会" scheme="http://paranoidq.github.io/tags/%E7%A4%BE%E4%BC%9A/"/>
    
      <category term="思考" scheme="http://paranoidq.github.io/tags/%E6%80%9D%E8%80%83/"/>
    
      <category term="社会" scheme="http://paranoidq.github.io/categories/%E7%A4%BE%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的书单]]></title>
    <link href="http://paranoidq.github.io/2016/07/25/just-reading/"/>
    <id>http://paranoidq.github.io/2016/07/25/just-reading/</id>
    <published>2016-07-24T16:14:07.000Z</published>
    <updated>2016-07-24T16:26:03.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u4EBA_u6587"><a href="#u4EBA_u6587" class="headerlink" title="人文"></a>人文</h3><p><a href="http://book.douban.com/subject/1059336/" target="_blank" rel="external">往事并不如烟</a> (完成)<br><a href="http://book.douban.com/subject/1438394/" target="_blank" rel="external">更多的人死于心碎</a></p>
<h3 id="u793E_u4F1A"><a href="#u793E_u4F1A" class="headerlink" title="社会"></a>社会</h3><p><a href="https://book.douban.com/subject/1472854/" target="_blank" rel="external">山坳上的中国</a><br><a href="http://book.douban.com/subject/26306686/" target="_blank" rel="external">创业维艰</a></p>
<a id="more"></a>
<h3 id="IT"><a href="#IT" class="headerlink" title="IT"></a>IT</h3><p><a href="https://book.douban.com/subject/6709783/" target="_blank" rel="external">浪潮之巅</a> (完成)</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u4EBA_u6587"><a href="#u4EBA_u6587" class="headerlink" title="人文"></a>人文</h3><p><a href="http://book.douban.com/subject/1059336/">往事并不如烟</a> (完成)<br><a href="http://book.douban.com/subject/1438394/">更多的人死于心碎</a></p>
<h3 id="u793E_u4F1A"><a href="#u793E_u4F1A" class="headerlink" title="社会"></a>社会</h3><p><a href="https://book.douban.com/subject/1472854/">山坳上的中国</a><br><a href="http://book.douban.com/subject/26306686/">创业维艰</a></p>]]>
    
    </summary>
    
      <category term="top" scheme="http://paranoidq.github.io/tags/top/"/>
    
      <category term="todo" scheme="http://paranoidq.github.io/tags/todo/"/>
    
      <category term="阅读" scheme="http://paranoidq.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="阅读" scheme="http://paranoidq.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[人生新阶段随笔（1）]]></title>
    <link href="http://paranoidq.github.io/2016/07/15/%E4%BA%BA%E7%94%9F%E6%96%B0%E9%98%B6%E6%AE%B5%E9%9A%8F%E7%AC%94-1/"/>
    <id>http://paranoidq.github.io/2016/07/15/人生新阶段随笔-1/</id>
    <published>2016-07-15T12:02:53.000Z</published>
    <updated>2016-07-15T12:45:30.000Z</updated>
    <content type="html"><![CDATA[<p>开始工作接近两周时间，算是成功从一个天真的在校学生变成了半个社会人士。<br>两周的时间虽然工作上没写什么代码，每天也没怎么需要加班加点，但感觉还是挺忙碌的。上周去苏州陪女友玩了两天，这周也算得空了，自己可以好好想想这两周以来的生活和工作。</p>
<p>工作上的变化确实是蛮大的，跟学校里那种轻松自由的节奏完全不同。倒不是主管push你，反而是自己觉得如果没事情做，就会很着急。所以总是想方设法让自己忙碌起来，找事情做。感觉这样的想法还是挺好的，毕竟作为一个刚毕业的学生，最重要的还是能尽快学到知识和技能吧。</p>
<a id="more"></a>
<p>说道知识和技能，这个其实是我不太满意的地方。虽说之前可能也有心理准备，但是进入到公司才发现，国企确实在技术上的发展不够好，或者说不够有技术的激情。当然，已经工作多年的前辈肯定是比我懂得多，但总感觉整个技术开发中心的氛围不够好，这点可能真的无法跟互联网公司相比。不过，其实互联网公司的技术其实也就集中于几个核心的部门，其他大部分也都是完成业务而已。这点上，在EMC这样的外企实习过的同事其实还蛮有发言权的。因此，<strong>公司可能只是一个平台，更多的还是要考自己去主动地学习和探索。问题其实天天都会有，就看你愿不愿意花时间去学了</strong>。</p>
<p>工作的同事其实还是蛮nice的，大家人都非常随和，没有传统国企那种等级森严的感觉。虽然有些师兄已经工作了近十年了，但是还是可以跟我们聊得很好。当然，我之前定下的目标就是要努力处理好自己的人事关系，目前看来还算不错，基本上跟组里的同事相处的很好，能够主动跟他们交流。搁过去的话，我估计还不会有这样的表现，所以算是步入社会之后强迫自己的一种改变吧。能够跟各种人正常的交往也算是一种极为重要的生活技能。</p>
<p>目前组里做的东西说白了就是适配，适配各种行业和机构的接口。本质上，这东西其实还是有一定技术含量的，不过就我目前研究的线上系统WCG的源码来看，写的确实不怎么样，感觉连我这个在校生都不如，各种magic number随便乱写，配置也随便乱写，系统模块和类设计不合理的地方很多。所以目前我的想法是能够重构这个系统，感觉如果能够进行下去的话，应该是一次难得的学习机会，毕竟无论是个人技术成长还是将来跳槽，这都是一个有利的加分项。而<strong>难点在于，如何设计一个好的系统架构，并且考虑到测试成本的问题，系统重构的过程需要尽量的step-by-step，类似于持续集成吧</strong>。这方面，在没有人带我的情况下，感觉是最困难的地方了。架构的问题，可能需要我上网查阅很多资料，如果能够有人请教的话就最好了。而关于重构成本的问题，这估计也是领导最为关心的问题，所以我接下来要做的工作应该是<strong>证明系统重构能够带来很大的好处，并且尽量减小重构对于目前运行的功能的稳定性影响</strong>。</p>
<p>跳槽的问题其实也是这两周困扰我的问题之一，虽然目前还算适应现在的工作环境，但是跳槽可能还是在我的计划中，毕竟我向往更加富有技术激情和技术发展空间的平台。因此，每天晚上我都会固定时间学习，但是总感觉时间不够用。觉得可能是效率不够高。反思一下，应该是学习的东西太过零散，然后每次看到比较复杂的东西，总是想往后拖，然后就不了了之了。所以，后续的改进方向应该是: <strong>大概每周确定一个学习的目标，围绕着这个主线学习。然后抽出一部分时间，解决工作中遇到的问题，每次解决一个问题的时候，就尽量深入弄懂，不要一知半解地结束。这样每接触到一个知识，就能解决一个了。然后每周的主线应该围绕将来自己想深入的方向去学习探索，主要的手段是看书+看系列博客+写demo相结合的方式。</strong><br>其实，做site project是个不错的选择，但是缺的是idea。比较好的方案是，写一些算法相关的project或者小游戏，这些花费的时间不多，并且应该能有一些帮助。这个后续需要再思考思考！！！毕竟，<strong>项目经验在未来的跳槽中估计有着很重要的作用，这点需要时刻提醒自己注意一下</strong>！！！</p>
<p>生活上，发现自己基本上没什么娱乐时间了，感觉回来学习一会儿，运动一会洗个澡，再视频半小时就睡觉了。唉，发现到了工作中真的是时间不够用了。之前计划好的，学日语、学上海话还有看电影写影评之类的通通没时间完成，估计应该调整一下思路，这些东西应该放到周末休息时间去做。这样比较合理。</p>
<p>另外就是去苏州看了一下房子，海胥澜庭地段确实好，也是个三学区的房子。不过价格超贵，感觉还是有点承受不起。前几日，考虑到我跳槽不一定能跳到苏州的问题，觉得可能园区还是比较适合。以来跳槽之后在园区的可能性比较大，上班方便；而来，如果不能跳，将来工作重新找到浦西的话，去上海上班还是比较方便的。而且园区房价的抗跌性还是很好的。如果想去杭州的话，房子卖了应该不成问题。另一个考虑就是学区房的问题，这个需要调查一下，到底学区房需要提前几年买的问题。目前我的估计是5年之内我应该用不上学区房了。所以可以不考虑学区房的问题暂时。目前是这样打算的。</p>
<p>恩，总结到这里，最后摘一句话自勉：<br>—— <em>其实学习是个慢功夫，讲究节奏，就像认真的模仿，看上去很慢很循规蹈矩，但一步步走下来，确是成长最快的途径。这在我们这个事事都追求效率的时代，显得弥足珍贵</em>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>开始工作接近两周时间，算是成功从一个天真的在校学生变成了半个社会人士。<br>两周的时间虽然工作上没写什么代码，每天也没怎么需要加班加点，但感觉还是挺忙碌的。上周去苏州陪女友玩了两天，这周也算得空了，自己可以好好想想这两周以来的生活和工作。</p>
<p>工作上的变化确实是蛮大的，跟学校里那种轻松自由的节奏完全不同。倒不是主管push你，反而是自己觉得如果没事情做，就会很着急。所以总是想方设法让自己忙碌起来，找事情做。感觉这样的想法还是挺好的，毕竟作为一个刚毕业的学生，最重要的还是能尽快学到知识和技能吧。</p>]]>
    
    </summary>
    
      <category term="随笔" scheme="http://paranoidq.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="随笔" scheme="http://paranoidq.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于Java局部类不能访问外围的非final局部变量的探索]]></title>
    <link href="http://paranoidq.github.io/2016/07/04/java-inner-class-final-problem/"/>
    <id>http://paranoidq.github.io/2016/07/04/java-inner-class-final-problem/</id>
    <published>2016-07-04T13:04:47.000Z</published>
    <updated>2016-07-15T12:43:03.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u5B9E_u9A8C"><a href="#u5B9E_u9A8C" class="headerlink" title="实验"></a>实验</h3><p>关于java中的内部类，有很多坑，其中条就是：</p>
<blockquote>
<p>对于定义在函数中的内部类而言，在内部类中可以访问外部函数的局部变量，但这些局部变量必须被申明为final。</p>
</blockquote>
<a id="more"></a>
<p>为了清晰，首先用例子探索一下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by paranoidq on 16/7/4.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalInnerClassDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">        String str = <span class="string">"test"</span>;</span><br><span class="line"></span><br><span class="line">        Date[] dates = <span class="keyword">new</span> Date[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dates.length; i++) &#123;</span><br><span class="line">            dates[i] = <span class="keyword">new</span> Date() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Date anotherDate)</span> </span>&#123;</span><br><span class="line">                    System.out.println(counter);    <span class="comment">// case1: int不修改 -&gt; 通过</span></span><br><span class="line">                    System.out.println(counter++);  <span class="comment">// case2: int修改 -&gt; compiler error</span></span><br><span class="line">                    System.out.println(str);        <span class="comment">// case3: string不修改 -&gt; 通过</span></span><br><span class="line">                    System.out.println(str + <span class="string">"t"</span>);  <span class="comment">// case4: string为不可变对象 -&gt; 通过</span></span><br><span class="line"></span><br><span class="line">                    str = <span class="string">"aaa"</span>;</span><br><span class="line">                    System.out.println(str);        <span class="comment">// case5: 修改了string -&gt; 不通过</span></span><br><span class="line">                    <span class="comment">// Error:</span></span><br><span class="line">                    <span class="comment">// Variable str is accessed from within inner class,</span></span><br><span class="line">                    <span class="comment">// need to be final or effectively final</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">super</span>.compareTo(anotherDate);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u5206_u6790"><a href="#u5206_u6790" class="headerlink" title="分析"></a>分析</h3><p>我们发现，其实编译器足够智能，对于case1和case3而言，虽然访问了非final局部变量，但是还是通过编译了，而只有在case2、case5中修改了局部变量时，才报错。而对于case4而言，涉及到string对象不可变的另一个知识点，这里略过。</p>
<p>分析报错的提示，可以知道，实际上对于局部类访问外部变量的规则，相对比较宽松，只要是<code>final or effectively final</code>即可，所谓<code>effectively final</code>其实也就是在局部类内没有做出实质性的修改动作，这一类情况编译器也是让过的。</p>
<h3 id="u539F_u56E0"><a href="#u539F_u56E0" class="headerlink" title="原因"></a>原因</h3><p>为什么在局部类内不能访问外部的非final局部变量呢？参考<a href="http://android.blog.51cto.com/268543/384844" target="_blank" rel="external">这个帖子</a>，写的很到位。引用如下</p>
<p>这是一个编译器设计的问题，如果你了解java的编译原理的话很容易理解。<br>首先，内部类被编译的时候会生成一个单独的内部类的.class文件，这个文件并不与外部类在同一class文件中。<br>当外部类传的参数被内部类调用时，从java程序的角度来看是直接的调用例如： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dosome</span><span class="params">(<span class="keyword">final</span> String a,<span class="keyword">final</span> <span class="keyword">int</span> b)</span></span>&#123;  </span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Dosome</span></span>&#123;<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dosome</span><span class="params">()</span></span>&#123;System.out.println(a+b)&#125;&#125;;  </span><br><span class="line">  Dosome some=<span class="keyword">new</span> Dosome();  </span><br><span class="line">  some.dosome();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从代码来看好像是那个内部类直接调用的a参数和b参数，但是实际上不是，在java编译器编译以后实际的操作代码是:</p>
<pre><code>class Outer$Dosome{  
    public Dosome(final String a,final int b){  
        this.Dosome$a=a;  
        this.Dosome$b=b;  
    }  
    public void dosome(){  
        System.out.println(this.Dosome$a+this.Dosome$b);  
    }  
}
</code></pre><p>从以上代码看来，内部类并不是直接调用方法传进来的参数，而是内部类将传进来的参数通过自己的构造器备份到了自己的内部，自己内部的方法调用的实际是自己的属性而不是外部类方法的参数。  </p>
<p>这样理解就很容易得出为什么要用final了，因为两者从外表看起来是同一个东西，实际上却不是这样，如果内部类改掉了这些参数的值也不可能影响到原参数，然而这样却失去了参数的一致性，因为从编程人员的角度来看他们是同一个东西，如果编程人员在程序设计的时候在内部类中改掉参数的值，但是外部调用的时候又发现值其实没有被改掉，这就让人非常的难以理解和接受，为了避免这种尴尬的问题存在，所以编译器设计人员把内部类能够使用的参数设定为必须是final来规避这种莫名其妙错误的存在。”</p>
<p>(简单理解就是，拷贝引用，为了避免引用值发生改变，例如被外部类的方法修改等，而导致内部类得到的值不一致，于是用final来让该引用不可改变)</p>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p>内部类的原理分析：<a href="http://android.blog.51cto.com/268543/384809" target="_blank" rel="external">http://android.blog.51cto.com/268543/384809</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5B9E_u9A8C"><a href="#u5B9E_u9A8C" class="headerlink" title="实验"></a>实验</h3><p>关于java中的内部类，有很多坑，其中条就是：</p>
<blockquote>
<p>对于定义在函数中的内部类而言，在内部类中可以访问外部函数的局部变量，但这些局部变量必须被申明为final。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="java" scheme="http://paranoidq.github.io/tags/java/"/>
    
      <category term="inner-class" scheme="http://paranoidq.github.io/tags/inner-class/"/>
    
      <category term="java" scheme="http://paranoidq.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java动态代理与CgLib对比]]></title>
    <link href="http://paranoidq.github.io/2016/06/08/java-dynamic-proxy-implementations/"/>
    <id>http://paranoidq.github.io/2016/06/08/java-dynamic-proxy-implementations/</id>
    <published>2016-06-08T07:48:27.000Z</published>
    <updated>2016-06-08T03:59:59.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u9759_u6001_u4EE3_u7406_u7684_u95EE_u9898"><a href="#u9759_u6001_u4EE3_u7406_u7684_u95EE_u9898" class="headerlink" title="静态代理的问题"></a>静态代理的问题</h3><p><img src="http://images.techhive.com/images/idge/imported/article/jvw/2000/11/jw-1110-proxy-100157716-orig.gif" alt="proxy pattern"></p>
<ol>
<li>紧耦合：代理类必须实现被代理对象的接口</li>
<li>硬编码：项目中大量充斥着类似**proxy这样的类</li>
<li>无法动态添加方法的拦截，会导致代码侵入</li>
</ol>
<p>如何解决问题？实际上也就是解决依赖的问题，代理类的创建不依赖于硬编码，想什么时候创建就什么时候创建，本质上也就是动态构建类和实例吧。JDK动态代理就是利用了Java的反射机制动态构建代理类和实例的。</p>
<a id="more"></a>
<h3 id="JDK_u52A8_u6001_u4EE3_u7406"><a href="#JDK_u52A8_u6001_u4EE3_u7406" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is real object."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Jdk 动态代理必须代理接口,不能代理正常的类.</span><br><span class="line"> *</span><br><span class="line"> * 创建速度快于Cgi,但是运行速度大约比Cgi慢10倍.</span><br><span class="line"> *</span><br><span class="line"> * Created by paranoidq on 16/1/18.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object proxied;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JdkProxy</span><span class="params">(Object proxied)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.proxied = proxied;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     *</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> proxy The proxy parameter passed to the invoke() method is the dynamic proxy object implementing the interface.</span><br><span class="line">     *              Most often you don't need this object.</span><br><span class="line">     * <span class="doctag">@param</span> method</span><br><span class="line">     * <span class="doctag">@param</span> args</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     * <span class="doctag">@throws</span> Throwable</span><br><span class="line">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"proxy: "</span> + proxy.getClass());</span><br><span class="line">        System.out.println(<span class="string">"method: "</span> + method);</span><br><span class="line">        System.out.println(<span class="string">"args: "</span> + args);</span><br><span class="line">        <span class="keyword">if</span> (method.getName().contains(<span class="string">"do"</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"method contains do*"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Method[] methods = proxy.getClass().getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">            System.out.println(m.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * output:</span><br><span class="line">         *      equals</span><br><span class="line">         *      toString</span><br><span class="line">         *      hashCode</span><br><span class="line">         *      doSomething !!!</span><br><span class="line">         */</span></span><br><span class="line">        Class[] interfaces = proxy.getClass().getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class c : interfaces) &#123;</span><br><span class="line">            System.out.println(c);  <span class="comment">// interface me.util.proxy.jdkproxy.Subject</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * output:</span><br><span class="line">         *      interface me.util.proxy.jdkproxy.Subject</span><br><span class="line">         */</span></span><br><span class="line">        <span class="keyword">return</span> method.invoke(proxied, args); <span class="comment">// 在实际对象上invoke方法,同时传入参数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subject subject = <span class="keyword">new</span> RealSubject();</span><br><span class="line">        Subject proxy = (Subject) Proxy.newProxyInstance(</span><br><span class="line">                Subject.class.getClassLoader(),</span><br><span class="line">                subject.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> JdkProxy(subject));</span><br><span class="line"></span><br><span class="line">        proxy.doSomething();</span><br><span class="line">        System.out.println(<span class="string">"======="</span>);</span><br><span class="line">        System.out.println(proxy); <span class="comment">// toString的调用同样会dispatch到invoke,因此会被也"包装"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u603B_u7ED3_u51E0_u70B9_uFF1A"><a href="#u603B_u7ED3_u51E0_u70B9_uFF1A" class="headerlink" title="总结几点："></a>总结几点：</h4><ol>
<li>只能代理接口，不能代理类（原因在与newProxyInstane参数中需要被代理类的接口数组）。如果将newProxyInstance返回的Object转为RealSubject，则报异常：<code>java.lang.ClassCastException: com.sun.proxy.$Proxy0 cannot be cast to me.util.proxy.jdkproxy.RealSubject</code></li>
<li><code>java.lang.Object</code>的方法<code>hashCode()</code>、<code>equals()</code>和<code>toString()</code>也会被代理类拦截。（原因在代码最后的<code>toString(proxy)</code>也触发了代理类的输出）</li>
<li>代理实例本身会被传递给invoke，作为第一个参数，即proxy。可以通过这个获取代理实例及其类型信息（代码中，我们获得了代理实例实际上有doSomething()这个方法，因为代理实例也继承了接口Subject！<strong>所以说为什么要传入classloader，因为实际上是Java在用bytecode生成一个实现了Subject接口的动态代理类啊！这不就是隐式地在用反射构建一个类么？</strong>）</li>
</ol>
<p>JDK动态代理类的字节码是由Java在运行时通过反射动态生成的。</p>
<p>上面的例子基本已经显示了JDK代理的重要特性，下面整理说明一些重点：（主要参考Oracle JavaDoc）</p>
<ol>
<li>invoke()的返回值会传递给代理实例，从而返回给客户端，因此客户端的代理实例声明的返回值类型要注意匹配。</li>
<li></li>
<li>invoke代理的函数的参数列表以数组形式给出，对基本类型做了默认的boxing。另外，注意，在invoke内部可以任意修改这个参数数组，这里Java没有约束。（当然，一般来说修改函数的参数是很危险的，尤其还是这种经过代理的调用，会让调用方完全不知情！）</li>
</ol>
<h3 id="CGLib_u52A8_u6001_u4EE3_u7406"><a href="#CGLib_u52A8_u6001_u4EE3_u7406" class="headerlink" title="CGLib动态代理"></a>CGLib动态代理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * cgi代理可以代理任何类,采用的方式是创建类的子类,然后在子类中调用父类的方法,并织入aop的逻辑</span><br><span class="line"> *</span><br><span class="line"> * 创建慢,但运行性能快于jdk.</span><br><span class="line"> * 适用于对象创建少,长期使用的情况,如singleton.</span><br><span class="line"> *</span><br><span class="line"> * Created by paranoidq on 16/1/18.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CgLibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line">        enhancer.setSuperclass(clazz);  <span class="comment">// 设置被代理类, CgLib根据字节码生成被代理类的子类</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Before method"</span>);</span><br><span class="line">        <span class="comment">// invoke()会造成循环调用, 因为调用的还是子类对象的方法, 而子类对象的方法还是会被拦截.</span></span><br><span class="line">        Object result = methodProxy.invokeSuper(o, objects);</span><br><span class="line">        System.out.println(<span class="string">"After method"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CgLibProxy proxyHandler = <span class="keyword">new</span> CgLibProxy();</span><br><span class="line">        <span class="comment">// proxy normal class: RealSubject</span></span><br><span class="line">        RealSubject proxy = (RealSubject) proxyHandler.getProxy(RealSubject.class);</span><br><span class="line">        proxy.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>使用ASM（JAVA字节码处理框架）在内存中动态的生成被代理类的子类</li>
<li>可以代理没有接口的类(JDK动态代理则不行)</li>
<li>通过字节码技术为被代理的类创建子类，并在子类中采用方法<code>intercept</code>拦截所有父类方法的调用</li>
<li>显然，基于第三点，CGlib不能代理final类</li>
<li>pom包: cglib + asm (底层依赖于asm)</li>
</ol>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html" target="_blank" rel="external">Java Doc</a><br><a href="http://blog.csdn.net/janice0529/article/details/42884019" target="_blank" rel="external">http://blog.csdn.net/janice0529/article/details/42884019</a><br><a href="http://tutorials.jenkov.com/java-reflection/dynamic-proxies.html" target="_blank" rel="external">http://tutorials.jenkov.com/java-reflection/dynamic-proxies.html</a><br><a href="http://www.techavalanche.com/2011/08/24/understanding-java-dynamic-proxy/" target="_blank" rel="external">http://www.techavalanche.com/2011/08/24/understanding-java-dynamic-proxy/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u9759_u6001_u4EE3_u7406_u7684_u95EE_u9898"><a href="#u9759_u6001_u4EE3_u7406_u7684_u95EE_u9898" class="headerlink" title="静态代理的问题"></a>静态代理的问题</h3><p><img src="http://images.techhive.com/images/idge/imported/article/jvw/2000/11/jw-1110-proxy-100157716-orig.gif" alt="proxy pattern"></p>
<ol>
<li>紧耦合：代理类必须实现被代理对象的接口</li>
<li>硬编码：项目中大量充斥着类似**proxy这样的类</li>
<li>无法动态添加方法的拦截，会导致代码侵入</li>
</ol>
<p>如何解决问题？实际上也就是解决依赖的问题，代理类的创建不依赖于硬编码，想什么时候创建就什么时候创建，本质上也就是动态构建类和实例吧。JDK动态代理就是利用了Java的反射机制动态构建代理类和实例的。</p>]]>
    
    </summary>
    
      <category term="java" scheme="http://paranoidq.github.io/tags/java/"/>
    
      <category term="proxy" scheme="http://paranoidq.github.io/tags/proxy/"/>
    
      <category term="cglib" scheme="http://paranoidq.github.io/tags/cglib/"/>
    
      <category term="java" scheme="http://paranoidq.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[node.js安装express框架时出现command not found问题]]></title>
    <link href="http://paranoidq.github.io/2016/06/07/nodejs-express-install/"/>
    <id>http://paranoidq.github.io/2016/06/07/nodejs-express-install/</id>
    <published>2016-06-07T12:23:45.000Z</published>
    <updated>2016-06-07T12:37:47.000Z</updated>
    <content type="html"><![CDATA[<p>在安装nodejs的web框架express时遇到的问题及解决方案。<br><a id="more"></a></p>
<p>安装时在文件夹下输入：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g express</span><br></pre></td></tr></table></figure></p>
<p>但是无法使用express命令，出现<code>express: command not found</code>。原因在于在express4.0中，cli需要单独安装才能使用，cli功能被包含在<code>express-generator</code> package中。</p>
<p>因此需要如下操作：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g express-generator</span><br></pre></td></tr></table></figure></p>
<p>参考: <a href="http://stackoverflow.com/questions/23002448/express-command-not-found" target="_blank" rel="external">http://stackoverflow.com/questions/23002448/express-command-not-found</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在安装nodejs的web框架express时遇到的问题及解决方案。<br>]]>
    
    </summary>
    
      <category term="碎片" scheme="http://paranoidq.github.io/tags/%E7%A2%8E%E7%89%87/"/>
    
      <category term="nodejs" scheme="http://paranoidq.github.io/tags/nodejs/"/>
    
      <category term="express" scheme="http://paranoidq.github.io/tags/express/"/>
    
      <category term="nodejs" scheme="http://paranoidq.github.io/categories/nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[pyenv神器]]></title>
    <link href="http://paranoidq.github.io/2016/06/04/pyenv%E7%A5%9E%E5%99%A8/"/>
    <id>http://paranoidq.github.io/2016/06/04/pyenv神器/</id>
    <published>2016-06-04T09:23:24.000Z</published>
    <updated>2016-06-07T12:09:46.000Z</updated>
    <content type="html"><![CDATA[<p>python版本管理神器： pyenv</p>
<h3 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>pyenv</span><br></pre></td></tr></table></figure>
<h3 id="u914D_u7F6E"><a href="#u914D_u7F6E" class="headerlink" title="配置"></a>配置</h3><p>将一下shell加入.bash_profile或.zshrc<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">set</span> up <span class="comment">pyenv</span></span><br><span class="line">export <span class="comment">PYENV_ROOT=</span>/usr/<span class="comment">local</span>/var/<span class="comment">pyenv</span></span><br><span class="line">if <span class="comment">which pyenv &gt;</span> /dev/<span class="comment">null</span>; <span class="keyword">then</span> eval <span class="string">"$(pyenv init -)"</span>; fi</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="u8BBE_u7F6E_u56FD_u5185_u955C_u50CF"><a href="#u8BBE_u7F6E_u56FD_u5185_u955C_u50CF" class="headerlink" title="设置国内镜像"></a>设置国内镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mirrors</span></span><br><span class="line"><span class="built_in">export</span> PYTHON_BUILD_MIRROR_URL=<span class="string">"http://pyenv.qiniudn.com/pythons/"</span></span><br></pre></td></tr></table></figure>
<h3 id="u4F7F_u7528_u65B9_u6CD5"><a href="#u4F7F_u7528_u65B9_u6CD5" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pyenv versions</span><br><span class="line"></span><br><span class="line">pyenv <span class="built_in">version</span><span class="comment"> // 正在使用的版本</span></span><br><span class="line"></span><br><span class="line">pyenv install <span class="comment">--list</span></span><br><span class="line"></span><br><span class="line">pyenv install <span class="number">3.5</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">pyenv uninstall <span class="number">3.5</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">pyenv <span class="built_in">local</span> <span class="number">3.5</span><span class="number">.0</span> <span class="comment"> // 全局设置</span></span><br><span class="line"></span><br><span class="line">pyenv <span class="built_in">global</span> <span class="number">3.5</span><span class="number">.0</span> <span class="comment"> // 本地目录设置</span></span><br><span class="line"></span><br><span class="line">pyenv <span class="built_in">local</span> <span class="keyword">system</span> <span class="comment"> // 直接使用系统自带版本</span></span><br></pre></td></tr></table></figure>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><ol>
<li>如何删除已经安装的python版本: <a href="http://stackoverflow.com/questions/22774529/what-is-the-safest-way-to-removing-python-framework-files-that-are-located-in-di" target="_blank" rel="external">http://stackoverflow.com/questions/22774529/what-is-the-safest-way-to-removing-python-framework-files-that-are-located-in-di</a></li>
<li>一般而言，系统库放/System/Library，而应用程序依赖的放/Library，所以，苹果自带的python放在前者，而用户自己装的python（比如官方网站下载的）会自动装在后者。（homebrew安装的就在后者）</li>
</ol>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/yyuu/pyenv" target="_blank" rel="external">https://github.com/yyuu/pyenv</a><br><a href="http://v2in.com/pyenv-installation-and-usage.html" target="_blank" rel="external">http://v2in.com/pyenv-installation-and-usage.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>python版本管理神器： pyenv</p>
<h3 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>pyenv</span><br></pre></td></tr></table></figure>
<h3 id="u914D_u7F6E"><a href="#u914D_u7F6E" class="headerlink" title="配置"></a>配置</h3><p>将一下shell加入.bash_profile或.zshrc<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">set</span> up <span class="comment">pyenv</span></span><br><span class="line">export <span class="comment">PYENV_ROOT=</span>/usr/<span class="comment">local</span>/var/<span class="comment">pyenv</span></span><br><span class="line">if <span class="comment">which pyenv &gt;</span> /dev/<span class="comment">null</span>; <span class="keyword">then</span> eval <span class="string">"$(pyenv init -)"</span>; fi</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="碎片" scheme="http://paranoidq.github.io/tags/%E7%A2%8E%E7%89%87/"/>
    
      <category term="python" scheme="http://paranoidq.github.io/tags/python/"/>
    
      <category term="pyenv" scheme="http://paranoidq.github.io/tags/pyenv/"/>
    
      <category term="python" scheme="http://paranoidq.github.io/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[什么是中间件？]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/middleware-expalined-simply/"/>
    <id>http://paranoidq.github.io/2016/05/27/middleware-expalined-simply/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<p>之前找工作之后，主管打电话问将来希望做哪个方向的技术，中间件还是linux还是云计算之类的，没头绪。发现自己其实对于这些方向的具体内容倒不明确了。其他的还好说，之前也有了解到淘宝中间件团队这样的，觉得很NB，但是对于这个中间件到底是什么，似乎没有深究。元旦正好空闲，查阅资料研究研究。</p>
<h3 id="u5B9A_u4E49"><a href="#u5B9A_u4E49" class="headerlink" title="定义"></a>定义</h3><p>维基百科定义：</p>
<blockquote>
<p>提供系统软件和应用软件之间连接的软件，以便于软件各部件之间的沟，特别是应用软件对于系统软件的集中的逻辑，在现代信息技术应用框架如Web服务、面向服务的体系结构等中应用比较广泛。如数据库、Apache的Tomcat，IBM公司的WebSphere,BEA公司的WebLogic[[应用服务器]，东方通公司的Tong系列中间件，以及Kingdee公司的等都属于中间件。</p>
</blockquote>
<p>简单归纳：<br>业务应用 - 中间件 - 基础资源</p>
<ul>
<li>中间件处于两者中间的的位置，封装基础资源，向上层提供更完善的功能。</li>
<li>基础资源包括硬的资源：如CPU、存储(分布式)、网络；我个人认为也包括进程、线程、消息队列、数据库这种软性资源，中间件对这些资源做了封装处理。</li>
</ul>
<h3 id="u4F5C_u7528"><a href="#u4F5C_u7528" class="headerlink" title="作用"></a>作用</h3><ul>
<li>封装</li>
<li>整合</li>
<li>屏蔽</li>
<li>容错</li>
</ul>
<p>我个人归纳为这四个主要功能。封装和整合的是基础资源，使得难用的基础资源更便于使用，而不用考虑细节。（调用顺序、分布式、配置、初始化属性等等）。屏蔽的是底层细节，同时也屏蔽底层的差异（例如，JVM这种本质意义上其实也可算作中间件，通过JVM屏蔽不同系统的差异，从而能够无差异运行Java程序）。容错，则是中间件的另一个重要作用，保证上层无论如何调用，都会得到相应的处理，而不会将错误传递到底层去或直接消失。</p>
<h3 id="u5E38_u89C1_u79CD_u7C7B_uFF1A"><a href="#u5E38_u89C1_u79CD_u7C7B_uFF1A" class="headerlink" title="常见种类："></a>常见种类：</h3><ul>
<li>分布式调用RPC：</li>
<li>消息队列</li>
<li>事务处理</li>
<li>数据库组件</li>
<li>安全组件</li>
<li>并发组件</li>
<li>应用容器组件</li>
<li>日志组件：Apache Kafaka</li>
<li>监控组件：Zookkeeper, Mesos, </li>
</ul>
<h3 id="u963F_u91CC_u5DF4_u5DF4_u4E2D_u95F4_u4EF6_u7684_u51E0_u4E2A_u6848_u4F8B_28_u672C_u8282_u6765_u81EA_u963F_u91CC_u5DF4_u5DF4_u4E2D_u95F4_u4EF6_u56E2_u961F_u535A_u5BA2_29"><a href="#u963F_u91CC_u5DF4_u5DF4_u4E2D_u95F4_u4EF6_u7684_u51E0_u4E2A_u6848_u4F8B_28_u672C_u8282_u6765_u81EA_u963F_u91CC_u5DF4_u5DF4_u4E2D_u95F4_u4EF6_u56E2_u961F_u535A_u5BA2_29" class="headerlink" title="阿里巴巴中间件的几个案例(本节来自阿里巴巴中间件团队博客)"></a>阿里巴巴中间件的几个案例(本节来自阿里巴巴中间件团队博客)</h3><p><img src="http://jm.taobao.org/wp-content/uploads/2013/07/jm.jpg" alt="阿里巴巴中间件支撑平台"></p>
<ul>
<li><strong>Diamond</strong>: 软负载配置中心，用于存储静态配置，并能够提供配置变更动态推送功能，结构简单，超高可用性。在全网被使用于存储不经常发生变化的配置信息。</li>
<li><strong>Notify</strong>, <strong>Meta</strong>: 消息中间件</li>
<li><strong>HSF</strong>: 阿里分布式服务框架，统一整个集团rpc的调用，包括服务方式的统一调用，软负载，服务治理等，提供一套简单方便，高性能的分布式服务框架。</li>
<li><strong>eagleeye</strong>: 淘宝分布式跟踪系统，该系统实现基于单链路的实时监控，系统依赖，性能调优，风险控制等</li>
<li><strong>Pandora</strong>: 淘宝隔离容器，该系统主要解决大规模富二方包升级，二方包隔离，二方包监控等问题。</li>
<li><strong>TDDL</strong>: 通用数据访问层，部署在客户端的jar包，用于将用户的SQL路由到指定的数据库中。目前有1000+应用在使用</li>
<li><strong>精卫</strong>: 通用数据总线，用于将数据从一个数据节点迁移到其他一个或多个数据节点中，目前支持mysql,oracle,hbase等。目前有100+应用在使用</li>
<li><strong>愚公</strong>: 数据自动迁移引擎，海量数据自动运维工具，可用于对用户无影响的自动扩容和缩容，数据平滑迁移，以及异构数据源迁移，目前已经完成了214次业务迁移或扩容。</li>
<li><strong>NewSQL</strong>: NewSQL系统，可以将SQL运行于传统MYSQL/Oracle关系数据库，也可以支持NoSQL数据库如bdb , hbase等。 可以实现其中的跨机合并和跨机交操作等复杂关系操作。</li>
<li><strong>CSP2.0</strong>: 持续稳定性平台帮助阿里系统保障高可用性，包含线上压测、容量规划、依赖治理、限流降级、监控报警、问题定位等模块。</li>
<li><strong>Hotspot</strong>: 性能分析平台通过对基础软件、服务端、前端加载、网络、CDN等方面的性能分析，来帮助阿里系统提升吞吐量、降低延迟时间、节约成本。</li>
<li><strong>TProfiler</strong>: TProfiler是可以在生产环境长期使用的性能分析工具，通过在Java层面记录代码执行热点、对象创建热点等数据，帮助系统定位性能瓶颈。</li>
</ul>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BB%B6" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BB%B6</a><br><a href="http://jm-blog.aliapp.com/?page_id=2449" target="_blank" rel="external">阿里巴巴中间件团队博客</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前找工作之后，主管打电话问将来希望做哪个方向的技术，中间件还是linux还是云计算之类的，没头绪。发现自己其实对于这些方向的具体内容倒不明确了。其他的还好说，之前也有了解到淘宝中间件团队这样的，觉得很NB，但是对于这个中间件到底是什么，似乎没有深究。元旦正好空闲，查阅资料]]>
    </summary>
    
      <category term="java" scheme="http://paranoidq.github.io/tags/java/"/>
    
      <category term="架构" scheme="http://paranoidq.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="中间件" scheme="http://paranoidq.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="架构" scheme="http://paranoidq.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java.util.ResourceBundle 源码分析]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/ResourceBundle-source-code-inside/"/>
    <id>http://paranoidq.github.io/2016/05/27/ResourceBundle-source-code-inside/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="ResourceBundle_u7B80_u4ECB"><a href="#ResourceBundle_u7B80_u4ECB" class="headerlink" title="ResourceBundle简介"></a>ResourceBundle简介</h3><p>顾名思义，ResourceBundle主要就是管理Java程序的一些配置资源的工具类。但是这个管理与一般管理不同的地方在于:</p>
<ul>
<li><p>locale-independent, 即ResourceBundle封装了本地化的读取方法，并且根据Locale参数读对应的本地化配置，从而能够使程序自动在不同地区载入不同的配置文件(<code>name_CN.properties</code>, <code>name_US.properties</code>等)。JavaDoc说法:</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. <span class="keyword">be </span>easily localized, <span class="keyword">or </span>translated, into <span class="keyword">different </span>languages</span><br><span class="line"><span class="number">2</span>. handle <span class="keyword">multiple </span>locales <span class="built_in">at</span> once</span><br><span class="line"><span class="number">3</span>. <span class="keyword">be </span>easily modified later to support even more locales</span><br></pre></td></tr></table></figure>
</li>
<li><p>在没有指定Locale的情况下，自动载入默认配置<code>name.properties</code></p>
</li>
<li>带有缓存功能</li>
<li>线程安全</li>
</ul>
<h3 id="ResourceBundle_u4F7F_u7528"><a href="#ResourceBundle_u4F7F_u7528" class="headerlink" title="ResourceBundle使用"></a>ResourceBundle使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceBundleUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ResourceBundleUtil</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResourceBundle <span class="title">newResourceBundle</span><span class="params">(String resourcePath)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> ResourceBundle.getBundle(resourcePath, Locale.ENGLISH);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResourceBundle <span class="title">newResourceBundle</span><span class="params">(String resourcePath, Locale locale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResourceBundle.getBundle(resourcePath, locale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ResourceBundle rb = ResourceBundleUtil.newResourceBundle(<span class="string">"with_classpath"</span>);</span><br><span class="line">        String value1 = rb.getString(<span class="string">"key1"</span>);</span><br><span class="line">        System.out.println(value1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意，如果不在clsspath的root目录下，需要指定全名</span></span><br><span class="line">        ResourceBundle rb2 = ResourceBundleUtil.newResourceBundle(<span class="string">"i18n.within_folder"</span>);</span><br><span class="line">        value1 = rb2.getString(<span class="string">"key1"</span>);</span><br><span class="line">        System.out.println(value1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自定义ResourceBundle例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyResources</span> <span class="keyword">extends</span> <span class="title">ResourceBundle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">handleGetObject</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key.equals(<span class="string">"okKey"</span>)) <span class="keyword">return</span> <span class="string">"Ok"</span>;</span><br><span class="line">        <span class="keyword">if</span> (key.equals(<span class="string">"cancelKey"</span>)) <span class="keyword">return</span> <span class="string">"Cancel"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// keySet() is inherted from super class</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getKeys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.enumeration(keySet());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Overrides handleKeySet() so that the getKeys() implementation</span></span><br><span class="line">    <span class="comment">// can rely on the keySet() value.</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Set&lt;String&gt; <span class="title">handleKeySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(<span class="string">"okKey"</span>, <span class="string">"cancelKey"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="ResourceBundle_u7C7B_u7ED3_u6784"><a href="#ResourceBundle_u7C7B_u7ED3_u6784" class="headerlink" title="ResourceBundle类结构"></a>ResourceBundle类结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ResourceBundle</span><br><span class="line">    |__ ListResourceBundle</span><br><span class="line">    |__ PropertyResourceBundle</span><br></pre></td></tr></table></figure>
<h3 id="ResourceBundle_u6E90_u7801_u7279_u6027"><a href="#ResourceBundle_u6E90_u7801_u7279_u6027" class="headerlink" title="ResourceBundle源码特性"></a>ResourceBundle源码特性</h3><h4 id="u5DE5_u5382_u65B9_u6CD5"><a href="#u5DE5_u5382_u65B9_u6CD5" class="headerlink" title="工厂方法"></a>工厂方法</h4><p>通过工厂方法<code>getBundle()</code>返回ResourceBundle的子类对象，处理不同的配置资源加载过程。</p>
<h4 id="u5B9E_u73B0_u7C7B"><a href="#u5B9E_u73B0_u7C7B" class="headerlink" title="实现类"></a>实现类</h4><p>ResourceBundle本身是abstract，实际使用的是两个实现类。<br>ListResourceBundle将配置资源看做key/value组成的列表，而PropertyResourceBundle使用properties来维护配置资源。</p>
<p>可以自己实现ResourceBundle，需要实现两个方法：<code>handleGetObject()</code> 和 <code>getKeys()</code>。另外需要注意的是，自己实现的ResourceBundle类要保证线程安全性，因为可能被多个线程同时使用。（ResourceBundle的非abstract方法和两个已知实现类的方法都是线程安全的）</p>
<h4 id="u7EBF_u7A0B_u5B89_u5168_u6027"><a href="#u7EBF_u7A0B_u5B89_u5168_u6027" class="headerlink" title="线程安全性"></a>线程安全性</h4><p>ResourceBundle的非abstract方法和两个已知实现类的方法都是线程安全的。<br>另外，自己实现的ResourceBundle类的<code>handleGetObject()</code>和<code>getKeys()</code>要保证线程安全性，因为可能被多个线程同时使用。</p>
<h4 id="u8D44_u6E90_u52A0_u8F7D_u8FC7_u7A0B_u7684_u63A7_u5236_uFF1AResourceBundle-Control"><a href="#u8D44_u6E90_u52A0_u8F7D_u8FC7_u7A0B_u7684_u63A7_u5236_uFF1AResourceBundle-Control" class="headerlink" title="资源加载过程的控制：ResourceBundle.Control"></a>资源加载过程的控制：ResourceBundle.Control</h4><p>可以控制资源的搜索顺序、bundle的格式或缓存方式等。两种方式控制ResourceBundle加载配置资源的过程：</p>
<ol>
<li>在<code>getBundle()</code>的参数中指定Control实例</li>
<li>通过指定<code>ResourceBundleControlProvider</code>的实现类。这个实现类会在ResouceBundle类被加载的时候就检测到，如果实现类针对某一个base name提供了Control对象，那么加载这个base name时的默认行为就会被改变。如果有多个providers针对同一个base name，那么选择第一个provider。</li>
</ol>
<p>相关方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ResourceBundle.getBundle(String, Locale, ClassLoader, Control);</span><br></pre></td></tr></table></figure>
<h4 id="Cache_management"><a href="#Cache_management" class="headerlink" title="Cache management"></a>Cache management</h4><p><code>getBundle()</code>返回的ResourceBundle会被默认缓存起来，从而下次请求同样的配置名时，会返回缓存过的ResourceBundle实例。<br>使用者可以选择不缓存、控制缓存时间（通过<code>time-to-live</code>变量），也可以清空cache。<br>相关方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ResourceBundle.clearCache();</span><br><span class="line">ResourceBundle.Control.getTimeToLive();</span><br><span class="line">ResourceBundle.Control.needsReload();</span><br></pre></td></tr></table></figure>
<h3 id="ResourceBundle_u6E90_u7801_u5206_u6790"><a href="#ResourceBundle_u6E90_u7801_u5206_u6790" class="headerlink" title="ResourceBundle源码分析"></a>ResourceBundle源码分析</h3><h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p>java.util.ResourceBundle源码(JDK1.8)<br><a href="http://blog.csdn.net/haiyan0106/article/details/2257725" target="_blank" rel="external">http://blog.csdn.net/haiyan0106/article/details/2257725</a><br><a href="http://san-yun.iteye.com/blog/1683558" target="_blank" rel="external">Java WeakReference与SoftReference</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="ResourceBundle_u7B80_u4ECB"><a href="#ResourceBundle_u7B80_u4ECB" class="headerlink" title="ResourceBundle简介"></a>ResourceBundle简介</]]>
    </summary>
    
      <category term="java" scheme="http://paranoidq.github.io/tags/java/"/>
    
      <category term="resourcebundle" scheme="http://paranoidq.github.io/tags/resourcebundle/"/>
    
      <category term="jdk" scheme="http://paranoidq.github.io/tags/jdk/"/>
    
      <category term="todo" scheme="http://paranoidq.github.io/tags/todo/"/>
    
      <category term="java" scheme="http://paranoidq.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vim Commands]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/vim-commands/"/>
    <id>http://paranoidq.github.io/2016/05/27/vim-commands/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u5149_u6807_u64CD_u4F5C"><a href="#u5149_u6807_u64CD_u4F5C" class="headerlink" title="光标操作"></a>光标操作</h3><h4 id="u79FB_u52A8"><a href="#u79FB_u52A8" class="headerlink" title="移动"></a>移动</h4><ul>
<li>文首：<code>gg</code> / <code>:0</code></li>
<li>文末：<code>shift + g</code> / <code>:$</code></li>
<li>行首：<code>0</code></li>
<li>行末：<code>$</code></li>
<li>到第一个不是空字符的位置：<code>^</code></li>
<li>到最后一个不是空字符的位置：<code>g_</code></li>
</ul>
<a id="more"></a>
<p>按单词移动：</p>
<ul>
<li>到下一个单词的开头：<code>w</code></li>
<li>到下一个单词的结尾：<code>e</code></li>
</ul>
<p>按匹配的单词移动：</p>
<ul>
<li>匹配光标所在的单词，移动到下一个：<code>*</code></li>
<li>匹配光标所在的单词，移动到上一个: <code>#</code></li>
</ul>
<p>按页移动：</p>
<ul>
<li>向下一页：<code>ctrl + F</code></li>
<li>向上一页：<code>ctrl + B</code></li>
<li>向下半页：<code>ctrl + D</code></li>
<li>向上半页：<code>ctrl + U</code></li>
</ul>
<h4 id="u63D2_u5165"><a href="#u63D2_u5165" class="headerlink" title="插入"></a>插入</h4><p>切换到插入模式的几种方式:</p>
<ul>
<li>在光标之前插入：<code>i</code></li>
<li>在行开始前插入：<code>I</code></li>
<li>在光标后面插入：<code>a</code></li>
<li>在行结束后插入：<code>A</code></li>
</ul>
<p>插入行：</p>
<ul>
<li>在当前位置下面插入一行，并进入编辑状态：<code>o</code></li>
<li>在当前位置上面插入一行，并进入编辑状态：<code>O</code></li>
</ul>
<h3 id="u6587_u672C_u64CD_u4F5C"><a href="#u6587_u672C_u64CD_u4F5C" class="headerlink" title="文本操作"></a>文本操作</h3><h4 id="u57FA_u672C_u884C_u64CD_u4F5C"><a href="#u57FA_u672C_u884C_u64CD_u4F5C" class="headerlink" title="基本行操作"></a>基本行操作</h4><p>复制</p>
<ul>
<li>复制一行：<code>yy</code></li>
<li>复制光标到行尾的部分：<code>y$</code></li>
<li>复制多行(1)：<code>Nyy</code> + ‘p’ (粘贴)</li>
<li>复制多行(2)：<code>6, 9 co 12</code> (复制6行和9行中间的部分到12行后面)</li>
</ul>
<p>复制大量的行：</p>
<ol>
<li>光标移到起始行，输入ma</li>
<li>光标移到结束行，输入mb</li>
<li>光标移到粘贴行，输入mc</li>
<li>然后 :’a,’b co ‘c 把 co 改成 m 就成剪切了</li>
</ol>
<p>粘贴</p>
<ul>
<li>粘贴：<code>p</code></li>
</ul>
<p>删除</p>
<ul>
<li>删除光标后一个字符：<code>x</code></li>
<li>删除光标到行尾的部分：<code>d$</code></li>
<li>删除单行：<code>dd</code> / <code>1d</code></li>
<li>删除多行(1)：<code>1, Nd</code> / <code>Ndd</code>(删除包含光标所在行的下面N行)</li>
<li>删除多行(2)：<code>:1, 4 de</code></li>
</ul>
<p>替换</p>
<ul>
<li>替换从光标位置到后一个单词结尾的字符：<code>cw</code></li>
</ul>
<h4 id="u4EFB_u610F_u533A_u95F4_u7684_u6587_u672C_u64CD_u4F5C"><a href="#u4EFB_u610F_u533A_u95F4_u7684_u6587_u672C_u64CD_u4F5C" class="headerlink" title="任意区间的文本操作"></a>任意区间的文本操作</h4><p>首先进入visual模式，直接按v键进入visual模式，然后<code>v+ j/k/h/l</code>进行文本选择</p>
<ul>
<li>剪切：<code>d</code></li>
<li>复制：<code>y</code></li>
<li>粘贴：<code>p</code></li>
</ul>
<h4 id="u884C_u5757_u64CD_u4F5C"><a href="#u884C_u5757_u64CD_u4F5C" class="headerlink" title="行块操作"></a>行块操作</h4><h3 id="u64A4_u9500_u64CD_u4F5C"><a href="#u64A4_u9500_u64CD_u4F5C" class="headerlink" title="撤销操作"></a>撤销操作</h3><ul>
<li>撤销上一个命令： <code>u</code></li>
<li>反撤销：<code>ctrl + r</code> </li>
</ul>
<h3 id="u641C_u7D22_u64CD_u4F5C"><a href="#u641C_u7D22_u64CD_u4F5C" class="headerlink" title="搜索操作"></a>搜索操作</h3><ul>
<li>搜索：<code>/pattern</code></li>
<li>下一个：<code>n</code></li>
<li>上一个：<code>N</code></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5149_u6807_u64CD_u4F5C"><a href="#u5149_u6807_u64CD_u4F5C" class="headerlink" title="光标操作"></a>光标操作</h3><h4 id="u79FB_u52A8"><a href="#u79FB_u52A8" class="headerlink" title="移动"></a>移动</h4><ul>
<li>文首：<code>gg</code> / <code>:0</code></li>
<li>文末：<code>shift + g</code> / <code>:$</code></li>
<li>行首：<code>0</code></li>
<li>行末：<code>$</code></li>
<li>到第一个不是空字符的位置：<code>^</code></li>
<li>到最后一个不是空字符的位置：<code>g_</code></li>
</ul>]]>
    
    </summary>
    
      <category term="linux" scheme="http://paranoidq.github.io/tags/linux/"/>
    
      <category term="vim" scheme="http://paranoidq.github.io/tags/vim/"/>
    
      <category term="linux" scheme="http://paranoidq.github.io/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python super详解（译 + 进一步理解）]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/python-super-considered-super/"/>
    <id>http://paranoidq.github.io/2016/05/27/python-super-considered-super/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u7FFB_u8BD1_uFF1APython_u2019s_super_28_29_considered_super_21"><a href="#u7FFB_u8BD1_uFF1APython_u2019s_super_28_29_considered_super_21" class="headerlink" title="翻译：Python’s super() considered super!"></a>翻译：Python’s super() considered super!</h2><h3 id="u57FA_u7840"><a href="#u57FA_u7840" class="headerlink" title="基础"></a>基础</h3><p>如果你没有惊讶于Python内置的super()，那么很可能你并没有真正知道它能做什么以及它如何有效的使用。本文章就主要在已有的python super()解释的基础上做出进一步的深入，主要包括：</p>
<ul>
<li>提供了实际的使用cases</li>
<li>给出了理论模型，演示它如何工作</li>
<li>展示如何使super()发挥它的作用</li>
<li>使用super()的建议</li>
<li>真实的例子</li>
</ul>
<p>本文的例子同时适用于python2和python3版本</p>
<p>首先，一个例子：子类继承内置的类，并且扩展了内置类的方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogoingDict</span><span class="params">(dict)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        logging.info(<span class="string">'Setting to %r'</span> % (key, value))</span><br><span class="line">        super().__setitem__(key, value)</span><br></pre></td></tr></table></figure></p>
<p>上面的例子中，LoggingDict完成了dict的同样的工作——update元素，只不过扩展了功能，在update元素之前先打log了，然后通过super()将实际update的工作<strong>代理</strong>给了dict对象</p>
<p>如果没有super()，我们可以这样做：<code>dict.__setitem__(self, key, value)</code>，但是问题在于：这种硬编码的方式不利于程序的扩展性。利用super()实际上是一种`<strong>间接引用</strong>（computed indirect reference）。</p>
<p>间接引用的好处之一：<strong>隔离</strong>。不用在是函数内部制定代理类的具体名字。如果要修改base class为另一个类，那么<code>super()</code>会自动切换给代理类，而硬编码的方式则要修改具体实现。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogoingDict</span><span class="params">(SomeOtherMapping)</span>:</span>        <span class="comment"># new base class</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        logging.info(<span class="string">'Setting to %r'</span> % (key, value))</span><br><span class="line">        super().__setitem__(key, value)     <span class="comment"># no change needed</span></span><br></pre></td></tr></table></figure></p>
<p>间接引用的另一个好处：<strong>动态</strong>。可以在运行时自由指定间接引用指向的类。引用指向的具体计算方式依赖两点：</p>
<ol>
<li>调用super的class</li>
<li>实例的基类的继承树</li>
</ol>
<p>第一点往往与源码有关，在例子中，super()的调用者是<code>LoggingDict.__setitem__()</code>，这是固定的。<br>第二点则是关键的动态性所在（我们可以创建具有复杂继承关系的子类）。一个logging ordered dictionary，不改变我们已有的类：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingOD</span><span class="params">(LoggingDict, collections.OrderedDict)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p>
<p>新类的继承树：<code>LoggingOD, LoggingDict, OrderedDict, dict, object</code>。注意：OrderedDict在dict的前面，因此，调用super()的<code>LoggingDict.__setitem__()</code>现在就把具体的upate任务代理给了OrderedDict，而不是上一个例子中的dict。</p>
<p>仔细考虑一下：在这个例子中，我们并没有改变LoggingDict的源码，而是新增了一个子类，这个新增子类的唯一逻辑就是组合了两个已有的类，并且控制他们的继承顺序。而super()则自动根据新类定义的继承顺序发挥了它的动态性能力！</p>
<h3 id="u57FA_u7C7B_u7684_u67E5_u627E_u987A_u5E8F"><a href="#u57FA_u7C7B_u7684_u67E5_u627E_u987A_u5E8F" class="headerlink" title="基类的查找顺序"></a>基类的查找顺序</h3><p>实际上，这里我称为检索顺序或继承树的说法，正式的叫法应该是：<strong>方法解析顺序(Method Resolution Order, MRO)</strong>。想要知道一个类的MRO可以用<code>__mro__</code>属性：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pprint(LoggingOD.__mro__)</span><br><span class="line">(&lt;class '__main__.LoggingOD'&gt;,</span><br><span class="line"> &lt;class '__main__.LoggingDict'&gt;,</span><br><span class="line"> &lt;class 'collections.OrderedDict'&gt;,</span><br><span class="line"> &lt;class 'dict'&gt;,</span><br><span class="line"> &lt;class 'object'&gt;)</span><br></pre></td></tr></table></figure></p>
<p>如果想按照我们想的MRO创建子类，那么首先需要了解MRO的计算机制：</p>
<blockquote>
<p>MRO的序列包括：本类，基类以及基类的基类们，直到object为止。一个类始终出现在它的基类前面，如果有多个同级基类，那么这些基类的顺序依照声明的顺序排列。</p>
</blockquote>
<p>上述例子遵从MRO的规范：</p>
<ul>
<li>LoggingOD在它的基类LogginDict和OrderedDict前面</li>
<li>LoggingDict在OrderedDict前面，因为<code>LoggingOD.__bases__</code>的声明顺序是(LoggingDict, OrderedDict)</li>
<li>LogginDict在它的基类dict前面</li>
<li>OrderedDict在它的基类dict前面</li>
<li>dict在它的基类object前面</li>
</ul>
<p>解析约束的过程被称作<code>线性化(linearizatoin)</code>。有很多论文研究这方面的内容，但是我们只需要知道两点即可：</p>
<ul>
<li>基类永远出现在派生类后面</li>
<li>如果有多个基类，基类的相对顺序保持不变。</li>
</ul>
<h3 id="u5B9E_u8DF5_u5EFA_u8BAE"><a href="#u5B9E_u8DF5_u5EFA_u8BAE" class="headerlink" title="实践建议"></a>实践建议</h3><p>super()的作用是将本类方法的调用代理给继承树中的某一个基类实例去完成。这里给出三个注意点：</p>
<ul>
<li>保证通过super()调用的基类方法必须存在</li>
<li>调用者和被调用者需要有匹配的函数签名</li>
<li>调用super()的方法，每次出现都同样必须使用super()</li>
</ul>
<p>1): 我们先看这一点：调用者的参数与被调用方法的参数一致。<br>这跟普通的方法调用不同，普通的方法调用在的时候被调用的方法是已知的，但是有了super()，在本类编码的时候被super()调用的方法是未知的。想象一下，我们可以之后定义一个subclass，从而在正在编写的class的MRO中引入新的类，改变MRO的顺序，从而可能改变super()实际调用的类！</p>
<p>我们的方法是：利用位置参数指定固定的签名。例如，在<code>__setitem__()</code>中，就保持了固定的两个位置参数：key和value。这种方法在LoggingDict也有体现，即<code>__setitem__()</code>与dict有同样的函数签名。</p>
<p>更灵活的方法：让继承树中的所有方法都接受这样的参数:<code>关键字参数 + 可变关键字参数</code>，并且每一层取走自己想要的参数，并通过<code>**kwargs</code>向上一层forward余下的参数，最终在调用链的最后一层使得可变关键字参数为空(<code>object.__init__()</code>不需要任何参数)。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">classs Shape:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, shapename, **kwargs)</span>:</span></span><br><span class="line">        self.shapename = shapename</span><br><span class="line">        super().__init__(**kwargs)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColoredShape</span><span class="params">(Shape)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, color, **kwargs)</span>:</span></span><br><span class="line">        self.color = color</span><br><span class="line">        super().__init(**kwargs)</span><br><span class="line"></span><br><span class="line">cs = ColoredShape(color=<span class="string">'red'</span>, shapename=<span class="string">'circule'</span>)</span><br></pre></td></tr></table></figure></p>
<p>2): 如何确定目标函数存在？<br>上面的例子就是最简单的case，即object有我们调用的方法，因此无论什么样的继承树都会有我们的目标方法，不会出现AttributeError。</p>
<p>那么对于object不存在的方法，我们的处理方法是：编写一个root类包含我们的目标方法，并且在object前面被调用。这个root类的职责就是’吞掉’方法的调用，不让super()继续向上层类传递（因为上层类没有我们的目标方法了，再传递就会最终出现AttributeError）。</p>
<p>Root的draw方法还可以利用防御性编程的策略，即用assert来确保调用链的上层没有draw方法了。这是为了避免子类可能错误的继承了一个没有声明Root为基类的类。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Root：</span><br><span class="line">    def draw(self):</span><br><span class="line">        # the delegatioin chain stops here</span><br><span class="line">        assert not hasattr(super(), 'draw')</span><br><span class="line"></span><br><span class="line">class Shape(Root):</span><br><span class="line">    def __init__(self, shapename, **kwargs):</span><br><span class="line">        self.shapename = shapename</span><br><span class="line">        super().__init__(**kwargs)</span><br><span class="line">    def draw(self):</span><br><span class="line">        print('Drawing. Setting shape to: ', self.shapename)</span><br><span class="line">        super().draw()</span><br><span class="line"></span><br><span class="line">class ColoredShape(Shape):</span><br><span class="line">    def __init__(self, color, **kwargs):</span><br><span class="line">        self.color = color</span><br><span class="line">        super().__init__(**kwargs)</span><br><span class="line">    def draw(self):</span><br><span class="line">        print('Drawing. Setting color to: ', self.color)</span><br><span class="line">        super().draw()</span><br><span class="line"></span><br><span class="line">cs = ColoredShape(color='blue', shapename='square')</span><br><span class="line">cs.draw()</span><br></pre></td></tr></table></figure></p>
<p>如果一个子类希望在MRO中引入其他类，那么这些其他类也必须继承自Root，从而确保draw方法不会到达object，而无法被Root.draw阻止下来。这个约定必须写在文档中，就像pyhon中所有的自定义异常都必须继承自BaseException一样。</p>
<p>3): 调用链的每层函数的调用都加上super()方法即可，这是约定。</p>
<h3 id="u5982_u4F55_u5F15_u5165_u2019_u5F02_u7C7B_u2019_uFF08non-cooperative_class_uFF09"><a href="#u5982_u4F55_u5F15_u5165_u2019_u5F02_u7C7B_u2019_uFF08non-cooperative_class_uFF09" class="headerlink" title="如何引入’异类’（non-cooperative class）"></a>如何引入’异类’（non-cooperative class）</h3><p>有时候，我们也要想引入一些第三方的类，这些类并没有针对super设计或者没有遵循Root的约定。解决方法是：利用适配器包装一下。<br>例如下面的Moveable类并没有super()调用，并且它的<code>__init__()</code>方法函数签名与object不一致，并且它没有继承Root。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Moveable</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Drawing at position: '</span>, self.x, self.y)</span><br></pre></td></tr></table></figure></p>
<p>如果你希望把这个类引入ColoredShape的层次中，你需要做一个adapter：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MoveableAdapter</span><span class="params">(Root)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y, **kwargs)</span>:</span></span><br><span class="line">        self.moveable = Moveable(x, y)</span><br><span class="line">        super().__init__(**kwargs)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.moveable.draw()</span><br><span class="line">        super().draw()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovableColoredShape</span><span class="params">(ColoredShape, MoveableAdapter)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">MovableColoredShape(color=<span class="string">'red'</span>, shapename=<span class="string">'triangle'</span>,</span><br><span class="line">                    x=<span class="number">10</span>, y=<span class="number">20</span>).draw()</span><br></pre></td></tr></table></figure></p>
<h3 id="u539F_u6587"><a href="#u539F_u6587" class="headerlink" title="原文"></a>原文</h3><p><a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/" target="_blank" rel="external">Python’s super() considered super!</a></p>
<h2 id="u8FDB_u4E00_u6B65_u7406_u89E3"><a href="#u8FDB_u4E00_u6B65_u7406_u89E3" class="headerlink" title="进一步理解"></a>进一步理解</h2><h3 id="super_u7684_u672C_u8D28"><a href="#super_u7684_u672C_u8D28" class="headerlink" title="super的本质"></a>super的本质</h3><p>主要来自于<a href="http://zhihu.com/question/20040039/answer/57883315" target="_blank" rel="external">知乎-laike9m的回答</a>，少量删改。</p>
<p>不要一说到 super 就想到基类！super 指的是 MRO 中的下一个类！<br>super干的事情其实是这个：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">super</span><span class="params">(cls, inst)</span>:</span></span><br><span class="line">    mro = inst.__class__.mro()</span><br><span class="line">    <span class="keyword">return</span> mro[mro.index(cls) + <span class="number">1</span>]</span><br></pre></td></tr></table></figure></p>
<p>两个参数分别作了两件事情:</p>
<ol>
<li>inst负责生成MRO的list</li>
<li>通过cls定位当前的MRO中的index,并返回mro[index+1]</li>
</ol>
<p>一个例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Root</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'this is root'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Root)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'enter B'</span>)</span><br><span class="line">        <span class="comment"># print(self)  # &lt;__main__.D object at 0x...&gt;</span></span><br><span class="line">        super().__init__()  <span class="comment"># python3中不用写成super(B, self).__init__()</span></span><br><span class="line">        print(<span class="string">'leave B'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(Root)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'enter C'</span>)</span><br><span class="line">        super().__init__()</span><br><span class="line">        print(<span class="string">'leave c'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">d = D()</span><br><span class="line">print(D.__mro__)</span><br><span class="line">print(B.__mro__)</span><br><span class="line">print(C.__mro__)</span><br></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enter b</span><br><span class="line">enter c</span><br><span class="line">this is root</span><br><span class="line">leave c</span><br><span class="line">leave b</span><br><span class="line">(<span class="name">&lt;class</span> '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.Root'&gt;, &lt;class 'object'&gt;)</span><br><span class="line">(<span class="name">&lt;class</span> '__main__.C'&gt;, &lt;class '__main__.Root'&gt;, &lt;class 'object'&gt;)</span><br><span class="line">(<span class="name">&lt;class</span> '__main__.B'&gt;, &lt;class '__main__.Root'&gt;, &lt;class 'object'&gt;)</span><br></pre></td></tr></table></figure></p>
<p>因此，实际上super()调用的时MRO中的下一个类的对应方法，所以不难理解enter b之后是enter c而不是thi is root。因为C是B的下一个，至于为什么C是下一个，那就要看上文翻译中讲的MRO规范了。</p>
<p>需要注意的是，这里的MRO是self生成的，指的是self这个instance对应的类的MRO，self不同，MRO也不同。例如d的MRO就是第一行MRO，而如果instance是B，则MRO就是第二行了。而在上面的例子中，self一直是d。super().func是把实例的MRO中相对于当前类的下一个类的func执行，这个实例并非一定是当前类的，并且如果下一个类的func不再以super的方式调用，则调用终止（但是不建议，除非到了object或者Root）。</p>
<p>注意super继承只能用于新式类，用于经典类时就会报错。</p>
<ul>
<li>新式类：必须有继承的类，如果没什么想继承的，那就继承objcet</li>
<li>经典类：没有基类，如果此时调用super就会出现错误：“super() argument 1 must be type, not classobj”</li>
</ul>
<h3 id="super_u7528_u5728_u4F55_u5904_uFF1F"><a href="#super_u7528_u5728_u4F55_u5904_uFF1F" class="headerlink" title="super用在何处？"></a>super用在何处？</h3><p>主要来自于<a href="http://zhihu.com/question/20040039/answer/13772641" target="_blank" rel="external">知乎-松鼠奥利奥的的回答</a>，少量删改。</p>
<p>super主要用于解决多继承的问题，直接用类名调用基类的方法在单继承的时候没问题，但是如果使用多继承，则会涉及到查找顺序（MRO）、重复调用（钻石继承）等问题。</p>
<p>如果没有复杂的继承结构，super作用不大。而复杂的继承结构本身就是不良设计。对于多重继承的用法，现在比较推崇 Mixin 的方式，也就是</p>
<ul>
<li>普通类多重继承只能有一个普通父类和若干个 Mixin 类（保持主干单一）</li>
<li>Mixin 类不能继承普通类（避免钻石继承）</li>
<li>Mixin 类应该单一职责（参考 Java 的 interface 设计，Mixin 和此极其相似，只不过附带实现而已）<br>如果按照上述标准，只使用 Mixin形式的多继承，那么不会有钻石继承带来的重复方法调用，也不会有复杂的查找顺序 —— 此时 super 是可以有无的了，用不用全看个人喜好，只是记得千万别和类名调用的方式混用就好。</li>
</ul>
<p>Python的多继承类是通过mro的方式来保证各个基类的函数被逐一调用，而且保证每个基类函数只调用一次（如果每个类都使用super）</p>
<h3 id="u6E90_u7801_u7EA7_u522B_u7684_u89E3_u91CA"><a href="#u6E90_u7801_u7EA7_u522B_u7684_u89E3_u91CA" class="headerlink" title="源码级别的解释"></a>源码级别的解释</h3><p><a href="http://blog.csdn.net/johnsonguo/article/details/585193" target="_blank" rel="external">http://blog.csdn.net/johnsonguo/article/details/585193</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u7FFB_u8BD1_uFF1APython_u2019s_super_28_29_considered_super_21"><a href="#u7FFB_u8BD1_uFF1APython_u2019s_super_28_29_considered_supe]]>
    </summary>
    
      <category term="python" scheme="http://paranoidq.github.io/tags/python/"/>
    
      <category term="super" scheme="http://paranoidq.github.io/tags/super/"/>
    
      <category term="python" scheme="http://paranoidq.github.io/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac中如何查找Java的路径]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/Mac-java-config/"/>
    <id>http://paranoidq.github.io/2016/05/27/Mac-java-config/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u65B9_u6CD51_uFF1A"><a href="#u65B9_u6CD51_uFF1A" class="headerlink" title="方法1："></a>方法1：</h3><p>最直接的方法，运行以下命令可以列出系统的default java版本和所有备选的java版本<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/jav<span class="built_in">a_home</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="u65B9_u6CD52_uFF1A"><a href="#u65B9_u6CD52_uFF1A" class="headerlink" title="方法2："></a>方法2：</h3><p>step-wise的方法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> java</span><br></pre></td></tr></table></figure>
<p>如果输出的时/usr/bin/java, 证明是链接，需要找到链接的source<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls <span class="_">-l</span> `<span class="built_in">which</span> java`</span><br></pre></td></tr></table></figure></p>
<p>输出为实际的java安装路径: <code>rwxr-xr-x  1 root  wheel  74 11 25 13:36 /usr/bin/java -&gt; /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java</code></p>
<p>如果/usr/bin/java指向的仍然是一个symbolic link, 那么继续执行以下命令，直到找到source为止 </p>
<p>[注]</p>
<p>ls -l ` which java`</p>
<p>单引号把Linux命令视为字符集合。反引号会强迫执行Linux命令。和<code>$()</code>一样。在执行一条命令时，会先将其中或者是<code>$()</code> 中的语句当作命令执行一遍，再将结果加入到外层命令中执行</p>
<h3 id="u53C2_u8003_uFF1A"><a href="#u53C2_u8003_uFF1A" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://stackoverflow.com/questions/18144660/what-is-path-of-jdk-on-mac" target="_blank" rel="external">http://stackoverflow.com/questions/18144660/what-is-path-of-jdk-on-mac</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u65B9_u6CD51_uFF1A"><a href="#u65B9_u6CD51_uFF1A" class="headerlink" title="方法1："></a>方法1：</h3><p>最直接的方法，运行以下命令可以列出系统的default java版本和所有备选的java版本<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/jav<span class="built_in">a_home</span></span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="mac" scheme="http://paranoidq.github.io/tags/mac/"/>
    
      <category term="java" scheme="http://paranoidq.github.io/tags/java/"/>
    
      <category term="碎片" scheme="http://paranoidq.github.io/tags/%E7%A2%8E%E7%89%87/"/>
    
      <category term="java" scheme="http://paranoidq.github.io/categories/java/"/>
    
  </entry>
  
</feed>
