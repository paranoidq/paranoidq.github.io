<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[百末旨酒布兰生]]></title>
  <subtitle><![CDATA[孤舟蓑笠翁，独钓寒江雪]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://paranoidq.github.io/"/>
  <updated>2016-05-27T15:45:36.000Z</updated>
  <id>http://paranoidq.github.io/</id>
  
  <author>
    <name><![CDATA[Paranoid Qian]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[nginx与tomcat有什么区别]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/nginx-vs-tomcat/"/>
    <id>http://paranoidq.github.io/2016/05/27/nginx-vs-tomcat/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u89E3_u6790"><a href="#u89E3_u6790" class="headerlink" title="解析"></a>解析</h3><p>Apache/Nginx应该叫做<code>HTTP Server</code>；而Tomcat则是一个<code>Web App Server</code>，更准确的说是JSP/Servlet的Web App Server，因为其他语言开发的web应用无法在Tomcat上运行。</p>
<a id="more"></a>
<p>Http Server的核心是Http协议层面的传输和访问控制，包括代理、负载均衡等。客户端通过Http协议访问Http Server上的文件资源(HTML文件、图片等)，然后Http Server如实将文件通过Http协议传输给客户端。当然，通过<code>CGI</code>技术也可以对Http Server传输的内容进行一些处理。<br>大多数时候，Nginx主要作为Tomcat前端的负载均衡器和代理，负责请求的转发和静态内容的直接返回。因为其高效的IO机制[2]，能够显著提高系统的吞吐率。</p>
<p>Web App Server，应用执行的容器。它首先需要支持开发语言的 Runtime（对于 Tomcat 来说，就是 Java），保证应用能够在应用服务器上正常运行。其次，需要支持应用相关的规范，例如类库、安全方面的特性。对于 Tomcat 来说，就是需要提供 JSP/Sevlet 运行需要的标准类库、Interface 等。为了方便，<br>应用服务器往往也会集成 HTTP Server 的功能，但是不如专业的 HTTP Server 那么强大，所以应用服务器往往是运行在 HTTP Server 的背后，执行应用，将动态的内容转化为静态的内容之后，通过 HTTP Server 分发到客户端。<br>Tomcat和Jetty，WebLogic同属一类。</p>
<p><hr></p>
<blockquote>
<p>“tomcat用在java后台程序上，java后台程序难道不能用apache和nginx吗？”</p>
</blockquote>
<p>—— 不能。apache和nginx不是servlet容器。什么是servlet容器呢？即实现HttpServletRequest、HttpServletResponse、HttpSession等等接口，解析http请求，通过类加载器加载对应的servlet实现类并调用，也就是说servlet容器必须由java或者基于jvm的语言实现。<br><strong>本质上，Servlet是J2EE规范的一部分，规定了容器和Web App必须遵循的接口规范。容器必须按照接口解析Java类，然后处理请求；同样Web App也只有按照规范来编写实现类，才能被容器所加载解析，从而完成特定的功能。</strong></p>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://www.zhihu.com/question/32212996" target="_blank" rel="external">https://www.zhihu.com/question/32212996</a></li>
<li><a href="http://90112526.blog.51cto.com/6013499/1059700" target="_blank" rel="external">http://90112526.blog.51cto.com/6013499/1059700</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u89E3_u6790"><a href="#u89E3_u6790" class="headerlink" title="解析"></a>解析</h3><p>Apache/Nginx应该叫做<code>HTTP Server</code>；而Tomcat则是一个<code>Web App Server</code>，更准确的说是JSP/Servlet的Web App Server，因为其他语言开发的web应用无法在Tomcat上运行。</p>]]>
    
    </summary>
    
      <category term="碎片" scheme="http://paranoidq.github.io/tags/%E7%A2%8E%E7%89%87/"/>
    
      <category term="server" scheme="http://paranoidq.github.io/tags/server/"/>
    
      <category term="nginx" scheme="http://paranoidq.github.io/tags/nginx/"/>
    
      <category term="tomcat" scheme="http://paranoidq.github.io/tags/tomcat/"/>
    
      <category term="中间件" scheme="http://paranoidq.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[大数据生态圈技术总结（持续补充）]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/Big-data-ecosystem/"/>
    <id>http://paranoidq.github.io/2016/05/27/Big-data-ecosystem/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u5206_u5E03_u5F0F_u6587_u4EF6_u7CFB_u7EDF"><a href="#u5206_u5E03_u5F0F_u6587_u4EF6_u7CFB_u7EDF" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h3><ol>
<li><p>磁盘</p>
<ul>
<li>HDFS</li>
<li>S3</li>
<li>Ceph</li>
<li>NFS</li>
<li>Gluster FS</li>
</ul>
</li>
<li><p>内存</p>
<ul>
<li>Tachyon</li>
<li>Spark</li>
</ul>
</li>
</ol>
<h3 id="u5206_u5E03_u5F0F_u6570_u636E_u5E93"><a href="#u5206_u5E03_u5F0F_u6570_u636E_u5E93" class="headerlink" title="分布式数据库"></a>分布式数据库</h3><ol>
<li><p>磁盘</p>
<ul>
<li>Cassandra</li>
<li>HBase</li>
<li>MongoDB</li>
</ul>
</li>
<li><p>内存 </p>
<ul>
<li>Redis</li>
<li>Memcached</li>
</ul>
</li>
</ol>
<h3 id="u5206_u5E03_u5F0F_u8BA1_u7B97"><a href="#u5206_u5E03_u5F0F_u8BA1_u7B97" class="headerlink" title="分布式计算"></a>分布式计算</h3><ol>
<li><p>批处理</p>
<ul>
<li>Hadoop MapReduce</li>
<li>Spark(支持迭代)</li>
<li>Flink(支持迭代)</li>
</ul>
</li>
<li><p>流式计算</p>
<ul>
<li>Storm</li>
<li>Samza</li>
<li>Spark Streaming</li>
<li>Flink</li>
</ul>
</li>
<li><p>即席查询(ad-hoc)</p>
<ul>
<li>Hive</li>
<li>SparkSQL</li>
<li>Presto(Facebook)</li>
<li>Impala</li>
<li>Drill(Google Dremel的开源实现)</li>
</ul>
</li>
</ol>
<h3 id="u8D44_u6E90_u8C03_u5EA6_u4E0E_u7BA1_u7406"><a href="#u8D44_u6E90_u8C03_u5EA6_u4E0E_u7BA1_u7406" class="headerlink" title="资源调度与管理"></a>资源调度与管理</h3><ul>
<li>ZooKeeper</li>
<li>YARN</li>
<li>Mesos</li>
</ul>
<h3 id="u5206_u5E03_u5F0F_u6D88_u606F_u7CFB_u7EDF"><a href="#u5206_u5E03_u5F0F_u6D88_u606F_u7CFB_u7EDF" class="headerlink" title="分布式消息系统"></a>分布式消息系统</h3><ul>
<li>StormMQ</li>
<li>RabbitMQ</li>
<li>ZeroMQ</li>
<li>Apache ActiveMQ</li>
<li>Jafka(LinkedIn)</li>
<li>Kafka(LinkedIn)</li>
</ul>
<h3 id="RPC_u6846_u67B6"><a href="#RPC_u6846_u67B6" class="headerlink" title="RPC框架"></a>RPC框架</h3><ul>
<li>Apache Avro</li>
<li>Thrift(Facebook)</li>
<li>Kyro</li>
</ul>
<h3 id="u96C6_u7FA4_u76D1_u63A7"><a href="#u96C6_u7FA4_u76D1_u63A7" class="headerlink" title="集群监控"></a>集群监控</h3><ul>
<li>Zabbix</li>
<li>Ganglia</li>
<li>Nagios</li>
<li>Ambari()</li>
</ul>
<h3 id="u6570_u636E_u6536_u96C6"><a href="#u6570_u636E_u6536_u96C6" class="headerlink" title="数据收集"></a>数据收集</h3><ul>
<li>Flume</li>
<li>Scribe(Facebook)</li>
<li>Logstash</li>
<li>Kafka</li>
</ul>
<h3 id="u56FE_u8BA1_u7B97_u6846_u67B6"><a href="#u56FE_u8BA1_u7B97_u6846_u67B6" class="headerlink" title="图计算框架"></a>图计算框架</h3><ul>
<li>Spark Graphx</li>
<li>PowerGraph</li>
<li>Giraph</li>
<li>Neo4j</li>
</ul>
<h3 id="u5927_u89C4_u6A21_u673A_u5668_u5B66_u4E60"><a href="#u5927_u89C4_u6A21_u673A_u5668_u5B66_u4E60" class="headerlink" title="大规模机器学习"></a>大规模机器学习</h3><ul>
<li>Spark MLlib</li>
<li>Mahout</li>
<li>PredictionIO</li>
</ul>
<h3 id="u641C_u7D22_u5F15_u64CE"><a href="#u641C_u7D22_u5F15_u64CE" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><ul>
<li>Lucene</li>
<li>Solr</li>
<li>ElasticSearch</li>
<li>Sphinx</li>
<li>SenseiDB</li>
</ul>
<h3 id="IaaS"><a href="#IaaS" class="headerlink" title="IaaS"></a>IaaS</h3><ul>
<li>OpenStack</li>
<li>Docker </li>
<li>Kubernetes(容器调度管理)</li>
</ul>
<h3 id="u57FA_u7840_u7ED3_u6784"><a href="#u57FA_u7840_u7ED3_u6784" class="headerlink" title="基础结构"></a>基础结构</h3><ul>
<li>LevelDB</li>
<li>SSTable(BigTable基础)</li>
<li>RecordIO(文件格式)</li>
<li>Flat Buffer(Google, 高效、跨平台的序列化库)</li>
<li>ProtocolBuffers(Google, 数据描述语言，类似于XML能够将结构化数据序列化，可用于数据存储、通信协议等方面)</li>
<li>Consistent Hashing</li>
<li>Netty(提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序)</li>
<li>BloomFilter</li>
</ul>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.36dsj.com/archives/25042" target="_blank" rel="external">http://www.36dsj.com/archives/25042</a><br><a href="http://www.csdn.net/article/2015-09-11/2825674" target="_blank" rel="external">http://www.csdn.net/article/2015-09-11/2825674</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5206_u5E03_u5F0F_u6587_u4EF6_u7CFB_u7EDF"><a href="#u5206_u5E03_u5F0F_u6587_u4EF6_u7CFB_u7EDF" class="headerlink" title="分布式文件系统"><]]>
    </summary>
    
      <category term="大数据" scheme="http://paranoidq.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="攻略" scheme="http://paranoidq.github.io/tags/%E6%94%BB%E7%95%A5/"/>
    
      <category term="top" scheme="http://paranoidq.github.io/tags/top/"/>
    
      <category term="大数据" scheme="http://paranoidq.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SoftReference及其缓存应用]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/java-implementing-softhashmap/"/>
    <id>http://paranoidq.github.io/2016/05/27/java-implementing-softhashmap/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u53C2_u8003_u539F_u6587"><a href="#u53C2_u8003_u539F_u6587" class="headerlink" title="参考原文"></a>参考原文</h3><p><a href="http://www.javaspecialists.eu/archive/Issue015.html" target="_blank" rel="external">http://www.javaspecialists.eu/archive/Issue015.html</a></p>
<h3 id="SoftReference"><a href="#SoftReference" class="headerlink" title="SoftReference"></a>SoftReference</h3><h4 id="Strong_Reference"><a href="#Strong_Reference" class="headerlink" title="Strong Reference"></a>Strong Reference</h4><p>首先解释强引用，是Java默认的引用形式，即一个对象被一个变量直接引用的情况，如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object o = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure></p>
<p>这种情况下，对象是不会被GC清除的，除非变量的引用解除（例如超出作用域之后，变量被清空）。</p>
<h4 id="WeakReference"><a href="#WeakReference" class="headerlink" title="WeakReference"></a>WeakReference</h4><p>WeakReference是对普通引用的封装，表明一个对象被一个变量弱引用。与强引用不同的是，弱引用的对象如果没有其他的强引用指向它，那么GC依然会回收它。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WeakReference&lt;Object&gt; wr = <span class="keyword">new</span> WeakReference&lt;Object&gt;()</span><br></pre></td></tr></table></figure></p>
<h4 id="WeakHashMap"><a href="#WeakHashMap" class="headerlink" title="WeakHashMap"></a>WeakHashMap</h4><p>设计一个缓存时，需要将缓存的对象保存在一个map中，这里如果普通的HashMap存在问题，可能导致内存OOM。原因在于HashMap保存的是强引用，即使缓存对象在客户端的引用失效了，由于HashMap强引用的存在，这个缓存对象依然不会被GC回收。这就导致如果长时间读写HashMap缓存，会产生OOM。<br>Sun提供的解决方案是：WeakHashMap。WeakHashMap的key是以WeakReference的形式存在的，一旦这个key对象在程序中没有了其他强引用，那么GC就会在后续考虑回收整个entry，从而保证内存不会一直被这些已经没有用的缓存对象填满。</p>
<p>WeakHashMap的问题在于，实际上作为一个缓存应用，还是希望缓存的对象尽可能多待会儿，也即并不希望一旦没有人使用缓存对象，就立马让GC回收，万一之后马上有人要用了呢?!这里我们就引入了SoftReference来解决这个问题。</p>
<h4 id="SoftReference-1"><a href="#SoftReference-1" class="headerlink" title="SoftReference"></a>SoftReference</h4><p>比WeakReference更”weak”，即即使没有外部的强引用指向缓存对象，GC依然不回收。只有等到JVM的内存快满了的时候，才回收这些SoftReference对象。这不正是我们希望达到的缓存特性么？(值得一提的是，SUN没有提供这种比WeakHashMap更合理的缓存实现形式，不知为何)</p>
<p>当软可及对象被回收之后，虽然这个SoftReference对象的get()方法返回null,但这个SoftReference对象已经不再具有存在的价值，需要一个适当的清除机制，避免大量SoftReference对象带来的内存泄漏<br>Soft引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中，关联的方法例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReferenceQueue queue = <span class="keyword">new</span>  ReferenceQueue();  </span><br><span class="line">SoftReference  ref=<span class="keyword">new</span>  SoftReference(aMyObject, queue);</span><br></pre></td></tr></table></figure></p>
<p>那么当这个SoftReference所软引用的aMyOhject被垃圾收集器回收的同时，ref所强引用的SoftReference对象被列入ReferenceQueue。也就是说，ReferenceQueue中保存的对象是Reference对象，而且是已经失去了它所软引用的对象的Reference对象。另外从ReferenceQueue这个名字也可以看出，它是一个队列，当我们调用它的poll()方法的时候，如果这个队列中不是空队列，那么将返回队列前面的那个Reference对象。</p>
<p>清除的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SoftReference ref = <span class="keyword">null</span>;  </span><br><span class="line"><span class="keyword">while</span> ((ref = (SoftReference) q.poll()) != <span class="keyword">null</span>) &#123;  </span><br><span class="line">    <span class="comment">// 清除ref  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="u6446_u8131GC_u63A7_u5236_uFF0C_u7528SoftReference_u5B9E_u73B0_u4E00_u4E2A_u66F4_u9002_u5408_u7F13_u5B58_u7684HashMap"><a href="#u6446_u8131GC_u63A7_u5236_uFF0C_u7528SoftReference_u5B9E_u73B0_u4E00_u4E2A_u66F4_u9002_u5408_u7F13_u5B58_u7684HashMap" class="headerlink" title="摆脱GC控制，用SoftReference实现一个更适合缓存的HashMap"></a>摆脱GC控制，用SoftReference实现一个更适合缓存的HashMap</h3><h4 id="u5B9E_u73B0_u7684_u51E0_u70B9_u4F18_u5316_uFF1A"><a href="#u5B9E_u73B0_u7684_u51E0_u70B9_u4F18_u5316_uFF1A" class="headerlink" title="实现的几点优化："></a>实现的几点优化：</h4><ul>
<li>每次改变Map(put, remove, clear)或获取map size的时候都去遍历查看哪些SoftReference对象被GC回收了。如何检查？很简单，通过一个ReferenceQueue来实现。</li>
<li>自己设计一个LinkedList，保存最近被访问的缓存对象的强引用，避免被GC回收这些最近使用的对象。</li>
<li>使用装饰模式来包装原来的HashMap方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.util.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.ref.ReferenceQueue;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.SoftReference;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by paranoidq on 16/1/13.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoftHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K, SoftValue&lt;V&gt;&gt; hash = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// manually keep the hard reference to recently used objects</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> HARD_SIZE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedList&lt;V&gt; hardCache = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// track garbage collected objects</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReferenceQueue&lt;V&gt; queue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SoftHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SoftHashMap</span><span class="params">(<span class="keyword">int</span> hardSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.HARD_SIZE = hardSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        V result = <span class="keyword">null</span>;</span><br><span class="line">        SoftReference&lt;V&gt; softRef = hash.get(key);</span><br><span class="line">        <span class="keyword">if</span> (softRef != <span class="keyword">null</span>) &#123;</span><br><span class="line">            result = softRef.get();</span><br><span class="line">            <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">                hash.remove(key);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                hardCache.addFirst(result);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (hardCache.size() &gt; HARD_SIZE) &#123;</span><br><span class="line">                hardCache.removeLast();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        processQueue();</span><br><span class="line">        SoftValue&lt;V&gt; sv = hash.put(key, <span class="keyword">new</span> SoftValue&lt;&gt;(key, value, queue));</span><br><span class="line">        <span class="keyword">if</span> (sv == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> sv.get();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        processQueue(); <span class="comment">// throw out garbage collected values first</span></span><br><span class="line">        SoftValue&lt;V&gt; sv = hash.remove(key);</span><br><span class="line">        <span class="keyword">if</span> (sv == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> sv.get();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        hardCache.clear();</span><br><span class="line">        processQueue(); <span class="comment">// throw out garbage collected values</span></span><br><span class="line">        hash.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        processQueue(); <span class="comment">// throw out garbage collected values first</span></span><br><span class="line">        <span class="keyword">return</span> hash.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Here we go through the ReferenceQueue and remove garbage</span><br><span class="line">    collected SoftValue objects from the HashMap by looking them</span><br><span class="line">    up using the SoftValue.key data member. */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SoftValue&lt;V&gt; sv;</span><br><span class="line">        <span class="keyword">while</span> ((sv = (SoftValue&lt;V&gt;)queue.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(sv.key + <span class="string">"="</span> + sv.get() + <span class="string">", and has been collected by GC."</span>);</span><br><span class="line">            hash.remove(sv.key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** We define our own subclass of SoftReference which contains</span><br><span class="line">    not only the value but also the key to make it easier to find</span><br><span class="line">    the entry in the HashMap after it's been garbage collected. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SoftValue</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">SoftReference</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Object key;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SoftValue</span><span class="params">(Object key, V value, ReferenceQueue&lt;V&gt; q)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(value, q);</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Entry&lt;K, V&gt;&gt; entrySet() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">    test</span><br><span class="line">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Map&lt;String, Integer&gt; map)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"One="</span> + map.get(<span class="string">"One"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Two="</span> + map.get(<span class="string">"Two"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Three="</span> + map.get(<span class="string">"Three"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Four="</span> + map.get(<span class="string">"Four"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Five="</span> + map.get(<span class="string">"Five"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testMap</span><span class="params">(Map&lt;String, Integer&gt; map)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Testing "</span> + map.getClass());</span><br><span class="line">        map.put(<span class="string">"One"</span>, <span class="keyword">new</span> Integer(<span class="number">1</span>));</span><br><span class="line">        map.put(<span class="string">"Two"</span>, <span class="keyword">new</span> Integer(<span class="number">2</span>));</span><br><span class="line">        map.put(<span class="string">"Three"</span>, <span class="keyword">new</span> Integer(<span class="number">3</span>));</span><br><span class="line">        map.put(<span class="string">"Four"</span>, <span class="keyword">new</span> Integer(<span class="number">4</span>));</span><br><span class="line">        map.put(<span class="string">"Five"</span>, <span class="keyword">new</span> Integer(<span class="number">5</span>));</span><br><span class="line">        print(map);</span><br><span class="line">        <span class="comment">// 注意，这里直接写10MB的话，无法满足测试条件</span></span><br><span class="line">        <span class="comment">//byte[] block = new byte[11*_1MB]; // 10 MB</span></span><br><span class="line">        <span class="keyword">byte</span>[][] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            bs[i] = <span class="keyword">new</span> <span class="keyword">byte</span>[_1MB];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        print(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//testMap(new HashMap());</span></span><br><span class="line">        testMap(<span class="keyword">new</span> SoftHashMap(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5173_u4E8E_u6D4B_u8BD5_u7A0B_u5E8F_u7684_u51E0_u70B9_u8BF4_u660E_3A"><a href="#u5173_u4E8E_u6D4B_u8BD5_u7A0B_u5E8F_u7684_u51E0_u70B9_u8BF4_u660E_3A" class="headerlink" title="关于测试程序的几点说明:"></a>关于测试程序的几点说明:</h4><ol>
<li><p><code>byte[] block = new byte[11*_1MB]</code>希望占用JVM空间，然后触发GC回收SoftReference的缓存对象，但是并不成功。原因在于:<br>大对象直接在老年代分配，而不会占用Eden空间，也就是Map的存储空间。从这张图可以看出，确实是占用了Old空间，而不是Eden。图中7、8行分别是OC(老年代总空间)和OU(老年代使用空间)。</p>
<p><img src="/img/2016-1-13-0.png" alt="header"><img src="/img/2016-1-13-1.png" alt="old"></p>
<p>并且由于有强引用的存在，因此虽然Old快满了，GC却无法回收。导致实际测试中，没有任何GC，然后直接爆OOM，虽然Eden和Survivor还有很多空间。（可见无法回收的大对象非常消耗JVM）</p>
</li>
<li><p>正确的方法是，逐步添加1MB的对象。这样保证对象确实会占用年轻代的空间(Eden和Survivor)。如图，产生了minorGC和FullGC，证明Map中的对象被GC清除了。并且，fullGC之后，bytes对象被移到了老年代中，占用了8906KB的空间。还有大约1MB在Eden区中。<br><img src="/img/2016-1-13-0.png" alt="header"><img src="/img/2016-1-13-2.png" alt="eden"><br><img src="/img/2016-1-13-3.png" alt="eden"></p>
</li>
<li><p>我们运行程序的结果也表明，确实SoftHashMap的前面几个对象在JVM内存不足的时候被GC回收了。运行程序的JVM参数：<code>-Xms15m -Xmx15m</code>。也可以加上<code>--verbose:gc</code>在console中打印GC情况。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Testing class me.util.cache.SoftHashMap</span><br><span class="line">One=1</span><br><span class="line">Two=2</span><br><span class="line">Three=3</span><br><span class="line">Four=4  </span><br><span class="line">Five=5</span><br><span class="line"></span><br><span class="line">Three=null, and has been collected by GC.</span><br><span class="line">Two=null, and has been collected by GC.</span><br><span class="line">One=null, and has been collected by GC.</span><br><span class="line"></span><br><span class="line">One=null</span><br><span class="line">Two=null</span><br><span class="line">Three=null</span><br><span class="line">Four=4</span><br><span class="line">Five=5</span><br></pre></td></tr></table></figure>
</li>
<li><p>如何监控JVM的使用情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jps # 找到运行的java程序的vid</span><br><span class="line">jstat -gc [vid] 1000  # 每1s显示一次</span><br></pre></td></tr></table></figure>
<p>关于jstat输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> S0C: Current survivor space 0 capacity (kB).</span><br><span class="line"></span><br><span class="line">S1C: Current survivor space 1 capacity (kB).</span><br><span class="line"></span><br><span class="line">S0U: Survivor space 0 utilization (kB).</span><br><span class="line"></span><br><span class="line">S1U: Survivor space 1 utilization (kB).</span><br><span class="line"></span><br><span class="line">EC: Current eden space capacity (kB).</span><br><span class="line"></span><br><span class="line">EU: Eden space utilization (kB).</span><br><span class="line"></span><br><span class="line">OC: Current old space capacity (kB).</span><br><span class="line"></span><br><span class="line">OU: Old space utilization (kB).</span><br><span class="line"></span><br><span class="line">MC: Metaspace capacity (kB).</span><br><span class="line"></span><br><span class="line">MU: Metacspace utilization (kB).</span><br><span class="line"></span><br><span class="line">CCSC: Compressed class space capacity (kB).</span><br><span class="line"></span><br><span class="line">CCSU: Compressed class space used (kB).</span><br><span class="line"></span><br><span class="line">YGC: Number of young generation garbage collection events.</span><br><span class="line"></span><br><span class="line">YGCT: Young generation garbage collection time.</span><br><span class="line"></span><br><span class="line">FGC: Number of full GC events.</span><br><span class="line"></span><br><span class="line">FGCT: Full garbage collection time.</span><br><span class="line"></span><br><span class="line">GCT: Total garbage collection time.</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://san-yun.iteye.com/blog/1683558" target="_blank" rel="external">Java Reference</a><br><a href="https://docs.oracle.com/javase/7/docs/api/java/lang/ref/SoftReference.html" target="_blank" rel="external">SoftReference</a><br><a href="http://www.cnblogs.com/zhguang/p/Java-JVM-GC.html" target="_blank" rel="external">JVM监控与优化</a><br><a href="https://docs.oracle.com.javase/8/docs/technotes/tools/unix/jstat.html" target="_blank" rel="external">Oracle jstat</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u53C2_u8003_u539F_u6587"><a href="#u53C2_u8003_u539F_u6587" class="headerlink" title="参考原文"></a>参考原文</h3><p><a href="http://www.java]]>
    </summary>
    
      <category term="java" scheme="http://paranoidq.github.io/tags/java/"/>
    
      <category term="softreference" scheme="http://paranoidq.github.io/tags/softreference/"/>
    
      <category term="缓存" scheme="http://paranoidq.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="java" scheme="http://paranoidq.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac中如何查找Java的路径]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/Mac-java-config/"/>
    <id>http://paranoidq.github.io/2016/05/27/Mac-java-config/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u65B9_u6CD51_uFF1A"><a href="#u65B9_u6CD51_uFF1A" class="headerlink" title="方法1："></a>方法1：</h3><p>最直接的方法，运行以下命令可以列出系统的default java版本和所有备选的java版本<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/jav<span class="built_in">a_home</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="u65B9_u6CD52_uFF1A"><a href="#u65B9_u6CD52_uFF1A" class="headerlink" title="方法2："></a>方法2：</h3><p>step-wise的方法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> java</span><br></pre></td></tr></table></figure>
<p>如果输出的时/usr/bin/java, 证明是链接，需要找到链接的source<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls <span class="_">-l</span> `<span class="built_in">which</span> java`</span><br></pre></td></tr></table></figure></p>
<p>输出为实际的java安装路径: <code>rwxr-xr-x  1 root  wheel  74 11 25 13:36 /usr/bin/java -&gt; /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java</code></p>
<p>如果/usr/bin/java指向的仍然是一个symbolic link, 那么继续执行以下命令，直到找到source为止 </p>
<p>[注]</p>
<p>ls -l ` which java`</p>
<p>单引号把Linux命令视为字符集合。反引号会强迫执行Linux命令。和<code>$()</code>一样。在执行一条命令时，会先将其中或者是<code>$()</code> 中的语句当作命令执行一遍，再将结果加入到外层命令中执行</p>
<h3 id="u53C2_u8003_uFF1A"><a href="#u53C2_u8003_uFF1A" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://stackoverflow.com/questions/18144660/what-is-path-of-jdk-on-mac" target="_blank" rel="external">http://stackoverflow.com/questions/18144660/what-is-path-of-jdk-on-mac</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u65B9_u6CD51_uFF1A"><a href="#u65B9_u6CD51_uFF1A" class="headerlink" title="方法1："></a>方法1：</h3><p>最直接的方法，运行以下命令可以列出系统的default java版本和所有备选的java版本<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/jav<span class="built_in">a_home</span></span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="mac" scheme="http://paranoidq.github.io/tags/mac/"/>
    
      <category term="java" scheme="http://paranoidq.github.io/tags/java/"/>
    
      <category term="碎片" scheme="http://paranoidq.github.io/tags/%E7%A2%8E%E7%89%87/"/>
    
      <category term="java" scheme="http://paranoidq.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vim 插件NERDTree命令]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/NERDTree-commands/"/>
    <id>http://paranoidq.github.io/2016/05/27/NERDTree-commands/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctrl + <span class="keyword">w</span> + <span class="keyword">h</span>    光标 focus 左侧树形目录</span><br><span class="line">ctrl + <span class="keyword">w</span> + <span class="keyword">l</span>    光标 focus 右侧文件显示窗口</span><br><span class="line">ctrl + <span class="keyword">w</span> + <span class="keyword">w</span>    光标自动在左右侧窗口切换 #！！！</span><br><span class="line">ctrl + <span class="keyword">w</span> + <span class="keyword">r</span>    移动当前窗口的布局位置</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">o       在已有窗口中打开文件、目录或书签，并跳到该窗口</span><br><span class="line">go      在已有窗口 中打开文件、目录或书签，但不跳到该窗口</span><br><span class="line">t       在新 Tab 中打开选中文件/书签，并跳到新 Tab</span><br><span class="line">T       在新 Tab 中打开选中文件/书签，但不跳到新 Tab</span><br><span class="line">i       split 一个新窗口打开选中文件，并跳到该窗口</span><br><span class="line">gi      split 一个新窗口打开选中文件，但不跳到该窗口</span><br><span class="line"><span class="keyword">s</span>       vsplit 一个新窗口打开选中文件，并跳到该窗口</span><br><span class="line">gs      vsplit 一个新 窗口打开选中文件，但不跳到该窗口</span><br><span class="line">!       执行当前文件</span><br><span class="line">O       递归打开选中 结点下的所有目录</span><br><span class="line"><span class="keyword">x</span>       合拢选中结点的父目录</span><br><span class="line"><span class="keyword">X</span>       递归 合拢选中结点下的所有目录</span><br><span class="line">e       Edit the current dif</span><br><span class="line"></span><br><span class="line"># 双击    相当于 NERDTree-o (Mac下无效...)</span><br><span class="line"># 中键    对文件相当于 NERDTree-i，对目录相当于 NERDTree-e</span><br><span class="line"></span><br><span class="line"><span class="keyword">D</span>       删除当前书签</span><br><span class="line"></span><br><span class="line">P       跳到根结点</span><br><span class="line">p       跳到父结点</span><br><span class="line"><span class="keyword">K</span>       跳到当前目录下同级的第一个结点</span><br><span class="line"><span class="keyword">J</span>       跳到当前目录下同级的最后一个结点</span><br><span class="line"><span class="keyword">k</span>       跳到当前目录下同级的前一个结点</span><br><span class="line"><span class="keyword">j</span>       跳到当前目录下同级的后一个结点</span><br><span class="line"></span><br><span class="line">C       将选中目录或选中文件的父目录设为根结点</span><br><span class="line">u       将当前根结点的父目录设为根目录，并变成合拢原根结点</span><br><span class="line">U       将当前根结点的父目录设为根目录，但保持展开原根结点</span><br><span class="line"><span class="keyword">r</span>       递归刷新选中目录</span><br><span class="line"><span class="keyword">R</span>       递归刷新根结点</span><br><span class="line">m       显示文件系统菜单 #！！！然后根据提示进行文件的操作如新建，重命名等</span><br><span class="line">cd      将 CWD 设为选中目录</span><br><span class="line"></span><br><span class="line">I       切换是否显示隐藏文件</span><br><span class="line">f       切换是否使用文件过滤器</span><br><span class="line">F       切换是否显示文件</span><br><span class="line">B       切换是否显示书签</span><br><span class="line"></span><br><span class="line"><span class="keyword">q</span>       关闭 NerdTree 窗口</span><br><span class="line">?       切换是否显示 Quick Help</span><br></pre></td></tr></table></figure>
<p>操作tab<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">tabnew</span> [++<span class="keyword">opt</span>选项] ［＋cmd］ 文件      建立对指定文件新的<span class="keyword">tab</span></span><br><span class="line">:<span class="keyword">tabc</span>   关闭当前的 <span class="keyword">tab</span></span><br><span class="line">:<span class="keyword">tabo</span>   关闭所有其他的 <span class="keyword">tab</span></span><br><span class="line">:<span class="keyword">tabs</span>   查看所有打开的 <span class="keyword">tab</span></span><br><span class="line">:<span class="keyword">tabp</span>   前一个 <span class="keyword">tab</span></span><br><span class="line">:<span class="keyword">tabn</span>   后一个 <span class="keyword">tab</span></span><br><span class="line"></span><br><span class="line">标准模式下：</span><br><span class="line">gT      前一个 <span class="keyword">tab</span></span><br><span class="line">gt      后一个 <span class="keyword">tab</span></span><br><span class="line"></span><br><span class="line">MacVim 还可以借助快捷键来完成 <span class="keyword">tab</span> 的关闭、切换</span><br><span class="line">cmd+<span class="keyword">w</span>   关闭当前的 <span class="keyword">tab</span></span><br><span class="line">cmd+&#123;   前一个 <span class="keyword">tab</span></span><br><span class="line">cmd+&#125;   后一个 <span class="keyword">tab</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctrl + <span class="keyword">w</span> + <span class="keyword">h</span>    光标 focus 左侧树形目录</span><br><span class="line">ctrl + <span class="keyword">w</span> + <span class="keyword">l</span>    光标 focus 右侧文件显示窗口</span><br><span class="line">ctrl + <span class="keyword">w</span> + <span class="keyword">w</span>    光标自动在左右侧窗口切换 #！！！</span><br><span class="line">ctrl + <span class="keyword">w</span> + <span class="keyword">r</span>    移动当前窗口的布局位置</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="linux" scheme="http://paranoidq.github.io/tags/linux/"/>
    
      <category term="vim" scheme="http://paranoidq.github.io/tags/vim/"/>
    
      <category term="nerdtree" scheme="http://paranoidq.github.io/tags/nerdtree/"/>
    
      <category term="linux" scheme="http://paranoidq.github.io/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python generator]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/Python-generator/"/>
    <id>http://paranoidq.github.io/2016/05/27/Python-generator/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="python_generator_u7684_u8BBE_u8BA1_u8003_u8651"><a href="#python_generator_u7684_u8BBE_u8BA1_u8003_u8651" class="headerlink" title="python generator的设计考虑"></a>python generator的设计考虑</h3><p>在一般的程序设计中，function的调用是这样的：从第一行开始，一种执行到return语句结束。这种模式有一个特点:</p>
<ol>
<li>单一入口（entry point), 无论调用多少次，都从函数第一行开始</li>
<li>无状态（Stateless），即函数的local变量每次都重新初始化，上一次被调用的状态丢失</li>
<li>return返回控制权给caller,除非再次调用，控制权不会回来。</li>
</ol>
<p>而在有些情况下，我们希望的函数可以：yield一些值，也即函数暂时交出控制权给caller,你暂时不要销毁我的本地变量一些状态，因为将来还需要caller返回控制权，我可以继续执行下去。这就是yield以及生成器的设计初衷。</p>
<a id="more"></a>
<p>generator需要负责两件事：</p>
<ol>
<li>向一个正常函数一行生成并返回值</li>
<li>保存并恢复自己在交出控制权前一刻的内部‘状态’</li>
</ol>
<p>正常的函数可以理解为subroutine,而generator可以理解为<a href="http://en.wikipedia.org/wiki/Coroutine" target="_blank" rel="external">coroutine</a>。但是python从语言层面并没有定义协程的概念。</p>
<h3 id="u4EC0_u4E48_u662Fgenerator"><a href="#u4EC0_u4E48_u662Fgenerator" class="headerlink" title="什么是generator"></a>什么是generator</h3><ol>
<li>generator就是一种迭代器（iterator)，满足迭代器的基本特性，即generator每次执行的时候只会生成一个value, 而不是全部生成</li>
<li>generator function是含有yield的function, 由它产生的迭代器叫做generator.</li>
<li>generator在返回值的时候使用yield，下次执行的时候从yield下一行开始执行，函数的上一次执行状态依然保留。</li>
<li>generator使用了与iterator相同的内建函数<code>next()</code>来获取下一个值，而next()又负责调用generator的<code>__next__()</code>。(这里可理解为python自动将带有yield的函数做了封装，使其成为了iterator) for循环隐式调用了next(generator)</li>
</ol>
<h3 id="u4EC0_u4E48_u662F_u8FED_u4EE3_u5668iterator_2C_u4EE5_u53CAiterable_u7C7B_u578B"><a href="#u4EC0_u4E48_u662F_u8FED_u4EE3_u5668iterator_2C_u4EE5_u53CAiterable_u7C7B_u578B" class="headerlink" title="什么是迭代器iterator,以及iterable类型"></a>什么是迭代器iterator,以及iterable类型</h3><ul>
<li>凡是可作用于for循环的对象都是Iterable类型；</li>
<li>凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；</li>
</ul>
<p>因此：</p>
<ol>
<li>list、dict、str等是Iterable但不是Iterator（因为没有next()函数，并且序列创建时就已知），不过可以通过iter()函数获得一个Iterator对象<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)), Iterator)  <span class="comment"># True</span></span><br><span class="line">isinstance([], Iterator)  <span class="comment"># False</span></span><br><span class="line">isinstance(&#123;&#125;, Iterator)  <span class="comment"># False</span></span><br><span class="line">isinstance(iter([]), Iterator)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为itertools.permutations生成的Permutations对象定义了`__next__()`函数和`__iter__()`函数，所以它具备Iterator的特性</span></span><br><span class="line">l = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">ll = itertools.permutations(l)</span><br><span class="line">isinstance(ll, Iterator)   <span class="comment"># True</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="python_generator_u7684_u51E0_u70B9_u6CE8_u610F"><a href="#python_generator_u7684_u51E0_u70B9_u6CE8_u610F" class="headerlink" title="python generator的几点注意"></a>python generator的几点注意</h3><ol>
<li>generator和generator function不同，g function是定义，generator是generator function的一个实例，一个g function可以根据参数的不同生成不同的generator，即使参数相同，产生的也是不同的generator实例。</li>
<li>generator只能迭代一次，再次迭代需要重新生成实例；并且只能向前迭代。</li>
<li>generator中可以有return语句，遇到return,则generator直接抛出StopItreation异常，结束迭代过程</li>
</ol>
<h3 id="u5982_u4F55_u521B_u5EFAgenerator"><a href="#u5982_u4F55_u521B_u5EFAgenerator" class="headerlink" title="如何创建generator"></a>如何创建generator</h3><ol>
<li><p>使用yield定义函数，然后用函数生成一个或多个generator实例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibs</span><span class="params">(iterations)</span>:</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; iterations:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fibs(<span class="number">10</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用生成器表达式</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">g = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>))</span><br><span class="line">print(g) <span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x101b35288&gt;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> g:</span><br><span class="line">    print(x)  <span class="comment"># 只能迭代一次</span></span><br><span class="line">print(isinstance(g, types.GeneratorType))  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意区分：生成器是不会直接算出所有结果的，而列表生成式则会直接计算所有结果，并且输出</span></span><br><span class="line">l = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">print(l) <span class="comment"># [0, 1, 4, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意区分： 用itertools可以将一个列表迭代器化，但通常这样做没有意义。当然，itertools可以用于复制，合并迭代器等，这些功能就比较有用了</span></span><br><span class="line">l = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">ll = itertools.permutations(l)</span><br><span class="line">print(ll)  <span class="comment"># &lt;itertools.permutations object at 0x1012e6a98&gt;</span></span><br><span class="line">print(list(ll))  <span class="comment"># 用list可以将迭代器的结果全都算出来</span></span><br><span class="line">print(isinstance(ll, Iterator))  <span class="comment"># True</span></span><br><span class="line">print(isinstance(ll, types.GeneratorType))  <span class="comment"># False, 并不是Generator</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="u4F7F_u7528yield_u7684_u597D_u5904"><a href="#u4F7F_u7528yield_u7684_u597D_u5904" class="headerlink" title="使用yield的好处"></a>使用yield的好处</h3><p>yield本质就是利用python内建的机制，生成一个迭代器。并且这个迭代器对应的函数的中间结果是python自动帮你维护的。简单来说，迭代器与yield的区别：</p>
<ol>
<li>迭代器需要构建类，实现相应的<code>next()</code>函数和<code>__iter__()</code>函数；而yield不需要</li>
<li>yield的中间结果由python机制保存，无需手动维护；而迭代器需要将函数功能封装为类，手动维护每次迭代的中间结果(也即手动维护<code>next()</code>函数与上一轮结果的关系)</li>
<li>迭代器本质上也是解耦了函数的计算过程和结果获取，但是其实现需要较复杂的编程维护；yield借助python的内建机制，实现了函数计算过程和结果获取的解耦。</li>
</ol>
<p>注意理解函数计算过程和结果获取的解耦。这里举个例子（来源于Python Cookbook1.3节）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.3 保留最后的N个元素</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(lines, pattern, history=<span class="number">5</span>)</span>:</span></span><br><span class="line">    previous_lines = deque(maxlen=history)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">if</span> pattern <span class="keyword">in</span> li:</span><br><span class="line">            <span class="keyword">yield</span> li, previous_lines</span><br><span class="line">            <span class="comment"># 使用yield可以将搜索过程和使用搜索结果的代码解耦,</span></span><br><span class="line">            <span class="comment"># 即不需要显示指定每一步的结果存储到容器中去</span></span><br><span class="line">        previous_lines.append(li)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">r'../../cookbook/somefile.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line, prevlines <span class="keyword">in</span> search(f, <span class="string">'python'</span>, <span class="number">5</span>):</span><br><span class="line">            <span class="keyword">for</span> pline <span class="keyword">in</span> prevlines:</span><br><span class="line">                print(pline, end=<span class="string">''</span>)</span><br><span class="line">            print(line, end=<span class="string">''</span>)</span><br><span class="line">            print(<span class="string">'-'</span> * <span class="number">20</span>)</span><br></pre></td></tr></table></figure></p>
<p>如果不用yield，调用search的函数就需要知道serch是如何保存结果的，map还是list还是set。当然你可以用迭代器去做，也能达到解耦的目的，但是为了解耦，迭代器需要额外定义一个类，显然增添了很多工作，不如yield来得方便。</p>
<h3 id="u4F7F_u7528yield_u7684_u573A_u666F_u548C_u4F8B_u5B50"><a href="#u4F7F_u7528yield_u7684_u573A_u666F_u548C_u4F8B_u5B50" class="headerlink" title="使用yield的场景和例子"></a>使用yield的场景和例子</h3><h4 id="u4F8B_u5B50"><a href="#u4F8B_u5B50" class="headerlink" title="例子"></a>例子</h4><p>参考文献2中提到的一个很好的例子：文件读取。如果直接对文件对象调用 read() 方法，会导致不可预测的内存占用。好的方法是利用固定长度的缓冲区来不断读取文件内容。通过 yield，我们不再需要编写读文件的迭代类，就可以轻松实现文件读取。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span><span class="params">(fpath)</span>:</span> </span><br><span class="line">   BLOCK_SIZE = <span class="number">1024</span> </span><br><span class="line">   <span class="keyword">with</span> open(fpath, <span class="string">'rb'</span>) <span class="keyword">as</span> f: </span><br><span class="line">       <span class="keyword">while</span> <span class="keyword">True</span>: </span><br><span class="line">           block = f.read(BLOCK_SIZE) </span><br><span class="line">           <span class="keyword">if</span> block: </span><br><span class="line">               <span class="keyword">yield</span> block </span><br><span class="line">           <span class="keyword">else</span>: </span><br><span class="line">               <span class="keyword">return</span></span><br></pre></td></tr></table></figure></p>
<h3 id="u5141_u8BB8_u5411generator_u4F20_u9012_u53C2_u6570_uFF0C_u5E76_u4E14_u968F_u7740_u8FED_u4EE3_u6539_u53D8"><a href="#u5141_u8BB8_u5411generator_u4F20_u9012_u53C2_u6570_uFF0C_u5E76_u4E14_u968F_u7740_u8FED_u4EE3_u6539_u53D8" class="headerlink" title="允许向generator传递参数，并且随着迭代改变"></a>允许向generator传递参数，并且随着迭代改变</h3><p><a href="http://www.python.org/dev/peps/pep-0342/" target="_blank" rel="external">PEP342</a> 规定可以向generator迭代过程中传递参数，（创建时传递参数很明显可以）</p>
<p><code>other = yield number</code> 意味着，yield number, 并且当调用者send给我number，同时将other设置为number。</p>
<p><strong>原则上必须至少send一次None，至于迭代过程中是否需要send，视情况而定。有时候至少需要send一次正常值，才能保证参数不为None，从而执行不会报错。本例就是这样的情况。</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_primes</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> is_prime(number):</span><br><span class="line">            number = <span class="keyword">yield</span> number</span><br><span class="line">        number += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_successive_primes</span><span class="params">(iterations, base=<span class="number">10</span>)</span>:</span></span><br><span class="line">    prime_generator = get_primes(base)</span><br><span class="line">    prime_generator.send(<span class="keyword">None</span>)</span><br><span class="line">    <span class="keyword">for</span> power <span class="keyword">in</span> range(iterations):</span><br><span class="line">        print(prime_generator.send(base ** power))</span><br></pre></td></tr></table></figure>
<p>这里的<code>send(None)</code>是必须的，否则会报错<code>TypeError: can&#39;t send non-None value to a just-started generator</code>。原文解释如下：</p>
<p> When you’re using send to “start” a generator (that is, execute the code from the first line of the generator function up to the first yield statement), you must send None. This makes sense, since by definition the generator hasn’t gotten to the first yield statement yet, so if we sent a real value there would be nothing to “receive” it. Once the generator is started, we can send values as we do above.</p>
<p>需要在先send一个None,让generator执行到yield的地方(实际上get_primes(base)中的base被None覆盖了)，然后第一个send的值才能被yield接受。这里的第一个send(None)相当于启动了生成器。</p>
<p><code>get_primes(base)</code>中的base被None覆盖了。经测试，将base替换为任意值都无关紧要，同时如果直接调用next(primer_generator)，则会报错：<code>Cannot use += for None and int(1)</code>，必须要send一个正常值才可以</p>
<h3 id="u66F4_u63A5_u8FD1_u73B0_u5B9E_u7684_u6848_u4F8B"><a href="#u66F4_u63A5_u8FD1_u73B0_u5B9E_u7684_u6848_u4F8B" class="headerlink" title="更接近现实的案例"></a>更接近现实的案例</h3><p>上述的例子基本在实际开发中很少写，这里给出一个更为接近实际的案例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Return 3 random integers between 0 and 9"""</span></span><br><span class="line">    <span class="keyword">return</span> random.sample(range(<span class="number">10</span>), <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consume</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Displays a running average across lists of integers sent to it"""</span></span><br><span class="line">    running_sum = <span class="number">0</span></span><br><span class="line">    data_items_seen = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data = <span class="keyword">yield</span></span><br><span class="line">        data_items_seen += len(data)</span><br><span class="line">        running_sum += sum(data)</span><br><span class="line">        print(<span class="string">'The running average is &#123;&#125;'</span>.format(running_sum / float(data_items_seen)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">produce</span><span class="params">(consumer)</span>:</span></span><br><span class="line">    <span class="string">"""Produces a set of values and forwards them to the pre-defined consumer</span><br><span class="line">    function"""</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data = get_data()</span><br><span class="line">        print(<span class="string">'Produced &#123;&#125;'</span>.format(data))</span><br><span class="line">        consumer.send(data)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    consumer = consume()</span><br><span class="line">    consumer.send(<span class="keyword">None</span>)</span><br><span class="line">    producer = produce(consumer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(<span class="string">'Producing...'</span>)</span><br><span class="line">        next(producer)</span><br></pre></td></tr></table></figure>
<h3 id="yield_u7684_u57FA_u672C_u539F_u7406"><a href="#yield_u7684_u57FA_u672C_u539F_u7406" class="headerlink" title="yield的基本原理"></a>yield的基本原理</h3><p>假设generator: g和调用g的函数caller,主要的流程：</p>
<ul>
<li>当caller调用到next(g)的时候，执行generator function</li>
<li>执行到yield时，返回控制权给caller，同时记录g的当前状态（‘state’）</li>
<li>caller获得控制权，并使用g返回的值</li>
<li>下一次调用next(g)的时候，g恢复上一次的state，并从yield的下一行开始继续执行</li>
<li>当next(g)调用时，如果g没有可以返回的值，抛出StopIteration异常，g结束</li>
</ul>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="http://pyzh.readthedocs.org/en/latest/the-python-yield-keyword-explained.html" target="_blank" rel="external">http://pyzh.readthedocs.org/en/latest/the-python-yield-keyword-explained.html</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/</a></li>
<li><a href="http://www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/" target="_blank" rel="external">Improve your python-yield and generators explained</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="python_generator_u7684_u8BBE_u8BA1_u8003_u8651"><a href="#python_generator_u7684_u8BBE_u8BA1_u8003_u8651" class="headerlink" title="python generator的设计考虑"></a>python generator的设计考虑</h3><p>在一般的程序设计中，function的调用是这样的：从第一行开始，一种执行到return语句结束。这种模式有一个特点:</p>
<ol>
<li>单一入口（entry point), 无论调用多少次，都从函数第一行开始</li>
<li>无状态（Stateless），即函数的local变量每次都重新初始化，上一次被调用的状态丢失</li>
<li>return返回控制权给caller,除非再次调用，控制权不会回来。</li>
</ol>
<p>而在有些情况下，我们希望的函数可以：yield一些值，也即函数暂时交出控制权给caller,你暂时不要销毁我的本地变量一些状态，因为将来还需要caller返回控制权，我可以继续执行下去。这就是yield以及生成器的设计初衷。</p>]]>
    
    </summary>
    
      <category term="python" scheme="http://paranoidq.github.io/tags/python/"/>
    
      <category term="generator" scheme="http://paranoidq.github.io/tags/generator/"/>
    
      <category term="python" scheme="http://paranoidq.github.io/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python decorator(译)]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/Python-decorator-explained/"/>
    <id>http://paranoidq.github.io/2016/05/27/Python-decorator-explained/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Python_u51FD_u6570_u5C31_u662F_u5BF9_u8C61"><a href="#Python_u51FD_u6570_u5C31_u662F_u5BF9_u8C61" class="headerlink" title="Python函数就是对象"></a>Python函数就是对象</h3><p>首先要理解python中函数就是object。一个例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shout</span><span class="params">(word=<span class="string">"yes"</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> word.capitalize()+<span class="string">"!"</span></span><br><span class="line"><span class="keyword">print</span> shout()</span><br><span class="line"><span class="comment"># outputs : 'Yes!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为function是对象，因此可以被赋值给变量。</span></span><br><span class="line"><span class="comment"># 注意这里没有用双括号，所以不是调用函数</span></span><br><span class="line">scream = shout</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用变量srceam调用函数</span></span><br><span class="line"><span class="keyword">print</span> scream()</span><br><span class="line"><span class="comment"># outputs : 'Yes!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除原来的函数名，同样可以利用scream调用函数</span></span><br><span class="line"><span class="keyword">del</span> shout</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> shout()</span><br><span class="line"><span class="keyword">except</span> NameError, e:</span><br><span class="line">    <span class="keyword">print</span> e</span><br><span class="line">    <span class="comment">#outputs: "name 'shout' is not defined"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> scream()</span><br><span class="line"><span class="comment"># outputs: 'Yes!'</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<blockquote>
<p>从上面可以看出，函数是对象，无论是定义时的名字shout，还是之后赋值的名字scream，都是变量，变量指向内存中的函数对象而已。</p>
</blockquote>
<p>其次注意，可以在一个函数中定义另一函数。例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 在函数中定义另一个函数， 并且立刻使用它</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whisper</span><span class="params">(word=<span class="string">"yes"</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> word.lower()+<span class="string">"..."</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> whisper()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当你调用talk的时候，whisper就会被在talk函数中调用</span></span><br><span class="line">talk()</span><br><span class="line"><span class="comment"># outputs: "yes..."</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  但是在外部无法访问whisper函数</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> whisper()</span><br><span class="line"><span class="keyword">except</span> NameError, e:</span><br><span class="line">    <span class="keyword">print</span> e</span><br><span class="line">    <span class="comment">#outputs : "name 'whisper' is not defined"*</span></span><br><span class="line">    <span class="comment">#Python's functions are objects</span></span><br></pre></td></tr></table></figure></p>
<p><strong>总结：</strong></p>
<ul>
<li>函数是对象，可以被赋值给变量</li>
<li>函数可以被定义在另一个函数中</li>
</ul>
<h3 id="u51FD_u6570_u5F15_u7528"><a href="#u51FD_u6570_u5F15_u7528" class="headerlink" title="函数引用"></a>函数引用</h3><p>根据part-1中的论述，意味着：<strong>函数可以返回另一个函数（的引用）</strong>。例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTalk</span><span class="params">(kind=<span class="string">"shout"</span>)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 同样在函数内部定义一些函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shout</span><span class="params">(word=<span class="string">"yes"</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> word.capitalize()+<span class="string">"!"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whisper</span><span class="params">(word=<span class="string">"yes"</span>)</span> :</span></span><br><span class="line">        <span class="keyword">return</span> word.lower()+<span class="string">"..."</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 试图返回函数，不用双括号，因为要返回的时函数对象</span></span><br><span class="line">    <span class="keyword">if</span> kind == <span class="string">"shout"</span>:</span><br><span class="line">        <span class="keyword">return</span> shout  </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> whisper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用getTalk（注意，是调用！），获取返回值，并赋值给变量</span></span><br><span class="line">talk = getTalk()      </span><br><span class="line"></span><br><span class="line"><span class="comment"># talk是一个function object，并且这个对象是getTalk返回的其中一个对象</span></span><br><span class="line"><span class="keyword">print</span> talk</span><br><span class="line"><span class="comment">#outputs : &lt;function shout at 0xb7ea817c&gt;</span></span><br><span class="line"><span class="keyword">print</span> talk()</span><br><span class="line"><span class="comment">#outputs : Yes!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当然你也可以不赋值，直接使用。</span></span><br><span class="line"><span class="keyword">print</span> getTalk(<span class="string">"whisper"</span>)()</span><br><span class="line"><span class="comment">#outputs : yes...</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">Further, 你可以将函数作为参数传递。例子</span><br><span class="line">```python</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doSomethingBefore</span><span class="params">(func)</span>:</span> </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"I do something before then I call the function you gave me"</span></span><br><span class="line">    <span class="keyword">print</span> func()</span><br><span class="line"></span><br><span class="line">doSomethingBefore(scream)</span><br><span class="line"><span class="comment">#outputs: </span></span><br><span class="line"><span class="comment">#I do something before then I call the function you gave me</span></span><br><span class="line"><span class="comment">#Yes!</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Handcrafted_decorators_28_u81EA_u5DF1_u5B9E_u73B0decorator_29"><a href="#Handcrafted_decorators_28_u81EA_u5DF1_u5B9E_u73B0decorator_29" class="headerlink" title="Handcrafted decorators(自己实现decorator)"></a>Handcrafted decorators(自己实现decorator)</h3><p><strong>什么是decorator</strong><br>一种包装器（wrapper），使得你不用修改函数本身就可以在函数执行前或执行后添加额外的代码。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># decorator是一个函数，它将另一个函数作为它的参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_shiny_new_decorator</span><span class="params">(a_function_to_decorate)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在decorator内部，它动态定义一个函数（wrapper）。这个函数包装在作为参数的函数外面，从而可以在原有函数执行前后执行一些额外的代码。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">the_wrapper_around_the_original_function</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 函数前执行的代码</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Before the function runs"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调用被装饰的函数</span></span><br><span class="line">        a_function_to_decorate()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 函数后执行的代码</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"After the function runs"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注意，被修饰的函数至今没有执行过！</span></span><br><span class="line">    <span class="comment"># 返回包装函数，其中包含了实际函数以及包装在前后的额外代码</span></span><br><span class="line">    <span class="keyword">return</span> the_wrapper_around_the_original_function</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设你定义了一个你之后不能修改的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_stand_alone_function</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"I am a stand alone function, don't you dare modify me"</span></span><br><span class="line"></span><br><span class="line">a_stand_alone_function() </span><br><span class="line"><span class="comment">#outputs: I am a stand alone function, don't you dare modify me</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是你想扩充一下上面函数的功能，如何做到？使用decorator包装一下。</span></span><br><span class="line">a_stand_alone_function_decorated = my_shiny_new_decorator(a_stand_alone_function)</span><br><span class="line"><span class="comment"># 调用返回的包装函数即可，在包装函数内部会执行原有函数</span></span><br><span class="line">a_stand_alone_function_decorated()</span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line"><span class="comment">#Before the function runs</span></span><br><span class="line"><span class="comment">#I am a stand alone function, don't you dare modify me</span></span><br><span class="line"><span class="comment">#After the function runs</span></span><br></pre></td></tr></table></figure>
<p>但是你想让它更机智一点：每次我调用<code>a_stand_alone_function</code>的时候，就会自行调用<code>a_stand_alone_function_decorated</code>，而不是我需要自己记住不去调用<code>a_stand_alone_function</code>。可以！覆盖<code>a_stand_alone_function</code>这个变量名就ok。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a_stand_alone_function = my_shiny_new_decorator(a_stand_alone_function)</span><br><span class="line">a_stand_alone_function()</span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line"><span class="comment">#Before the function runs</span></span><br><span class="line"><span class="comment">#I am a stand alone function, don't you dare modify me</span></span><br><span class="line"><span class="comment">#After the function runs</span></span><br></pre></td></tr></table></figure></p>
<p>以上就是decorator所做的事情了。简单吧！？</p>
<h3 id="Decorators_demystified_28_u66F4_u7B80_u4FBF_u5730_u4F7F_u7528decorator_29"><a href="#Decorators_demystified_28_u66F4_u7B80_u4FBF_u5730_u4F7F_u7528decorator_29" class="headerlink" title="Decorators demystified(更简便地使用decorator)"></a>Decorators demystified(更简便地使用decorator)</h3><p>使用<code>@</code>操作符。例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@my_shiny_new_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">another_stand_alone_function</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Leave me alone"</span></span><br><span class="line"></span><br><span class="line">another_stand_alone_function()  </span><br><span class="line"><span class="comment">#outputs:  </span></span><br><span class="line"><span class="comment">#Before the function runs</span></span><br><span class="line"><span class="comment">#Leave me alone</span></span><br><span class="line"><span class="comment">#After the function runs</span></span><br></pre></td></tr></table></figure></p>
<p>实际上，<code>@decorator</code>是<code>another_stand_alone_function = my_shiny_new_decorator(another_stand_alone_function)</code>的简写形式而已。</p>
<p>decorator只是包装设计模式的一种pyhon表达而已，python中其实还嵌入了其他设计模式，例如迭代器。</p>
<p>当然，你可以嵌套decorator：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bread</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"&lt;/''''''\&gt;"</span></span><br><span class="line">        func()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"&lt;\______/&gt;"</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ingredients</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"#tomatoes#"</span></span><br><span class="line">        func()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"~salad~"</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sandwich</span><span class="params">(food=<span class="string">"--ham--"</span>)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> food</span><br><span class="line"></span><br><span class="line">sandwich()</span><br><span class="line"><span class="comment">#outputs: --ham--</span></span><br><span class="line">sandwich = bread(ingredients(sandwich))</span><br><span class="line">sandwich()</span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line"><span class="comment">#&lt;/''''''\&gt;</span></span><br><span class="line"><span class="comment"># #tomatoes#</span></span><br><span class="line"><span class="comment"># --ham--</span></span><br><span class="line"><span class="comment"># ~salad~</span></span><br><span class="line"><span class="comment">#&lt;\______/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>用python的<code>@decorator</code>语法等价于：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@bread</span></span><br><span class="line"><span class="meta">@ingredients</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sandwich</span><span class="params">(food=<span class="string">"--ham--"</span>)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> food</span><br><span class="line"></span><br><span class="line">sandwich()</span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line"><span class="comment">#&lt;/''''''\&gt;</span></span><br><span class="line"><span class="comment"># #tomatoes#</span></span><br><span class="line"><span class="comment"># --ham--</span></span><br><span class="line"><span class="comment"># ~salad~</span></span><br><span class="line"><span class="comment">#&lt;\______/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>需要注意的时decorator的次序，最先声明的decorator被包装在最外面。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ingredients</span></span><br><span class="line"><span class="meta">@bread</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strange_sandwich</span><span class="params">(food=<span class="string">"--ham--"</span>)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> food</span><br><span class="line"></span><br><span class="line">strange_sandwich()</span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line"><span class="comment">##tomatoes#</span></span><br><span class="line"><span class="comment">#&lt;/''''''\&gt;</span></span><br><span class="line"><span class="comment"># --ham--</span></span><br><span class="line"><span class="comment">#&lt;\______/&gt;</span></span><br><span class="line"><span class="comment"># ~salad~</span></span><br></pre></td></tr></table></figure></p>
<h3 id="u7EE7_u7EED_u6DF1_u5165_uFF1A_u4F20_u9012_u53C2_u6570_u7ED9_u88AB_u5305_u88C5_u51FD_u6570"><a href="#u7EE7_u7EED_u6DF1_u5165_uFF1A_u4F20_u9012_u53C2_u6570_u7ED9_u88AB_u5305_u88C5_u51FD_u6570" class="headerlink" title="继续深入：传递参数给被包装函数"></a>继续深入：传递参数给被包装函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 很简单，你只需要让decorator中定义的包装函数传递参数即可</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_decorator_passing_arguments</span><span class="params">(function_to_decorate)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a_wrapper_accepting_arguments</span><span class="params">(arg1, arg2)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I got args! Look:"</span>, arg1, arg2</span><br><span class="line">        function_to_decorate(arg1, arg2)</span><br><span class="line">    <span class="keyword">return</span> a_wrapper_accepting_arguments</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当你调用返回的函数对象时，实际上是调用wrapper。</span></span><br><span class="line"><span class="comment"># 传递给wrapper的参数会被自动传递给里面被修饰的函数</span></span><br><span class="line"><span class="meta">@a_decorator_passing_arguments</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_full_name</span><span class="params">(first_name, last_name)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"My name is"</span>, first_name, last_name</span><br><span class="line">print_full_name(<span class="string">"Peter"</span>, <span class="string">"Venkman"</span>)</span><br><span class="line"><span class="comment"># outputs:</span></span><br><span class="line"><span class="comment">#I got args! Look: Peter Venkman</span></span><br><span class="line"><span class="comment">#My name is Peter Venkman</span></span><br></pre></td></tr></table></figure>
<h3 id="Decorating_methods_uFF08_u5305_u88C5_u7C7B_u7684_u65B9_u6CD5_uFF09"><a href="#Decorating_methods_uFF08_u5305_u88C5_u7C7B_u7684_u65B9_u6CD5_uFF09" class="headerlink" title="Decorating methods（包装类的方法）"></a>Decorating methods（包装类的方法）</h3><p>方法和一般函数一样处理，要注意一点：考虑self引用。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method_friendly_decorator</span><span class="params">(method_to_decorate)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(self, lie)</span>:</span></span><br><span class="line">        lie = lie - <span class="number">3</span> <span class="comment"># very friendly, decrease age even more :-)</span></span><br><span class="line">        <span class="keyword">return</span> method_to_decorate(self, lie)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lucy</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.age = <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @method_friendly_decorator</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayYourAge</span><span class="params">(self, lie)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am %s, what did you think?"</span> % (self.age + lie)</span><br><span class="line"></span><br><span class="line">l = Lucy()</span><br><span class="line">l.sayYourAge(<span class="number">-3</span>)</span><br><span class="line"><span class="comment">#outputs: I am 26, what did you think?</span></span><br></pre></td></tr></table></figure>
<h3 id="u5B9A_u4E49_u901A_u7528_u7684generator"><a href="#u5B9A_u4E49_u901A_u7528_u7684generator" class="headerlink" title="定义通用的generator"></a>定义通用的generator</h3><p>使用<code>*args</code>, <code>**kwargs</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_decorator_passing_arbitrary_arguments</span><span class="params">(function_to_decorate)</span>:</span></span><br><span class="line">    <span class="comment"># wrapper可以接受任何参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a_wrapper_accepting_arbitrary_arguments</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Do I have args?:"</span></span><br><span class="line">        <span class="keyword">print</span> args</span><br><span class="line">        <span class="keyword">print</span> kwargs</span><br><span class="line">    </span><br><span class="line">        function_to_decorate(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> a_wrapper_accepting_arbitrary_arguments</span><br><span class="line"></span><br><span class="line"><span class="meta">@a_decorator_passing_arbitrary_arguments</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_with_no_argument</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Python is cool, no argument here."</span></span><br><span class="line"></span><br><span class="line">function_with_no_argument()</span><br><span class="line"><span class="comment">#outputs</span></span><br><span class="line"><span class="comment">#Do I have args?:</span></span><br><span class="line"><span class="comment">#()</span></span><br><span class="line"><span class="comment">#&#123;&#125;</span></span><br><span class="line"><span class="comment">#Python is cool, no argument here.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@a_decorator_passing_arbitrary_arguments</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_with_arguments</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> a, b, c</span><br><span class="line"></span><br><span class="line">function_with_arguments(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment">#outputs</span></span><br><span class="line"><span class="comment">#Do I have args?:</span></span><br><span class="line"><span class="comment">#(1, 2, 3)</span></span><br><span class="line"><span class="comment">#&#123;&#125;</span></span><br><span class="line"><span class="comment">#1 2 3 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">@a_decorator_passing_arbitrary_arguments</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_with_named_arguments</span><span class="params">(a, b, c, platypus=<span class="string">"Why not ?"</span>)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Do %s, %s and %s like platypus? %s"</span> %\</span><br><span class="line">    (a, b, c, platypus)</span><br><span class="line"></span><br><span class="line">function_with_named_arguments(<span class="string">"Bill"</span>, <span class="string">"Linus"</span>, <span class="string">"Steve"</span>, platypus=<span class="string">"Indeed!"</span>)</span><br><span class="line"><span class="comment">#outputs</span></span><br><span class="line"><span class="comment">#Do I have args ? :</span></span><br><span class="line"><span class="comment">#('Bill', 'Linus', 'Steve')</span></span><br><span class="line"><span class="comment">#&#123;'platypus': 'Indeed!'&#125;</span></span><br><span class="line"><span class="comment">#Do Bill, Linus and Steve like platypus? Indeed!</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mary</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.age = <span class="number">31</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @a_decorator_passing_arbitrary_arguments</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayYourAge</span><span class="params">(self, lie=<span class="number">-3</span>)</span>:</span> <span class="comment"># You can now add a default value</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am %s, what did you think ?"</span> % (self.age + lie)</span><br><span class="line"></span><br><span class="line">m = Mary()</span><br><span class="line">m.sayYourAge()</span><br><span class="line"><span class="comment">#outputs</span></span><br><span class="line"><span class="comment"># Do I have args?:</span></span><br><span class="line"><span class="comment">#(&lt;__main__.Mary object at 0xb7d303ac&gt;,)</span></span><br><span class="line"><span class="comment">#&#123;&#125;</span></span><br><span class="line"><span class="comment">#I am 28, what did you think?</span></span><br></pre></td></tr></table></figure></p>
<h3 id="u4F20_u9012_u53C2_u6570_u7ED9decorator"><a href="#u4F20_u9012_u53C2_u6570_u7ED9decorator" class="headerlink" title="传递参数给decorator"></a>传递参数给decorator</h3><p>前面我们讨论了如何传递参数给被包装的函数，那么如何传递参数给decorator呢？<br>这有点困难，因为decorator需要一个函数对象作为参数，所以你不能直接把被包装函数的参数传递给decorator本身。</p>
<p>先讨论一个相关的问题：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># decorator是普通函数！</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"I am an ordinary function"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am function returned by the decorator"</span></span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_function</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"zzzzzzzz"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># my_decorator被调用了，因此其中的print被执行。</span></span><br><span class="line"><span class="comment"># 注意wrapper没有被执行！所以没有输出里面的内容以及lazy_function的内容</span></span><br><span class="line">decorated_function = my_decorator(lazy_function)</span><br><span class="line"><span class="comment">#outputs: I am an ordinary function</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同样，以`@`方式包装也会输出I am ...</span></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_function</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"zzzzzzzz"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#outputs: I am an ordinary function</span></span><br></pre></td></tr></table></figure></p>
<p>所以，当你使用<code>@decorator</code>的时候，你实际上在让python调用<code>decorator</code>这个变量所标示的函数。而这个label可以直接指向decorator，也可以不。</p>
<p>请看：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator_maker</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"I make decorators! I am executed only once: "</span>+\</span><br><span class="line">          <span class="string">"when you make me create a decorator."</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a decorator! I am executed only when you decorate a function."</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"I am the wrapper around the decorated function. "</span></span><br><span class="line">                  <span class="string">"I am called when you call the decorated function. "</span></span><br><span class="line">                  <span class="string">"As the wrapper, I return the RESULT of the decorated function."</span>)</span><br><span class="line">            <span class="keyword">return</span> func()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"As the decorator, I return the wrapped function."</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"As a decorator maker, I return a decorator"</span></span><br><span class="line">    <span class="keyword">return</span> my_decorator</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过decorator_maker创建一个decorator</span></span><br><span class="line">new_decorator = decorator_maker()       </span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line"><span class="comment">#I make decorators! I am executed only once: when you make me create a decorator.</span></span><br><span class="line"><span class="comment">#As a decorator maker, I return a decorator</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后我们利用decorator包装函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorated_function</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"I am the decorated function."</span></span><br><span class="line">decorated_function = new_decorator(decorated_function)</span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line"><span class="comment">#I am a decorator! I am executed only when you decorate a function.</span></span><br><span class="line"><span class="comment">#As the decorator, I return the wrapped function</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用包装后的函数</span></span><br><span class="line">decorated_function()</span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line"><span class="comment">#I am the wrapper around the decorated function. I am called when you call the decorated function.</span></span><br><span class="line"><span class="comment">#As the wrapper, I return the RESULT of the decorated function.</span></span><br><span class="line"><span class="comment">#I am the decorated function.</span></span><br></pre></td></tr></table></figure></p>
<p>我们继续简化我们的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorated_function</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"I am the decorated function."</span></span><br><span class="line">decorated_function = decorator_maker()(decorated_function)</span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line"><span class="comment">#I make decorators! I am executed only once: when you make me create a decorator.</span></span><br><span class="line"><span class="comment">#As a decorator maker, I return a decorator</span></span><br><span class="line"><span class="comment">#I am a decorator! I am executed only when you decorate a function.</span></span><br><span class="line"><span class="comment">#As the decorator, I return the wrapped function.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用包装后的函数</span></span><br><span class="line">decorated_function()    </span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line"><span class="comment">#I am the wrapper around the decorated function. I am called when you call the decorated function.</span></span><br><span class="line"><span class="comment">#As the wrapper, I return the RESULT of the decorated function.</span></span><br><span class="line"><span class="comment">#I am the decorated function.</span></span><br></pre></td></tr></table></figure></p>
<p>在进一步简短些：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @语法是一次函数调用+包装，不是简单的直接包装</span></span><br><span class="line"><span class="meta">@decorator_maker()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorated_function</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"I am the decorated function."</span></span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line"><span class="comment">#I make decorators! I am executed only once: when you make me create a decorator.</span></span><br><span class="line"><span class="comment">#As a decorator maker, I return a decorator</span></span><br><span class="line"><span class="comment">#I am a decorator! I am executed only when you decorate a function.</span></span><br><span class="line"><span class="comment">#As the decorator, I return the wrapped function.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Eventually: </span></span><br><span class="line">decorated_function()    </span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line"><span class="comment">#I am the wrapper around the decorated function. I am called when you call the decorated function.</span></span><br><span class="line"><span class="comment">#As the wrapper, I return the RESULT of the decorated function.</span></span><br><span class="line"><span class="comment">#I am the decorated function.</span></span><br></pre></td></tr></table></figure></p>
<p>我们利用<code>@</code>语法进行了一次函数调用，而不仅仅是像原来一样直接包装一个函数。而<code>@</code>进行函数调用返回后的decorator才是用来包装原有函数的！！！</p>
<p><strong>因此：如果我们可以定义一个能够动态生成decorator的函数，那么就可以通过这个函数传递参数给decorator了。</strong> 所以这里需要三层的嵌套，比之前的handcrafted decorator多了一层。这多出来的一层正是为了传递参数用的！</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator_maker_with_arguments</span><span class="params">(decorator_arg1, decorator_arg2)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"I make decorators! And I accept arguments:"</span>, decorator_arg1, decorator_arg2</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="comment"># 传递参数的能力源于闭包这个概念，请参阅：http://stackoverflow.com/questions/13857/can-you-explain-closures-as-they-relate-to-python</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am the decorator. Somehow you passed me arguments:"</span>, decorator_arg1, decorator_arg2</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 不要混淆decorator参数和函数参数，function_arg1/2是函数的参数</span></span><br><span class="line">        <span class="comment"># 作用是传递参数给真正的函数</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">(function_arg1, function_arg2)</span> :</span></span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"I am the wrapper around the decorated function.\n"</span></span><br><span class="line">                  <span class="string">"I can access all the variables\n"</span></span><br><span class="line">                  <span class="string">"\t- from the decorator: &#123;0&#125; &#123;1&#125;\n"</span></span><br><span class="line">                  <span class="string">"\t- from the function call: &#123;2&#125; &#123;3&#125;\n"</span></span><br><span class="line">                  <span class="string">"Then I can pass them to the decorated function"</span></span><br><span class="line">                  .format(decorator_arg1, decorator_arg2,</span><br><span class="line">                          function_arg1, function_arg2))</span><br><span class="line">            <span class="keyword">return</span> func(function_arg1, function_arg2)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> my_decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator_maker_with_arguments("Leonard", "Sheldon")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorated_function_with_arguments</span><span class="params">(function_arg1, function_arg2)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"I am the decorated function and only knows about my arguments: &#123;0&#125;"</span></span><br><span class="line">           <span class="string">" &#123;1&#125;"</span>.format(function_arg1, function_arg2))</span><br><span class="line"></span><br><span class="line">decorated_function_with_arguments(<span class="string">"Rajesh"</span>, <span class="string">"Howard"</span>)</span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line"><span class="comment">#I make decorators! And I accept arguments: Leonard Sheldon</span></span><br><span class="line"><span class="comment">#I am the decorator. Somehow you passed me arguments: Leonard Sheldon</span></span><br><span class="line"><span class="comment">#I am the wrapper around the decorated function. </span></span><br><span class="line"><span class="comment">#I can access all the variables </span></span><br><span class="line"><span class="comment">#   - from the decorator: Leonard Sheldon </span></span><br><span class="line"><span class="comment">#   - from the function call: Rajesh Howard </span></span><br><span class="line"><span class="comment">#Then I can pass them to the decorated function</span></span><br><span class="line"><span class="comment">#I am the decorated function and only knows about my arguments: Rajesh Howard</span></span><br></pre></td></tr></table></figure>
<p>当然你也可以同样用<code>*args</code>,和<code>**kwargs</code>来定义一个通用的decorator_maker。但是需要记住：<br>decorator只会被调用一次，一旦你用decorator装饰了一个函数之后，就不能再动态设定decorator的参数了。也就是，当你<code>import</code>的时候，函数就已经decoratored了。（？？？）</p>
<h3 id="Decorating_a_decorator"><a href="#Decorating_a_decorator" class="headerlink" title="Decorating a decorator"></a>Decorating a decorator</h3><p>Bonus, 让任何decorator接受任何参数（跟之前的方式一样）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator_with_args</span><span class="params">(decorator_to_enhance)</span>:</span></span><br><span class="line">    <span class="string">""" </span><br><span class="line">    这个函数用作decorator，它修饰另一个作为decorator的函数</span><br><span class="line">    这种方式使得任何decorator可以接受任意的参数了</span><br><span class="line">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 我们用同样的手段传递参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator_maker</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decorator_wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">            <span class="comment"># 我们返回原来的decorator，它只是一个普通的函数，只是有一点需要注意，返回的decorator必须限制为这样的签名，否则不会奏效。</span></span><br><span class="line">            <span class="keyword">return</span> decorator_to_enhance(func, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> decorator_wrapper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator_maker</span><br></pre></td></tr></table></figure>
<p>我们可以这样调用它：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义作为decorator的函数，并且用另一个decorator包装它。</span></span><br><span class="line"><span class="comment"># 记住，函数的签名必须是 'decorator(func, *args, **kwargs)'</span></span><br><span class="line"><span class="meta">@decorator_with_args </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorated_decorator</span><span class="params">(func, *args, **kwargs)</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(function_arg1, function_arg2)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Decorated with"</span>, args, kwargs</span><br><span class="line">        <span class="keyword">return</span> func(function_arg1, function_arg2)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后你就可以用你刚刚定义的decorated decorator去包装一个函数了</span></span><br><span class="line"><span class="meta">@decorated_decorator(42, 404, 1024)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorated_function</span><span class="params">(function_arg1, function_arg2)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Hello"</span>, function_arg1, function_arg2</span><br><span class="line"></span><br><span class="line">decorated_function(<span class="string">"Universe and"</span>, <span class="string">"everything"</span>)</span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line"><span class="comment">#Decorated with (42, 404, 1024) &#123;&#125;</span></span><br><span class="line"><span class="comment">#Hello Universe and everything</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Whoooot!</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Decorator_u6700_u4F73_u5B9E_u8DF5"><a href="#Decorator_u6700_u4F73_u5B9E_u8DF5" class="headerlink" title="Decorator最佳实践"></a>Decorator最佳实践</h3><p>几点关于decorator的注意：</p>
<ol>
<li><blockquote>
<p>python 2.4</p>
</blockquote>
</li>
<li>decorator会减慢函数调用的速度，不要滥用</li>
<li>不能un-decorate一个函数，一旦包装了之后，就不能解除了（即使可以，一般也不这么做）</li>
<li>decorator使得函数的调试变得困难</li>
</ol>
<p><code>functools.wraps()</code>（在python2.5版本引入）,它拷贝被包装函数的名字、模块和docstring到包装器中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For debugging, the stacktrace prints you the function __name__</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"foo"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> foo.__name__</span><br><span class="line"><span class="comment">#outputs: foo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># decorator会隐藏实际的函数名   </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"bar"</span></span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@bar</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"foo"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回的时wrapper。但是明明实际的函数是foo啊。</span></span><br><span class="line"><span class="keyword">print</span> foo.__name__</span><br><span class="line"><span class="comment">#outputs: wrapper</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># functools可以帮我们解决这个问题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="comment"># We say that "wrapper", is wrapping "func"</span></span><br><span class="line">    <span class="comment"># and the magic begins</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"bar"</span></span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@bar</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"foo"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> foo.__name__</span><br><span class="line"><span class="comment">#outputs: foo</span></span><br></pre></td></tr></table></figure></p>
<h3 id="decorator_u5230_u5E95_u6709_u4EC0_u4E48_u7528_u5904_uFF1F"><a href="#decorator_u5230_u5E95_u6709_u4EC0_u4E48_u7528_u5904_uFF1F" class="headerlink" title="decorator到底有什么用处？"></a>decorator到底有什么用处？</h3><p>典型的应用：</p>
<ol>
<li>为一个你不能修改的lib添加一些功能</li>
<li>用于调试</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">benchmark</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    A decorator that prints the time a function takes</span><br><span class="line">    to execute.</span><br><span class="line">    """</span></span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        t = time.clock()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">print</span> func.__name__, time.clock()-t</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logging</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    A decorator that logs the activity of the script.</span><br><span class="line">    (it actually just prints it, but it could be logging!)</span><br><span class="line">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">print</span> func.__name__, args, kwargs</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    A decorator that counts and prints the number of times a function has been executed</span><br><span class="line">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        wrapper.count = wrapper.count + <span class="number">1</span></span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"&#123;0&#125; has been used: &#123;1&#125;x"</span>.format(func.__name__, wrapper.count)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    wrapper.count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@counter</span></span><br><span class="line"><span class="meta">@benchmark</span></span><br><span class="line"><span class="meta">@logging</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_string</span><span class="params">(string)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> str(reversed(string))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> reverse_string(<span class="string">"Able was I ere I saw Elba"</span>)</span><br><span class="line"><span class="keyword">print</span> reverse_string(<span class="string">"A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line"><span class="comment">#reverse_string ('Able was I ere I saw Elba',) &#123;&#125;</span></span><br><span class="line"><span class="comment">#wrapper 0.0</span></span><br><span class="line"><span class="comment">#wrapper has been used: 1x </span></span><br><span class="line"><span class="comment">#ablE was I ere I saw elbA</span></span><br><span class="line"><span class="comment">#reverse_string ('A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!',) &#123;&#125;</span></span><br><span class="line"><span class="comment">#wrapper 0.0</span></span><br><span class="line"><span class="comment">#wrapper has been used: 2x</span></span><br><span class="line"><span class="comment">#!amanaP :lanac a ,noep a ,stah eros ,raj a ,hsac ,oloR a ,tur a ,mapS ,snip ,eperc a ,)lemac a ro( niaga gab ananab a ,gat a ,nat a ,gab ananab a ,gag a ,inoracam ,elacrep ,epins ,spam ,arutaroloc a ,shajar ,soreh ,atsap ,eonac a ,nalp a ,nam A</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@counter</span></span><br><span class="line"><span class="meta">@benchmark</span></span><br><span class="line"><span class="meta">@logging</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random_futurama_quote</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> urllib <span class="keyword">import</span> urlopen</span><br><span class="line">    result = urlopen(<span class="string">"http://subfusion.net/cgi-bin/quote.pl?quote=futurama"</span>).read()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        value = result.split(<span class="string">"&lt;br&gt;&lt;b&gt;&lt;hr&gt;&lt;br&gt;"</span>)[<span class="number">1</span>].split(<span class="string">"&lt;br&gt;&lt;br&gt;&lt;hr&gt;"</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> value.strip()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"No, I'm ... doesn't!"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> get_random_futurama_quote()</span><br><span class="line"><span class="keyword">print</span> get_random_futurama_quote()</span><br><span class="line"></span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line"><span class="comment">#get_random_futurama_quote () &#123;&#125;</span></span><br><span class="line"><span class="comment">#wrapper 0.02</span></span><br><span class="line"><span class="comment">#wrapper has been used: 1x</span></span><br><span class="line"><span class="comment">#The laws of science be a harsh mistress.</span></span><br><span class="line"><span class="comment">#get_random_futurama_quote () &#123;&#125;</span></span><br><span class="line"><span class="comment">#wrapper 0.01</span></span><br><span class="line"><span class="comment">#wrapper has been used: 2x</span></span><br><span class="line"><span class="comment">#Curse you, merciful Poseidon!</span></span><br></pre></td></tr></table></figure>
<p>另外，python自己就提供了一些decorators，例如：property, statismethod等</p>
<ul>
<li>Django利用decorators来管理caching和view的权限</li>
<li>Twisted to fake inlining asynchronous functions calls.（不懂==）</li>
</ul>
<p>decorator的应用值得好好进一步探索。</p>
<h3 id="u53C2_u8003_u8D44_u6599_uFF1A"><a href="#u53C2_u8003_u8D44_u6599_uFF1A" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484" target="_blank" rel="external">StackOverflow Answer</a><br><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431752945034eb82ac80a3e64b9bb4929b16eeed1eb9000" target="_blank" rel="external">函数的参数</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Python_u51FD_u6570_u5C31_u662F_u5BF9_u8C61"><a href="#Python_u51FD_u6570_u5C31_u662F_u5BF9_u8C61" class="headerlink" title="Python函数就是对象"></a>Python函数就是对象</h3><p>首先要理解python中函数就是object。一个例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shout</span><span class="params">(word=<span class="string">"yes"</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> word.capitalize()+<span class="string">"!"</span></span><br><span class="line"><span class="keyword">print</span> shout()</span><br><span class="line"><span class="comment"># outputs : 'Yes!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为function是对象，因此可以被赋值给变量。</span></span><br><span class="line"><span class="comment"># 注意这里没有用双括号，所以不是调用函数</span></span><br><span class="line">scream = shout</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用变量srceam调用函数</span></span><br><span class="line"><span class="keyword">print</span> scream()</span><br><span class="line"><span class="comment"># outputs : 'Yes!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除原来的函数名，同样可以利用scream调用函数</span></span><br><span class="line"><span class="keyword">del</span> shout</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> shout()</span><br><span class="line"><span class="keyword">except</span> NameError, e:</span><br><span class="line">    <span class="keyword">print</span> e</span><br><span class="line">    <span class="comment">#outputs: "name 'shout' is not defined"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> scream()</span><br><span class="line"><span class="comment"># outputs: 'Yes!'</span></span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="python" scheme="http://paranoidq.github.io/tags/python/"/>
    
      <category term="decorator" scheme="http://paranoidq.github.io/tags/decorator/"/>
    
      <category term="python" scheme="http://paranoidq.github.io/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python parameters]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/Python-parameters-explained/"/>
    <id>http://paranoidq.github.io/2016/05/27/Python-parameters-explained/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u63D0_u7EB2"><a href="#u63D0_u7EB2" class="headerlink" title="提纲"></a>提纲</h3><p>本文主要从以下几个方面分析python的参数机制：</p>
<ol>
<li>固定参数(位置参数)</li>
<li>默认参数</li>
<li>可变参数</li>
<li>关键字参数</li>
</ol>
<p>在每个部分中，我们区分<strong>函数的定义</strong>和<strong>函数的调用</strong>。<br>对于函数定义时的参数，我们称为parameter（形参）；对于函数调用时的参数，我们称之为argument(实参)。区分这两点对于解释清楚一些混淆的东西很重要</p>
<p>所以，以上的参数机制其实都是指的是函数定义时的形参，而不是调用时的实参！</p>
<a id="more"></a>
<h3 id="u4F4D_u7F6E_u53C2_u6570_positional_parameter_28_u56FA_u5B9A_u53C2_u6570_29"><a href="#u4F4D_u7F6E_u53C2_u6570_positional_parameter_28_u56FA_u5B9A_u53C2_u6570_29" class="headerlink" title="位置参数 positional parameter(固定参数)"></a>位置参数 positional parameter(固定参数)</h3><ol>
<li><p>函数定义时：其中的x,n 都是固定<strong>形参</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x, n)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>函数调用时：如果不指定名字，则传入的两个<strong>实参</strong>按照位置顺序依次赋给<strong>形参</strong>x和n</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func(<span class="string">'abc'</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>由于是位置参数，所以参数名在调用的时候是没有意义的，只有参数的顺序才有意义。因为形参会根据顺序依次匹配实参。</p>
<h3 id="u9ED8_u8BA4_u53C2_u6570_default_parameter"><a href="#u9ED8_u8BA4_u53C2_u6570_default_parameter" class="headerlink" title="默认参数 default parameter"></a>默认参数 default parameter</h3><p>如果不传递n的话，上面的调用会报错：缺少位置<strong>实参</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func(<span class="string">'abc'</span>)</span><br><span class="line"><span class="comment"># output: TypeError: func() missing 1 required positional argument: 'n'</span></span><br></pre></td></tr></table></figure></p>
<p>这时候就可以靠默认参数来帮助我们省事，不用每次都给默认形参传递实参了</p>
<ol>
<li><p>函数定义时：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x, n=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>注意点：</p>
<ul>
<li>默认参数定义<strong>必须</strong>在所有的位置参数之后，并且默认参数的后面不能再有位置参数</li>
<li>默认参数的必须指向不变的对象，否则会掉坑<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=[])</span>:</span></span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">'END'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">'END'</span>, <span class="string">'END'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L也是一个变量，</span></span><br><span class="line"><span class="comment"># 它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的[]了。</span></span><br><span class="line"><span class="comment"># 所以，定义默认参数要牢记一点：默认参数必须指向不变对象！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确的做法：通过None这个不变的默认参数来做</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>函数调用时：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以不提供默认参数的实参，也可以提供</span></span><br><span class="line">func(<span class="string">'abc'</span>)  </span><br><span class="line">func(<span class="string">'abc'</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment"># 对于多个默认参数的情况，如果按顺序提供，可以不指定默认形参的名字；</span></span><br><span class="line"><span class="comment"># 否则需指定名字</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(x, n=<span class="number">1</span>, m=<span class="number">2</span>)</span>:</span></span><br><span class="line">   <span class="keyword">pass</span></span><br><span class="line">func2(<span class="string">'abc'</span>, m=<span class="number">23</span>, n=<span class="number">24</span>)</span><br></pre></td></tr></table></figure>
<p>注意：不按顺序提供实参的情况仅仅适用于默认参数部分。也就是无论如何，必须先按顺序提供位置参数，之后提供的默认实参才有不按顺序一说。下面的调用是错误的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func(n=<span class="number">10</span>, <span class="string">'acb'</span>)</span><br><span class="line"><span class="comment"># output: SyntaxError: non-keyword arg after keyword arg</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="u53EF_u53D8_u53C2_u6570"><a href="#u53EF_u53D8_u53C2_u6570" class="headerlink" title="可变参数"></a>可变参数</h3><p>在定义函数的时候，传入的位置参数个数不确定的时候使用</p>
<p>不用可变参数怎么做？转化为list或tuple：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">calc([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">calc((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure></p>
<p>利用可变参数就可以直接传入，不需要显示转化了<code>calc(1, 2, 3)</code></p>
<ol>
<li><p>函数定义<br>使用*表达式即可：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></span><br><span class="line">    <span class="comment"># the same with above</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>函数调用：可以传入任意个数的实参，包括0个</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">calc(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于对已有的列表进行操作</span></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">calc(*nums)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>注意：函数调用的时候，实参做了拷贝，原有的实参不变！</p>
<p>可变参数可以同时定义在位置参数后面：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x, *args)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(args)</span><br><span class="line">func(<span class="string">'abc'</span>)</span><br><span class="line"><span class="comment"># output: 'abc' ()</span></span><br><span class="line">func(<span class="string">'abc'</span>, <span class="string">'efg'</span>) <span class="comment"># （2）</span></span><br><span class="line"><span class="comment"># output: 'abc' ('efg')</span></span><br><span class="line">func(<span class="string">'abc'</span>, *<span class="string">'efg'</span>) <span class="comment"># （3）</span></span><br><span class="line"><span class="comment"># output: 'abc', ('e', 'f', 'g')</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(x=<span class="string">'123'</span>, *args)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(args)</span><br><span class="line">func(<span class="string">'abc'</span>)</span><br><span class="line"><span class="comment"># output: 'abc' ()</span></span><br><span class="line">func(<span class="string">'abc'</span>, <span class="string">'efg'</span>) <span class="comment"># （4）</span></span><br><span class="line"><span class="comment"># output: 'abc' ('efg')</span></span><br><span class="line">func(<span class="string">'abc'</span>, *<span class="string">'efg'</span>) <span class="comment"># （5）</span></span><br><span class="line"><span class="comment"># output: 'c', ('f', 'g')</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>优先匹配位置参数, 无论有没有默认值。有默认值覆盖默认值，没有默认值赋值。剩下来的部分才给可变参数！</li>
<li>注意(2)和(3)调用方式的不同</li>
<li>注意(4)和(5)结果的不同</li>
</ul>
<h3 id="u5173_u952E_u5B57_u53C2_u6570_uFF08keyword_parameter_uFF09"><a href="#u5173_u952E_u5B57_u53C2_u6570_uFF08keyword_parameter_uFF09" class="headerlink" title="关键字参数（keyword parameter）"></a>关键字参数（keyword parameter）</h3><p>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。</p>
<ol>
<li><p>函数定义：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span></span><br><span class="line">   print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数调用：<br>可以只传入位置参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person(<span class="string">'Michael'</span>, <span class="number">30</span>)</span><br></pre></td></tr></table></figure>
<p>也可以传入任意个数任意名字的关键字实参</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person(<span class="string">'Bob'</span>, <span class="number">35</span>, city=<span class="string">'Beijing'</span>)</span><br><span class="line">person(<span class="string">'Adam'</span>, <span class="number">45</span>, gender=<span class="string">'M'</span>, job=<span class="string">'Engineer'</span>)</span><br></pre></td></tr></table></figure>
<p>传入dict的方式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br><span class="line">person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=extra[<span class="string">'city'</span>], job=extra[<span class="string">'job'</span>])</span><br><span class="line">person(<span class="string">'Jack'</span>, <span class="number">24</span>, **extra)</span><br></pre></td></tr></table></figure>
<p>注意：注意kw获得的dict是extra的一份拷贝，对kw的改动不会影响到函数外的extra</p>
</li>
</ol>
<h3 id="u547D_u540D_u5173_u952E_u5B57_u53C2_u6570"><a href="#u547D_u540D_u5173_u952E_u5B57_u53C2_u6570" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h3><p>如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数</p>
<ol>
<li><p>函数定义：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></span><br><span class="line">    print(name, age, city, job)</span><br></pre></td></tr></table></figure>
<p>定义时可以有缺省值：由于指定名字，所以带缺省值的parameter不关心顺序</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city=<span class="string">'beijing'</span>, job)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>函数调用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=<span class="string">'Beijing'</span>, job=<span class="string">'Engineer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须传入参数名(除非使用定义了的缺省值，连值也不传)，否则会报TypeError</span></span><br><span class="line">person(<span class="string">'Jack'</span>, <span class="number">24</span>, <span class="string">'Beijing'</span>, <span class="string">'Engineer'</span>)</span><br><span class="line">TypeError: person() takes <span class="number">2</span> positional arguments but <span class="number">4</span> were given</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="u53C2_u6570_u7684_u7EC4_u5408"><a href="#u53C2_u6570_u7684_u7EC4_u5408" class="headerlink" title="参数的组合"></a>参数的组合</h3><p>必须是如下顺序：<br><strong>必选参数、默认参数、可变参数/命名关键字参数和关键字参数</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(a, b, c=<span class="number">0</span>, *args, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'args ='</span>, args, <span class="string">'kw ='</span>, kw)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a, b, c=<span class="number">0</span>, *, d, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'d ='</span>, d, <span class="string">'kw ='</span>, kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, x=<span class="number">99</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;<span class="string">'x'</span>: <span class="number">99</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2(<span class="number">1</span>, <span class="number">2</span>, d=<span class="number">99</span>, ext=<span class="keyword">None</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> d = <span class="number">99</span> kw = &#123;<span class="string">'ext'</span>: <span class="keyword">None</span>&#125;</span><br></pre></td></tr></table></figure>
<p>另外，对于任意函数，都可以通过类似func(<em>args, *</em>kw)的形式调用它，无论它的参数是如何定义的</p>
<p>反之，接受任何参数的函数，可以定义为func(<em>args, *</em>kw)这种形式。这种定义并不好，实际上，没有通用的规则在一个接受任何参数的函数内部做处理。但是对于decorator等一些应用，接受任何参数的设定就非常有用，因为decorator不关心包装的函数参数是什么，它确实可能需要一个这样的机制来传参。</p>
<h3 id="u6CE8_u610F_u70B9_uFF1A"><a href="#u6CE8_u610F_u70B9_uFF1A" class="headerlink" title="注意点："></a>注意点：</h3><ol>
<li><p>关键字参数会覆盖位置参数的默认值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a=<span class="string">'a'</span>, b=<span class="string">'b'</span>, c=<span class="string">'c'</span>, **kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">'a:%s, b:%s, c:%s'</span> % (a, b, c))</span><br><span class="line">func(**&#123;<span class="string">'a'</span>: <span class="string">'z'</span>, <span class="string">'b'</span>: <span class="string">'d'</span>, <span class="string">'c'</span>: <span class="string">'r'</span>&#125;)  <span class="comment"># 关键字参数会覆盖前面的默认值</span></span><br><span class="line"><span class="comment"># output: a:z, b:d, c:r</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>关键字参数与默认参数不同</p>
<ul>
<li>在定义的适合，默认参数本质上还是给了默认值的位置参数，必须定义在关键字参数的前面；而关键字参数应该最后定义，并且需要<code>**</code>表达式</li>
<li>在调用时候，默认参数部分会优先匹配，匹配之后剩下来的才给关键字参数。所以在函数调用的时候谈论关键字参数实际上没有意义，它只是函数定义时的一个为了扩展用的占位符而已<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a=<span class="string">'a'</span>, b=<span class="string">'b'</span>, c=<span class="string">'c'</span>, **kwargs)</span>:</span></span><br><span class="line">    print(a, b, c)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"><span class="comment"># output: a b c &#123;&#125;</span></span><br><span class="line">func(**&#123;<span class="string">'a'</span>: <span class="string">'z'</span>, <span class="string">'b'</span>: <span class="string">'d'</span>, <span class="string">'c'</span>: <span class="string">'r'</span>&#125;)</span><br><span class="line"><span class="comment"># output: z d r &#123;&#125; # 注意，全部先匹配了默认参数</span></span><br><span class="line">func(**&#123;<span class="string">'a'</span>: <span class="string">'z'</span>, <span class="string">'b'</span>: <span class="string">'d'</span>, <span class="string">'c'</span>: <span class="string">'r'</span>, <span class="string">'d'</span>:<span class="string">'z'</span>&#125;)</span><br><span class="line"><span class="comment"># output: z d r &#123;'d': 'z'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以用kwargs为没有提供默认值的位置参数提供值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b=<span class="string">'b'</span>, c=<span class="string">'c'</span>, **kwargs)</span>:</span></span><br><span class="line">    print(a, b, c)</span><br><span class="line">    print(kwargs)</span><br><span class="line">func(**&#123;<span class="string">'a'</span>: <span class="string">'z'</span>, <span class="string">'b'</span>: <span class="string">'d'</span>, <span class="string">'c'</span>: <span class="string">'r'</span>&#125;)</span><br><span class="line"><span class="comment"># output: z d r &#123;&#125;</span></span><br><span class="line"><span class="comment"># 如果kwargs里面没有为a提供值，那么就会报TypeError了</span></span><br><span class="line">func(**&#123;<span class="string">'b'</span>: <span class="string">'d'</span>, <span class="string">'c'</span>: <span class="string">'r'</span>&#125;)</span><br><span class="line"><span class="comment"># output: TypeError: func() missing 1 required positional argument: 'a'</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h3 id="Best_Practices_3A"><a href="#Best_Practices_3A" class="headerlink" title="Best Practices:"></a>Best Practices:</h3><ol>
<li><p><a href="https://www.python.org/dev/peps/pep-3102/" target="_blank" rel="external">PEP-3102</a>: 定义了keyworkd-only 参数（本质就是命名关键字参数），避免模糊不清地被位置参数匹配。（”keyword-only” arguments: arguments that can only be supplied by keyword and which will never be automatically filled in by a positional argument）</p>
<p>有时候使用者希望函数可以接受可变参数，同时接受一些以keword形式传递的实参。如果不允许在可变参数后面定义named-keyword参数的话，唯一的解决办法是同时定义<code>*args</code>和<code>**kwargs</code>，然后手动抽取其中的一些entry。<br>Why? 看实参传递的顺序，non-keyword实参 &gt; keyword实参。所以如果定义在可变参数前，可能会被位置参数匹配掉(也就是不是真正意义上的keyword参数，而可能被解释器认为是带默认值的位置参数)。</p>
<p>PEP3102允许在可变参数后面定义regular parameter,作为keyword-only arguments。永远不会被位置参数匹配，必须指定名字。</p>
<p>定义方式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同时有可变参数存在， 可变参数会suck up所有的non-keyword实参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortwords</span><span class="params">(*wordlist, case_sensitive=False)</span>:</span></span><br><span class="line"><span class="comment"># 没有可变参数存在, * means不允许任何可变参数存在</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortwords2</span><span class="params">(*, case_sensitive)</span>:</span></span><br></pre></td></tr></table></figure>
<p>显然，case_sensitive只能以keyword的方式赋值，不会被位置参数匹配。</p>
</li>
</ol>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431752945034eb82ac80a3e64b9bb4929b16eeed1eb9000" target="_blank" rel="external">廖雪峰的Python教程</a></li>
<li><a href="https://www.python.org/dev/peps/pep-3102/" target="_blank" rel="external">PEP3102</a> </li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u63D0_u7EB2"><a href="#u63D0_u7EB2" class="headerlink" title="提纲"></a>提纲</h3><p>本文主要从以下几个方面分析python的参数机制：</p>
<ol>
<li>固定参数(位置参数)</li>
<li>默认参数</li>
<li>可变参数</li>
<li>关键字参数</li>
</ol>
<p>在每个部分中，我们区分<strong>函数的定义</strong>和<strong>函数的调用</strong>。<br>对于函数定义时的参数，我们称为parameter（形参）；对于函数调用时的参数，我们称之为argument(实参)。区分这两点对于解释清楚一些混淆的东西很重要</p>
<p>所以，以上的参数机制其实都是指的是函数定义时的形参，而不是调用时的实参！</p>]]>
    
    </summary>
    
      <category term="python" scheme="http://paranoidq.github.io/tags/python/"/>
    
      <category term="python" scheme="http://paranoidq.github.io/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vim Commands]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/vim-commands/"/>
    <id>http://paranoidq.github.io/2016/05/27/vim-commands/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u5149_u6807_u64CD_u4F5C"><a href="#u5149_u6807_u64CD_u4F5C" class="headerlink" title="光标操作"></a>光标操作</h3><h4 id="u79FB_u52A8"><a href="#u79FB_u52A8" class="headerlink" title="移动"></a>移动</h4><ul>
<li>文首：<code>gg</code> / <code>:0</code></li>
<li>文末：<code>shift + g</code> / <code>:$</code></li>
<li>行首：<code>0</code></li>
<li>行末：<code>$</code></li>
<li>到第一个不是空字符的位置：<code>^</code></li>
<li>到最后一个不是空字符的位置：<code>g_</code></li>
</ul>
<a id="more"></a>
<p>按单词移动：</p>
<ul>
<li>到下一个单词的开头：<code>w</code></li>
<li>到下一个单词的结尾：<code>e</code></li>
</ul>
<p>按匹配的单词移动：</p>
<ul>
<li>匹配光标所在的单词，移动到下一个：<code>*</code></li>
<li>匹配光标所在的单词，移动到上一个: <code>#</code></li>
</ul>
<p>按页移动：</p>
<ul>
<li>向下一页：<code>ctrl + F</code></li>
<li>向上一页：<code>ctrl + B</code></li>
<li>向下半页：<code>ctrl + D</code></li>
<li>向上半页：<code>ctrl + U</code></li>
</ul>
<h4 id="u63D2_u5165"><a href="#u63D2_u5165" class="headerlink" title="插入"></a>插入</h4><p>切换到插入模式的几种方式:</p>
<ul>
<li>在光标之前插入：<code>i</code></li>
<li>在行开始前插入：<code>I</code></li>
<li>在光标后面插入：<code>a</code></li>
<li>在行结束后插入：<code>A</code></li>
</ul>
<p>插入行：</p>
<ul>
<li>在当前位置下面插入一行，并进入编辑状态：<code>o</code></li>
<li>在当前位置上面插入一行，并进入编辑状态：<code>O</code></li>
</ul>
<h3 id="u6587_u672C_u64CD_u4F5C"><a href="#u6587_u672C_u64CD_u4F5C" class="headerlink" title="文本操作"></a>文本操作</h3><h4 id="u57FA_u672C_u884C_u64CD_u4F5C"><a href="#u57FA_u672C_u884C_u64CD_u4F5C" class="headerlink" title="基本行操作"></a>基本行操作</h4><p>复制</p>
<ul>
<li>复制一行：<code>yy</code></li>
<li>复制光标到行尾的部分：<code>y$</code></li>
<li>复制多行(1)：<code>Nyy</code> + ‘p’ (粘贴)</li>
<li>复制多行(2)：<code>6, 9 co 12</code> (复制6行和9行中间的部分到12行后面)</li>
</ul>
<p>复制大量的行：</p>
<ol>
<li>光标移到起始行，输入ma</li>
<li>光标移到结束行，输入mb</li>
<li>光标移到粘贴行，输入mc</li>
<li>然后 :’a,’b co ‘c 把 co 改成 m 就成剪切了</li>
</ol>
<p>粘贴</p>
<ul>
<li>粘贴：<code>p</code></li>
</ul>
<p>删除</p>
<ul>
<li>删除光标后一个字符：<code>x</code></li>
<li>删除光标到行尾的部分：<code>d$</code></li>
<li>删除单行：<code>dd</code> / <code>1d</code></li>
<li>删除多行(1)：<code>1, Nd</code> / <code>Ndd</code>(删除包含光标所在行的下面N行)</li>
<li>删除多行(2)：<code>:1, 4 de</code></li>
</ul>
<p>替换</p>
<ul>
<li>替换从光标位置到后一个单词结尾的字符：<code>cw</code></li>
</ul>
<h4 id="u4EFB_u610F_u533A_u95F4_u7684_u6587_u672C_u64CD_u4F5C"><a href="#u4EFB_u610F_u533A_u95F4_u7684_u6587_u672C_u64CD_u4F5C" class="headerlink" title="任意区间的文本操作"></a>任意区间的文本操作</h4><p>首先进入visual模式，直接按v键进入visual模式，然后<code>v+ j/k/h/l</code>进行文本选择</p>
<ul>
<li>剪切：<code>d</code></li>
<li>复制：<code>y</code></li>
<li>粘贴：<code>p</code></li>
</ul>
<h4 id="u884C_u5757_u64CD_u4F5C"><a href="#u884C_u5757_u64CD_u4F5C" class="headerlink" title="行块操作"></a>行块操作</h4><h3 id="u64A4_u9500_u64CD_u4F5C"><a href="#u64A4_u9500_u64CD_u4F5C" class="headerlink" title="撤销操作"></a>撤销操作</h3><ul>
<li>撤销上一个命令： <code>u</code></li>
<li>反撤销：<code>ctrl + r</code> </li>
</ul>
<h3 id="u641C_u7D22_u64CD_u4F5C"><a href="#u641C_u7D22_u64CD_u4F5C" class="headerlink" title="搜索操作"></a>搜索操作</h3><ul>
<li>搜索：<code>/pattern</code></li>
<li>下一个：<code>n</code></li>
<li>上一个：<code>N</code></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5149_u6807_u64CD_u4F5C"><a href="#u5149_u6807_u64CD_u4F5C" class="headerlink" title="光标操作"></a>光标操作</h3><h4 id="u79FB_u52A8"><a href="#u79FB_u52A8" class="headerlink" title="移动"></a>移动</h4><ul>
<li>文首：<code>gg</code> / <code>:0</code></li>
<li>文末：<code>shift + g</code> / <code>:$</code></li>
<li>行首：<code>0</code></li>
<li>行末：<code>$</code></li>
<li>到第一个不是空字符的位置：<code>^</code></li>
<li>到最后一个不是空字符的位置：<code>g_</code></li>
</ul>]]>
    
    </summary>
    
      <category term="linux" scheme="http://paranoidq.github.io/tags/linux/"/>
    
      <category term="vim" scheme="http://paranoidq.github.io/tags/vim/"/>
    
      <category term="linux" scheme="http://paranoidq.github.io/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java.util.ResourceBundle 源码分析]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/ResourceBundle-source-code-inside/"/>
    <id>http://paranoidq.github.io/2016/05/27/ResourceBundle-source-code-inside/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="ResourceBundle_u7B80_u4ECB"><a href="#ResourceBundle_u7B80_u4ECB" class="headerlink" title="ResourceBundle简介"></a>ResourceBundle简介</h3><p>顾名思义，ResourceBundle主要就是管理Java程序的一些配置资源的工具类。但是这个管理与一般管理不同的地方在于:</p>
<ul>
<li><p>locale-independent, 即ResourceBundle封装了本地化的读取方法，并且根据Locale参数读对应的本地化配置，从而能够使程序自动在不同地区载入不同的配置文件(<code>name_CN.properties</code>, <code>name_US.properties</code>等)。JavaDoc说法:</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. <span class="keyword">be </span>easily localized, <span class="keyword">or </span>translated, into <span class="keyword">different </span>languages</span><br><span class="line"><span class="number">2</span>. handle <span class="keyword">multiple </span>locales <span class="built_in">at</span> once</span><br><span class="line"><span class="number">3</span>. <span class="keyword">be </span>easily modified later to support even more locales</span><br></pre></td></tr></table></figure>
</li>
<li><p>在没有指定Locale的情况下，自动载入默认配置<code>name.properties</code></p>
</li>
<li>带有缓存功能</li>
<li>线程安全</li>
</ul>
<h3 id="ResourceBundle_u4F7F_u7528"><a href="#ResourceBundle_u4F7F_u7528" class="headerlink" title="ResourceBundle使用"></a>ResourceBundle使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceBundleUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ResourceBundleUtil</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResourceBundle <span class="title">newResourceBundle</span><span class="params">(String resourcePath)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> ResourceBundle.getBundle(resourcePath, Locale.ENGLISH);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResourceBundle <span class="title">newResourceBundle</span><span class="params">(String resourcePath, Locale locale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResourceBundle.getBundle(resourcePath, locale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ResourceBundle rb = ResourceBundleUtil.newResourceBundle(<span class="string">"with_classpath"</span>);</span><br><span class="line">        String value1 = rb.getString(<span class="string">"key1"</span>);</span><br><span class="line">        System.out.println(value1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意，如果不在clsspath的root目录下，需要指定全名</span></span><br><span class="line">        ResourceBundle rb2 = ResourceBundleUtil.newResourceBundle(<span class="string">"i18n.within_folder"</span>);</span><br><span class="line">        value1 = rb2.getString(<span class="string">"key1"</span>);</span><br><span class="line">        System.out.println(value1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自定义ResourceBundle例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyResources</span> <span class="keyword">extends</span> <span class="title">ResourceBundle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">handleGetObject</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key.equals(<span class="string">"okKey"</span>)) <span class="keyword">return</span> <span class="string">"Ok"</span>;</span><br><span class="line">        <span class="keyword">if</span> (key.equals(<span class="string">"cancelKey"</span>)) <span class="keyword">return</span> <span class="string">"Cancel"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// keySet() is inherted from super class</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getKeys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.enumeration(keySet());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Overrides handleKeySet() so that the getKeys() implementation</span></span><br><span class="line">    <span class="comment">// can rely on the keySet() value.</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Set&lt;String&gt; <span class="title">handleKeySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(<span class="string">"okKey"</span>, <span class="string">"cancelKey"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="ResourceBundle_u7C7B_u7ED3_u6784"><a href="#ResourceBundle_u7C7B_u7ED3_u6784" class="headerlink" title="ResourceBundle类结构"></a>ResourceBundle类结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ResourceBundle</span><br><span class="line">    |__ ListResourceBundle</span><br><span class="line">    |__ PropertyResourceBundle</span><br></pre></td></tr></table></figure>
<h3 id="ResourceBundle_u6E90_u7801_u7279_u6027"><a href="#ResourceBundle_u6E90_u7801_u7279_u6027" class="headerlink" title="ResourceBundle源码特性"></a>ResourceBundle源码特性</h3><h4 id="u5DE5_u5382_u65B9_u6CD5"><a href="#u5DE5_u5382_u65B9_u6CD5" class="headerlink" title="工厂方法"></a>工厂方法</h4><p>通过工厂方法<code>getBundle()</code>返回ResourceBundle的子类对象，处理不同的配置资源加载过程。</p>
<h4 id="u5B9E_u73B0_u7C7B"><a href="#u5B9E_u73B0_u7C7B" class="headerlink" title="实现类"></a>实现类</h4><p>ResourceBundle本身是abstract，实际使用的是两个实现类。<br>ListResourceBundle将配置资源看做key/value组成的列表，而PropertyResourceBundle使用properties来维护配置资源。</p>
<p>可以自己实现ResourceBundle，需要实现两个方法：<code>handleGetObject()</code> 和 <code>getKeys()</code>。另外需要注意的是，自己实现的ResourceBundle类要保证线程安全性，因为可能被多个线程同时使用。（ResourceBundle的非abstract方法和两个已知实现类的方法都是线程安全的）</p>
<h4 id="u7EBF_u7A0B_u5B89_u5168_u6027"><a href="#u7EBF_u7A0B_u5B89_u5168_u6027" class="headerlink" title="线程安全性"></a>线程安全性</h4><p>ResourceBundle的非abstract方法和两个已知实现类的方法都是线程安全的。<br>另外，自己实现的ResourceBundle类的<code>handleGetObject()</code>和<code>getKeys()</code>要保证线程安全性，因为可能被多个线程同时使用。</p>
<h4 id="u8D44_u6E90_u52A0_u8F7D_u8FC7_u7A0B_u7684_u63A7_u5236_uFF1AResourceBundle-Control"><a href="#u8D44_u6E90_u52A0_u8F7D_u8FC7_u7A0B_u7684_u63A7_u5236_uFF1AResourceBundle-Control" class="headerlink" title="资源加载过程的控制：ResourceBundle.Control"></a>资源加载过程的控制：ResourceBundle.Control</h4><p>可以控制资源的搜索顺序、bundle的格式或缓存方式等。两种方式控制ResourceBundle加载配置资源的过程：</p>
<ol>
<li>在<code>getBundle()</code>的参数中指定Control实例</li>
<li>通过指定<code>ResourceBundleControlProvider</code>的实现类。这个实现类会在ResouceBundle类被加载的时候就检测到，如果实现类针对某一个base name提供了Control对象，那么加载这个base name时的默认行为就会被改变。如果有多个providers针对同一个base name，那么选择第一个provider。</li>
</ol>
<p>相关方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ResourceBundle.getBundle(String, Locale, ClassLoader, Control);</span><br></pre></td></tr></table></figure>
<h4 id="Cache_management"><a href="#Cache_management" class="headerlink" title="Cache management"></a>Cache management</h4><p><code>getBundle()</code>返回的ResourceBundle会被默认缓存起来，从而下次请求同样的配置名时，会返回缓存过的ResourceBundle实例。<br>使用者可以选择不缓存、控制缓存时间（通过<code>time-to-live</code>变量），也可以清空cache。<br>相关方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ResourceBundle.clearCache();</span><br><span class="line">ResourceBundle.Control.getTimeToLive();</span><br><span class="line">ResourceBundle.Control.needsReload();</span><br></pre></td></tr></table></figure>
<h3 id="ResourceBundle_u6E90_u7801_u5206_u6790"><a href="#ResourceBundle_u6E90_u7801_u5206_u6790" class="headerlink" title="ResourceBundle源码分析"></a>ResourceBundle源码分析</h3><h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p>java.util.ResourceBundle源码(JDK1.8)<br><a href="http://blog.csdn.net/haiyan0106/article/details/2257725" target="_blank" rel="external">http://blog.csdn.net/haiyan0106/article/details/2257725</a><br><a href="http://san-yun.iteye.com/blog/1683558" target="_blank" rel="external">Java WeakReference与SoftReference</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="ResourceBundle_u7B80_u4ECB"><a href="#ResourceBundle_u7B80_u4ECB" class="headerlink" title="ResourceBundle简介"></a>ResourceBundle简介</]]>
    </summary>
    
      <category term="java" scheme="http://paranoidq.github.io/tags/java/"/>
    
      <category term="resourcebundle" scheme="http://paranoidq.github.io/tags/resourcebundle/"/>
    
      <category term="jdk" scheme="http://paranoidq.github.io/tags/jdk/"/>
    
      <category term="todo" scheme="http://paranoidq.github.io/tags/todo/"/>
    
      <category term="java" scheme="http://paranoidq.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python super详解（译 + 进一步理解）]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/python-super-considered-super/"/>
    <id>http://paranoidq.github.io/2016/05/27/python-super-considered-super/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u7FFB_u8BD1_uFF1APython_u2019s_super_28_29_considered_super_21"><a href="#u7FFB_u8BD1_uFF1APython_u2019s_super_28_29_considered_super_21" class="headerlink" title="翻译：Python’s super() considered super!"></a>翻译：Python’s super() considered super!</h2><h3 id="u57FA_u7840"><a href="#u57FA_u7840" class="headerlink" title="基础"></a>基础</h3><p>如果你没有惊讶于Python内置的super()，那么很可能你并没有真正知道它能做什么以及它如何有效的使用。本文章就主要在已有的python super()解释的基础上做出进一步的深入，主要包括：</p>
<ul>
<li>提供了实际的使用cases</li>
<li>给出了理论模型，演示它如何工作</li>
<li>展示如何使super()发挥它的作用</li>
<li>使用super()的建议</li>
<li>真实的例子</li>
</ul>
<p>本文的例子同时适用于python2和python3版本</p>
<p>首先，一个例子：子类继承内置的类，并且扩展了内置类的方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogoingDict</span><span class="params">(dict)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        logging.info(<span class="string">'Setting to %r'</span> % (key, value))</span><br><span class="line">        super().__setitem__(key, value)</span><br></pre></td></tr></table></figure></p>
<p>上面的例子中，LoggingDict完成了dict的同样的工作——update元素，只不过扩展了功能，在update元素之前先打log了，然后通过super()将实际update的工作<strong>代理</strong>给了dict对象</p>
<p>如果没有super()，我们可以这样做：<code>dict.__setitem__(self, key, value)</code>，但是问题在于：这种硬编码的方式不利于程序的扩展性。利用super()实际上是一种`<strong>间接引用</strong>（computed indirect reference）。</p>
<p>间接引用的好处之一：<strong>隔离</strong>。不用在是函数内部制定代理类的具体名字。如果要修改base class为另一个类，那么<code>super()</code>会自动切换给代理类，而硬编码的方式则要修改具体实现。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogoingDict</span><span class="params">(SomeOtherMapping)</span>:</span>        <span class="comment"># new base class</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        logging.info(<span class="string">'Setting to %r'</span> % (key, value))</span><br><span class="line">        super().__setitem__(key, value)     <span class="comment"># no change needed</span></span><br></pre></td></tr></table></figure></p>
<p>间接引用的另一个好处：<strong>动态</strong>。可以在运行时自由指定间接引用指向的类。引用指向的具体计算方式依赖两点：</p>
<ol>
<li>调用super的class</li>
<li>实例的基类的继承树</li>
</ol>
<p>第一点往往与源码有关，在例子中，super()的调用者是<code>LoggingDict.__setitem__()</code>，这是固定的。<br>第二点则是关键的动态性所在（我们可以创建具有复杂继承关系的子类）。一个logging ordered dictionary，不改变我们已有的类：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingOD</span><span class="params">(LoggingDict, collections.OrderedDict)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p>
<p>新类的继承树：<code>LoggingOD, LoggingDict, OrderedDict, dict, object</code>。注意：OrderedDict在dict的前面，因此，调用super()的<code>LoggingDict.__setitem__()</code>现在就把具体的upate任务代理给了OrderedDict，而不是上一个例子中的dict。</p>
<p>仔细考虑一下：在这个例子中，我们并没有改变LoggingDict的源码，而是新增了一个子类，这个新增子类的唯一逻辑就是组合了两个已有的类，并且控制他们的继承顺序。而super()则自动根据新类定义的继承顺序发挥了它的动态性能力！</p>
<h3 id="u57FA_u7C7B_u7684_u67E5_u627E_u987A_u5E8F"><a href="#u57FA_u7C7B_u7684_u67E5_u627E_u987A_u5E8F" class="headerlink" title="基类的查找顺序"></a>基类的查找顺序</h3><p>实际上，这里我称为检索顺序或继承树的说法，正式的叫法应该是：<strong>方法解析顺序(Method Resolution Order, MRO)</strong>。想要知道一个类的MRO可以用<code>__mro__</code>属性：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pprint(LoggingOD.__mro__)</span><br><span class="line">(&lt;class '__main__.LoggingOD'&gt;,</span><br><span class="line"> &lt;class '__main__.LoggingDict'&gt;,</span><br><span class="line"> &lt;class 'collections.OrderedDict'&gt;,</span><br><span class="line"> &lt;class 'dict'&gt;,</span><br><span class="line"> &lt;class 'object'&gt;)</span><br></pre></td></tr></table></figure></p>
<p>如果想按照我们想的MRO创建子类，那么首先需要了解MRO的计算机制：</p>
<blockquote>
<p>MRO的序列包括：本类，基类以及基类的基类们，直到object为止。一个类始终出现在它的基类前面，如果有多个同级基类，那么这些基类的顺序依照声明的顺序排列。</p>
</blockquote>
<p>上述例子遵从MRO的规范：</p>
<ul>
<li>LoggingOD在它的基类LogginDict和OrderedDict前面</li>
<li>LoggingDict在OrderedDict前面，因为<code>LoggingOD.__bases__</code>的声明顺序是(LoggingDict, OrderedDict)</li>
<li>LogginDict在它的基类dict前面</li>
<li>OrderedDict在它的基类dict前面</li>
<li>dict在它的基类object前面</li>
</ul>
<p>解析约束的过程被称作<code>线性化(linearizatoin)</code>。有很多论文研究这方面的内容，但是我们只需要知道两点即可：</p>
<ul>
<li>基类永远出现在派生类后面</li>
<li>如果有多个基类，基类的相对顺序保持不变。</li>
</ul>
<h3 id="u5B9E_u8DF5_u5EFA_u8BAE"><a href="#u5B9E_u8DF5_u5EFA_u8BAE" class="headerlink" title="实践建议"></a>实践建议</h3><p>super()的作用是将本类方法的调用代理给继承树中的某一个基类实例去完成。这里给出三个注意点：</p>
<ul>
<li>保证通过super()调用的基类方法必须存在</li>
<li>调用者和被调用者需要有匹配的函数签名</li>
<li>调用super()的方法，每次出现都同样必须使用super()</li>
</ul>
<p>1): 我们先看这一点：调用者的参数与被调用方法的参数一致。<br>这跟普通的方法调用不同，普通的方法调用在的时候被调用的方法是已知的，但是有了super()，在本类编码的时候被super()调用的方法是未知的。想象一下，我们可以之后定义一个subclass，从而在正在编写的class的MRO中引入新的类，改变MRO的顺序，从而可能改变super()实际调用的类！</p>
<p>我们的方法是：利用位置参数指定固定的签名。例如，在<code>__setitem__()</code>中，就保持了固定的两个位置参数：key和value。这种方法在LoggingDict也有体现，即<code>__setitem__()</code>与dict有同样的函数签名。</p>
<p>更灵活的方法：让继承树中的所有方法都接受这样的参数:<code>关键字参数 + 可变关键字参数</code>，并且每一层取走自己想要的参数，并通过<code>**kwargs</code>向上一层forward余下的参数，最终在调用链的最后一层使得可变关键字参数为空(<code>object.__init__()</code>不需要任何参数)。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">classs Shape:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, shapename, **kwargs)</span>:</span></span><br><span class="line">        self.shapename = shapename</span><br><span class="line">        super().__init__(**kwargs)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColoredShape</span><span class="params">(Shape)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, color, **kwargs)</span>:</span></span><br><span class="line">        self.color = color</span><br><span class="line">        super().__init(**kwargs)</span><br><span class="line"></span><br><span class="line">cs = ColoredShape(color=<span class="string">'red'</span>, shapename=<span class="string">'circule'</span>)</span><br></pre></td></tr></table></figure></p>
<p>2): 如何确定目标函数存在？<br>上面的例子就是最简单的case，即object有我们调用的方法，因此无论什么样的继承树都会有我们的目标方法，不会出现AttributeError。</p>
<p>那么对于object不存在的方法，我们的处理方法是：编写一个root类包含我们的目标方法，并且在object前面被调用。这个root类的职责就是’吞掉’方法的调用，不让super()继续向上层类传递（因为上层类没有我们的目标方法了，再传递就会最终出现AttributeError）。</p>
<p>Root的draw方法还可以利用防御性编程的策略，即用assert来确保调用链的上层没有draw方法了。这是为了避免子类可能错误的继承了一个没有声明Root为基类的类。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Root：</span><br><span class="line">    def draw(self):</span><br><span class="line">        # the delegatioin chain stops here</span><br><span class="line">        assert not hasattr(super(), 'draw')</span><br><span class="line"></span><br><span class="line">class Shape(Root):</span><br><span class="line">    def __init__(self, shapename, **kwargs):</span><br><span class="line">        self.shapename = shapename</span><br><span class="line">        super().__init__(**kwargs)</span><br><span class="line">    def draw(self):</span><br><span class="line">        print('Drawing. Setting shape to: ', self.shapename)</span><br><span class="line">        super().draw()</span><br><span class="line"></span><br><span class="line">class ColoredShape(Shape):</span><br><span class="line">    def __init__(self, color, **kwargs):</span><br><span class="line">        self.color = color</span><br><span class="line">        super().__init__(**kwargs)</span><br><span class="line">    def draw(self):</span><br><span class="line">        print('Drawing. Setting color to: ', self.color)</span><br><span class="line">        super().draw()</span><br><span class="line"></span><br><span class="line">cs = ColoredShape(color='blue', shapename='square')</span><br><span class="line">cs.draw()</span><br></pre></td></tr></table></figure></p>
<p>如果一个子类希望在MRO中引入其他类，那么这些其他类也必须继承自Root，从而确保draw方法不会到达object，而无法被Root.draw阻止下来。这个约定必须写在文档中，就像pyhon中所有的自定义异常都必须继承自BaseException一样。</p>
<p>3): 调用链的每层函数的调用都加上super()方法即可，这是约定。</p>
<h3 id="u5982_u4F55_u5F15_u5165_u2019_u5F02_u7C7B_u2019_uFF08non-cooperative_class_uFF09"><a href="#u5982_u4F55_u5F15_u5165_u2019_u5F02_u7C7B_u2019_uFF08non-cooperative_class_uFF09" class="headerlink" title="如何引入’异类’（non-cooperative class）"></a>如何引入’异类’（non-cooperative class）</h3><p>有时候，我们也要想引入一些第三方的类，这些类并没有针对super设计或者没有遵循Root的约定。解决方法是：利用适配器包装一下。<br>例如下面的Moveable类并没有super()调用，并且它的<code>__init__()</code>方法函数签名与object不一致，并且它没有继承Root。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Moveable</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Drawing at position: '</span>, self.x, self.y)</span><br></pre></td></tr></table></figure></p>
<p>如果你希望把这个类引入ColoredShape的层次中，你需要做一个adapter：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MoveableAdapter</span><span class="params">(Root)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y, **kwargs)</span>:</span></span><br><span class="line">        self.moveable = Moveable(x, y)</span><br><span class="line">        super().__init__(**kwargs)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.moveable.draw()</span><br><span class="line">        super().draw()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovableColoredShape</span><span class="params">(ColoredShape, MoveableAdapter)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">MovableColoredShape(color=<span class="string">'red'</span>, shapename=<span class="string">'triangle'</span>,</span><br><span class="line">                    x=<span class="number">10</span>, y=<span class="number">20</span>).draw()</span><br></pre></td></tr></table></figure></p>
<h3 id="u539F_u6587"><a href="#u539F_u6587" class="headerlink" title="原文"></a>原文</h3><p><a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/" target="_blank" rel="external">Python’s super() considered super!</a></p>
<h2 id="u8FDB_u4E00_u6B65_u7406_u89E3"><a href="#u8FDB_u4E00_u6B65_u7406_u89E3" class="headerlink" title="进一步理解"></a>进一步理解</h2><h3 id="super_u7684_u672C_u8D28"><a href="#super_u7684_u672C_u8D28" class="headerlink" title="super的本质"></a>super的本质</h3><p>主要来自于<a href="http://zhihu.com/question/20040039/answer/57883315" target="_blank" rel="external">知乎-laike9m的回答</a>，少量删改。</p>
<p>不要一说到 super 就想到基类！super 指的是 MRO 中的下一个类！<br>super干的事情其实是这个：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">super</span><span class="params">(cls, inst)</span>:</span></span><br><span class="line">    mro = inst.__class__.mro()</span><br><span class="line">    <span class="keyword">return</span> mro[mro.index(cls) + <span class="number">1</span>]</span><br></pre></td></tr></table></figure></p>
<p>两个参数分别作了两件事情:</p>
<ol>
<li>inst负责生成MRO的list</li>
<li>通过cls定位当前的MRO中的index,并返回mro[index+1]</li>
</ol>
<p>一个例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Root</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'this is root'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Root)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'enter B'</span>)</span><br><span class="line">        <span class="comment"># print(self)  # &lt;__main__.D object at 0x...&gt;</span></span><br><span class="line">        super().__init__()  <span class="comment"># python3中不用写成super(B, self).__init__()</span></span><br><span class="line">        print(<span class="string">'leave B'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(Root)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'enter C'</span>)</span><br><span class="line">        super().__init__()</span><br><span class="line">        print(<span class="string">'leave c'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">d = D()</span><br><span class="line">print(D.__mro__)</span><br><span class="line">print(B.__mro__)</span><br><span class="line">print(C.__mro__)</span><br></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enter b</span><br><span class="line">enter c</span><br><span class="line">this is root</span><br><span class="line">leave c</span><br><span class="line">leave b</span><br><span class="line">(<span class="name">&lt;class</span> '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.Root'&gt;, &lt;class 'object'&gt;)</span><br><span class="line">(<span class="name">&lt;class</span> '__main__.C'&gt;, &lt;class '__main__.Root'&gt;, &lt;class 'object'&gt;)</span><br><span class="line">(<span class="name">&lt;class</span> '__main__.B'&gt;, &lt;class '__main__.Root'&gt;, &lt;class 'object'&gt;)</span><br></pre></td></tr></table></figure></p>
<p>因此，实际上super()调用的时MRO中的下一个类的对应方法，所以不难理解enter b之后是enter c而不是thi is root。因为C是B的下一个，至于为什么C是下一个，那就要看上文翻译中讲的MRO规范了。</p>
<p>需要注意的是，这里的MRO是self生成的，指的是self这个instance对应的类的MRO，self不同，MRO也不同。例如d的MRO就是第一行MRO，而如果instance是B，则MRO就是第二行了。而在上面的例子中，self一直是d。super().func是把实例的MRO中相对于当前类的下一个类的func执行，这个实例并非一定是当前类的，并且如果下一个类的func不再以super的方式调用，则调用终止（但是不建议，除非到了object或者Root）。</p>
<p>注意super继承只能用于新式类，用于经典类时就会报错。</p>
<ul>
<li>新式类：必须有继承的类，如果没什么想继承的，那就继承objcet</li>
<li>经典类：没有基类，如果此时调用super就会出现错误：“super() argument 1 must be type, not classobj”</li>
</ul>
<h3 id="super_u7528_u5728_u4F55_u5904_uFF1F"><a href="#super_u7528_u5728_u4F55_u5904_uFF1F" class="headerlink" title="super用在何处？"></a>super用在何处？</h3><p>主要来自于<a href="http://zhihu.com/question/20040039/answer/13772641" target="_blank" rel="external">知乎-松鼠奥利奥的的回答</a>，少量删改。</p>
<p>super主要用于解决多继承的问题，直接用类名调用基类的方法在单继承的时候没问题，但是如果使用多继承，则会涉及到查找顺序（MRO）、重复调用（钻石继承）等问题。</p>
<p>如果没有复杂的继承结构，super作用不大。而复杂的继承结构本身就是不良设计。对于多重继承的用法，现在比较推崇 Mixin 的方式，也就是</p>
<ul>
<li>普通类多重继承只能有一个普通父类和若干个 Mixin 类（保持主干单一）</li>
<li>Mixin 类不能继承普通类（避免钻石继承）</li>
<li>Mixin 类应该单一职责（参考 Java 的 interface 设计，Mixin 和此极其相似，只不过附带实现而已）<br>如果按照上述标准，只使用 Mixin形式的多继承，那么不会有钻石继承带来的重复方法调用，也不会有复杂的查找顺序 —— 此时 super 是可以有无的了，用不用全看个人喜好，只是记得千万别和类名调用的方式混用就好。</li>
</ul>
<p>Python的多继承类是通过mro的方式来保证各个基类的函数被逐一调用，而且保证每个基类函数只调用一次（如果每个类都使用super）</p>
<h3 id="u6E90_u7801_u7EA7_u522B_u7684_u89E3_u91CA"><a href="#u6E90_u7801_u7EA7_u522B_u7684_u89E3_u91CA" class="headerlink" title="源码级别的解释"></a>源码级别的解释</h3><p><a href="http://blog.csdn.net/johnsonguo/article/details/585193" target="_blank" rel="external">http://blog.csdn.net/johnsonguo/article/details/585193</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u7FFB_u8BD1_uFF1APython_u2019s_super_28_29_considered_super_21"><a href="#u7FFB_u8BD1_uFF1APython_u2019s_super_28_29_considered_supe]]>
    </summary>
    
      <category term="python" scheme="http://paranoidq.github.io/tags/python/"/>
    
      <category term="super" scheme="http://paranoidq.github.io/tags/super/"/>
    
      <category term="python" scheme="http://paranoidq.github.io/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SSH Principles（总结和笔记）]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/SSH-Principles/"/>
    <id>http://paranoidq.github.io/2016/05/27/SSH-Principles/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u524D_u63D0"><a href="#u524D_u63D0" class="headerlink" title="前提"></a>前提</h3><p>服务器需要开启远程服务<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 针对fedora的检测方法</span></span><br><span class="line">service sshd status</span><br><span class="line"><span class="meta"># 通用检测方法：</span></span><br><span class="line">ps -e | grep ssh</span><br><span class="line"></span><br><span class="line"><span class="meta"># 开启 in fedora</span></span><br><span class="line">service sshd start</span><br><span class="line"><span class="meta"># 开启 in ubuntu</span></span><br><span class="line">/etc/init.d/ssh start[/stop/restart]</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="u539F_u7406"><a href="#u539F_u7406" class="headerlink" title="原理"></a>原理</h3><ol>
<li>基本流程：<ul>
<li>client请求登陆remote server</li>
<li>server发送公钥给client，并告知client发送自己的密码</li>
<li>client用公钥加密密码，发送给server</li>
<li>server用私钥解密密码，如果成功，就允许用户登陆</li>
</ul>
</li>
<li>为何安全：<ul>
<li>全程不传输私钥，及时截获报文，只要私钥不泄露，就不能获取密码</li>
<li>密码由随机的公钥加密，可换</li>
</ul>
</li>
<li>为何有风险：<ul>
<li>如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的</li>
<li>中间人攻击（Man-in-the-middle attack）：如果攻击者插在用户与远程主机之间（比如在公共的wifi区域）用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了</li>
</ul>
</li>
</ol>
<h3 id="u4E24_u79CD_u767B_u5F55_u65B9_u5F0F"><a href="#u4E24_u79CD_u767B_u5F55_u65B9_u5F0F" class="headerlink" title="两种登录方式"></a>两种登录方式</h3><h4 id="u53E3_u4EE4_u767B_u5F55"><a href="#u53E3_u4EE4_u767B_u5F55" class="headerlink" title="口令登录"></a>口令登录</h4><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh user@host</span><br><span class="line">The authenticity <span class="keyword">of</span> host <span class="comment">'host (12.18.429.21)' can't be established.</span></span><br><span class="line">RSA <span class="keyword">key</span> fingerprint <span class="keyword">is</span> <span class="number">98</span>:<span class="number">2</span>e:d7:e0:de:<span class="number">9</span>f:ac:<span class="number">67</span>:<span class="number">28</span>:c2:<span class="number">42</span>:<span class="number">2</span>d:<span class="number">37</span>:<span class="number">16</span>:<span class="number">58</span>:<span class="number">4</span>d.</span><br><span class="line">Are you sure you want <span class="keyword">to</span> <span class="keyword">continue</span> connecting (yes/no)?</span><br></pre></td></tr></table></figure>
<p>假定经过风险衡量以后，用户决定接受这个远程主机的公钥。然后要求用户输入密码<br>    <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added <span class="string">'host,12.18.429.21'</span> (RSA) <span class="built_in">to</span> <span class="keyword">the</span> list <span class="keyword">of</span> known hosts.</span><br><span class="line">Password: (enter password)</span><br></pre></td></tr></table></figure></p>
<p>保存远程主机的公钥在<code>$HOME/.ssh/known_hosts</code>中，以后连接主机时client能识别公钥已经保存在本地，跳过警告部分。（但是仍然需要输入密码）</p>
<p><code>/etc/ssh/ssh_known_hosts</code>保存对所有用户可信的远程主机公钥</p>
<h4 id="u516C_u94A5_u767B_u5F55"><a href="#u516C_u94A5_u767B_u5F55" class="headerlink" title="公钥登录"></a>公钥登录</h4><blockquote>
<p>原理：</p>
</blockquote>
<ol>
<li>用户将自己的公钥储存在远程主机上。</li>
<li>登录时，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。</li>
<li>远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码</li>
</ol>
<blockquote>
<p>操作：</p>
</blockquote>
<p>用户生成自己的公钥：在<code>$HOME/.ssh</code>下会生成<code>id_rsa.pub</code>和<code>id_rsa</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure></p>
<p>拷贝公钥到server：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh-copy-id user<span class="variable">@host</span></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="variable">$ </span>scp /Users/paranoidq/.ssh/id_rsa.pub paranoidq<span class="variable">@192</span>.<span class="number">168.235</span>.<span class="number">131</span><span class="symbol">:/home/paranoidq/</span>.ssh/authorized_keys </span><br><span class="line"><span class="comment"># 但是scp不能附加多个authorized_keys，所以貌似只能支持一个用户一个公钥！</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>关于ssh-copy-id的过程：</p>
</blockquote>
<p>远程主机将用户的公钥，保存在登录后的用户主目录的<code>$HOME/.ssh/authorized_keys</code>文件中。公钥就是一段字符串，只要把它追加在authorized_keys文件的末尾就行了</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh user<span class="variable">@host</span> <span class="string">'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys'</span> &lt; ~<span class="regexp">/.ssh/id</span>_rsa.pub</span><br></pre></td></tr></table></figure>
<p>解释：</p>
<ol>
<li><code>$ ssh user@host</code>表示登录远程主机；</li>
<li><code>mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys</code>表示登录后在远程shell上执行的命令</li>
<li><code>mkdir -p .ssh</code>的作用是，如果用户主目录中的.ssh目录不存在，就创建一个</li>
<li><code>cat &gt;&gt; .ssh/authorized_keys &lt; ~/.ssh/id_rsa.pub</code>的作用是，将本地的公钥文件<code>~/.ssh/id_rsa.pub</code>，重定向追加到远程文件<code>authorized_keys</code>的末尾</li>
</ol>
<p>注：有必要学习一下bash和shell的知识了，推荐Mendel Cooper的<a href="http://www.tldp.org/LDP/abs/html/" target="_blank" rel="external">《Advanced Bash: Scrpiting Guide》</a></p>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="external">廖雪峰的官方网站，ssh原理与运用</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u524D_u63D0"><a href="#u524D_u63D0" class="headerlink" title="前提"></a>前提</h3><p>服务器需要开启远程服务<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 针对fedora的检测方法</span></span><br><span class="line">service sshd status</span><br><span class="line"><span class="meta"># 通用检测方法：</span></span><br><span class="line">ps -e | grep ssh</span><br><span class="line"></span><br><span class="line"><span class="meta"># 开启 in fedora</span></span><br><span class="line">service sshd start</span><br><span class="line"><span class="meta"># 开启 in ubuntu</span></span><br><span class="line">/etc/init.d/ssh start[/stop/restart]</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="ssh, server" scheme="http://paranoidq.github.io/tags/ssh-server/"/>
    
      <category term="linux" scheme="http://paranoidq.github.io/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python Cookbook Useful Cases]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/python-cookbook-records/"/>
    <id>http://paranoidq.github.io/2016/05/27/python-cookbook-records/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<p>如题， Python Cookbook中有用的cases。</p>
<a id="more"></a>
<p>3.11 随机选择(<code>random.choice()</code>, <code>random.sample()</code>, <code>random.shuffle()</code>)</p>
<p>4.2 代理迭代(<code>__iter__()</code>)<br>4.4 实现自定义对象的迭代协议(1. 使用<code>yield</code>或<code>yield from</code>， 2. 使用<code>__iter__()</code>-繁琐)<br>4.5 反向迭代(<code>__reversed__</code>或<code>reversed(known_size_list)</code>)<br>4.6 迭代器切片(<code>itertools.islice()</code>)<br>4.7 跳过可迭代对象的开始部分(<code>itertools.dropwhile()</code>)<br>4.10 跟踪迭代序列的索引值(<code>enumerate()</code>)。非常有用！<br>4.11 同时迭代多个序列(<code>zip()</code>, <code>zip_longest()</code>)<br>4.12 多个对象执行相同的操作(<code>itertools.chain()</code>)<br>4.13 创建数据处理管道(<code>yield</code>)</p>
<ul>
<li>多个迭代器组合成一个工作流</li>
</ul>
<p>4.14 展开嵌套的序列(<code>yield from</code>)<br>4.15 顺序迭代合并后的排序迭代对象(<code>heapq.merge()</code>)</p>
<ul>
<li>可用于合并多个排序文件这样的操作</li>
</ul>
<p>4.16 用迭代器代替while无限循环</p>
<ul>
<li>简化重复调用的函数，如IO函数调用。不需要显式在while中判断结束标记。(<code>iter(lambda)</code>)</li>
</ul>
<p>5.2 打印输出到文件</p>
<ul>
<li>指定print(file=f)，且f必须以文本方式打开</li>
</ul>
<p>5.5 文件不存在才能写入(<code>xt</code>或<code>xb</code>)<br>5.8 固定大小记录的文件迭代(一般二进制文件较多，利用<code>iter()</code>)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如题， Python Cookbook中有用的cases。</p>]]>
    
    </summary>
    
      <category term="碎片" scheme="http://paranoidq.github.io/tags/%E7%A2%8E%E7%89%87/"/>
    
      <category term="python" scheme="http://paranoidq.github.io/tags/python/"/>
    
      <category term="cookbook" scheme="http://paranoidq.github.io/tags/cookbook/"/>
    
      <category term="python" scheme="http://paranoidq.github.io/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git 分支管理与实践（hexo博客源文件管理）]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/Git-branch-management/"/>
    <id>http://paranoidq.github.io/2016/05/27/Git-branch-management/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u67E5_u770B"><a href="#u67E5_u770B" class="headerlink" title="查看"></a>查看</h3><p>查看本地分支<br><code>git branch</code></p>
<p>查看包括远程分支<br><code>git branch -a</code></p>
<p>查看本地分支和远程分支的push情况<br><code>git log &lt;local-branch&gt; ^origin/&lt;remote-branch&gt;</code>   # 可以查看本地有远程没有的提交。<br><code>git log &lt;remote-branch&gt; ^&lt;local-branch&gt;</code>       # 可以查看远程有本地没有的提交。</p>
<h3 id="u521B_u5EFA"><a href="#u521B_u5EFA" class="headerlink" title="创建"></a>创建</h3><p>创建本地分支<br><code>git checkout -b dev</code></p>
<h3 id="u5173_u8054"><a href="#u5173_u8054" class="headerlink" title="关联"></a>关联</h3><p>目的：避免每次都需要制定push的具体分支，可以关联后在本地分支下直接push即可</p>
<p>两种方案：</p>
<ol>
<li>在本地branch第一次push的时候就指定：<br> <code>git push -u origin &lt;remote-branch&gt;</code></li>
<li>以后指定：<br><code>git branch --set-upstream &lt;local-branch&gt; origin/&lt;remote-branch&gt;</code><br>或<br><code>git push --set-upstream origin &lt;remote-branch&gt;</code><br>你的repo下的git/config会多出类似这样的配置：<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[branch "src"]</span></span><br><span class="line"><span class="attr">remote</span> = origin</span><br><span class="line"><span class="attr">merge</span> = refs/heads/src</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="u63A8_u9001"><a href="#u63A8_u9001" class="headerlink" title="推送"></a>推送</h3><p><code>git push origin &lt;local-branch&gt;</code>  # 推送本地分支到对应的远程分支</p>
<p><code>git push</code> # 如果指定了远程关联，可以直接push</p>
<p>两种配置： (注意，这个配置是写在~/.gitconfig中的，对所有的repo生效)<br><code>git config --global push.default simple</code>(更好, 只push当前分支到你使用git pull拉取的远程代码)<br><code>git config --global push.default matching</code> （如果没有指定具体分支，会push所有名字对应的分支）</p>
<h3 id="u5220_u9664"><a href="#u5220_u9664" class="headerlink" title="删除"></a>删除</h3><p>删除本地分支<br><code>git branch -d dev (用-D强行删除)</code></p>
<p>删除远程分支<br><code>git push origin --delete dev</code></p>
<h3 id="u5B9E_u4F8B_uFF1A__u7BA1_u7406hexo_u7684src_u5206_u652F"><a href="#u5B9E_u4F8B_uFF1A__u7BA1_u7406hexo_u7684src_u5206_u652F" class="headerlink" title="实例： 管理hexo的src分支"></a>实例： 管理hexo的src分支</h3><p>说明：hexo的deployer本身在部署的时候只会生成static文件，并上传到github的master分支，而hexo的一些source和_config.yaml等配置文件则只在本地。因此需要将这些文件也管理到git中去，方便备份和多终端同步。</p>
<p>基本思路是在本地利用src分支，然后上传源文件到src分支，并push到远程的src分支，即可管理。</p>
<p>master分支由于是hexo的页面展示部分，所以其实是不能与origin/master保持同步的，也千万不能push，否则结果就是源文件覆盖了hexo-deployer push到master分支的静态文件，从而访问的时候404了。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>cd &lt;repo&gt;</span><br><span class="line"><span class="variable">$ </span>git init (optional)</span><br><span class="line"><span class="variable">$ </span>git checkout -b src</span><br><span class="line"><span class="variable">$ </span>git add .</span><br><span class="line"><span class="variable">$ </span>git commit -m <span class="string">"first commit for src branch"</span></span><br><span class="line"><span class="variable">$ </span>git remote add origin git<span class="variable">@github</span>.<span class="symbol">com:</span>&lt;username&gt;<span class="symbol">:&lt;username&gt;</span>.github.io.git (optional)</span><br><span class="line"><span class="variable">$ </span>git push origin src</span><br></pre></td></tr></table></figure>
<ol>
<li>optional部分，可能由于之前开始建立repo的时候已经做过了，所以不一定要在分支的过程中做了</li>
<li>checkout的时候，需要保证master分支全部commit。（这里其实我做的不够完善，一开始应该是整个本地的网站不要init，让master分支全部被hexo-deployer接管。然后在创建分支的时候，才init。这样可以保证本地只有一个src的分支需要我手动管理。</li>
<li>如果你手贱之前已经建立了master分支，那么有两个办法：<ul>
<li>忽略与origin/master不同步的本地master分支</li>
<li>删除本地的master分支 <code>git branch -D master</code></li>
</ul>
</li>
</ol>
<p><strong>另外一台电脑上如何使用：</strong><br>安装node环境和hexo-cli环境<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ brew update </span><br><span class="line">$ brew install <span class="keyword">node</span></span><br><span class="line"><span class="title">$</span> npm install hexo-cli -g</span><br></pre></td></tr></table></figure></p>
<p>不要执行hexo init了，而是clone远程的src仓库<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone -<span class="selector-tag">b</span> src git@github<span class="selector-class">.com</span>:&lt;username&gt;:&lt;username&gt;<span class="selector-class">.github</span><span class="selector-class">.io</span><span class="selector-class">.git</span></span><br><span class="line">$ npm install <span class="comment">//根据package.json来下载依赖包</span></span><br></pre></td></tr></table></figure></p>
<p>然后就可以继续写博客了，整个过程，手动管理的只有src，master分支本地需要，由hexo-deployer负责push。</p>
<p>参考文献[1]中还提到了用git submodule解决第三方主题的同步问题，很不错。<br>参考文献[3]中修改hexo-deployer源码，添加了自动在deploy的时候提交src的功能，很nice。</p>
<p>具体方法：<br>修改<code>node_modules\hexo-deployer-git\lib\deployer.js</code>插件的代码，添加gitBaseDir函数。 注意gitBaseDir函数必须写在module块中，否则会出现错误。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">git</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> len = <span class="built_in">arguments</span>.length;</span><br><span class="line">   <span class="keyword">var</span> args = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">     args[i] = <span class="built_in">arguments</span>[i];</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> spawn(<span class="string">'git'</span>, args, &#123;</span><br><span class="line">     cwd: deployDir,</span><br><span class="line">     verbose: verbose</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gitBaseDir</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> len = <span class="built_in">arguments</span>.length;</span><br><span class="line">   <span class="keyword">var</span> args = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">     args[i] = <span class="built_in">arguments</span>[i];</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> spawn(<span class="string">'git'</span>, args, &#123;</span><br><span class="line">     cwd: baseDir,</span><br><span class="line">     verbose: verbose</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在push函数中添加提交到src的功能<br><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span><span class="params">(repo)</span>&#123;</span></span><br><span class="line">   <span class="keyword">return</span> git(<span class="string">'add'</span>, <span class="string">'-A'</span>).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">     <span class="keyword">return</span> git(<span class="string">'commit'</span>, <span class="string">'-m'</span>, message).<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">       <span class="comment">// Do nothing. It's OK if nothing to commit.</span></span><br><span class="line">     &#125;);</span><br><span class="line">    &#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">     <span class="keyword">return</span> git(<span class="string">'push'</span>, <span class="string">'-u'</span>, repo.url, <span class="string">'master:'</span> + repo.branch, <span class="string">'--force'</span>);</span><br><span class="line">    &#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">     <span class="keyword">return</span> gitBaseDir(<span class="string">'checkout'</span>,<span class="string">'source'</span>);</span><br><span class="line">    &#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">        <span class="keyword">return</span> gitBaseDir(<span class="string">'add'</span>,<span class="string">'-A'</span>).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">            <span class="keyword">return</span> gitBaseDir(<span class="string">'commit'</span>,<span class="string">'-m'</span>,message).<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">        <span class="keyword">return</span> gitBaseDir(<span class="string">'push'</span>,<span class="string">'-u'</span>,repo.url,<span class="string">'source:source'</span>,<span class="string">'--force'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="u53C2_u8003_uFF1A"><a href="#u53C2_u8003_uFF1A" class="headerlink" title="参考："></a>参考：</h3><ol>
<li><a href="http://devtian.me/2015/03/17/blog-sync-solution/" target="_blank" rel="external">如何管理hexo的源文件</a></li>
<li><a href="https://gitcafe.com/GitCafe/Help/wiki/%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4-Master-%E5%88%86%E6%94%AF?locale=zh-CN" target="_blank" rel="external">为何以及如何删除master分支</a></li>
<li><a href="http://boenyang.github.io/2015/09/09/hello-world/" target="_blank" rel="external">自动化hexo的源文件提交-修改hexo-deployer源码部分</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u67E5_u770B"><a href="#u67E5_u770B" class="headerlink" title="查看"></a>查看</h3><p>查看本地分支<br><code>git branch</code></p>
<p>查看包括远程分支<br]]>
    </summary>
    
      <category term="git" scheme="http://paranoidq.github.io/tags/git/"/>
    
      <category term="git" scheme="http://paranoidq.github.io/categories/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to be more productive(转)]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/how-to-be-more-productive/"/>
    <id>http://paranoidq.github.io/2016/05/27/how-to-be-more-productive/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>帮助自己完成一件事的秘密不是说服自己必须完成它，而是说服自己这件事确实非常有意思。如果一件事没有意思的话，你需要做的就是让它变得有意思.</p>
</blockquote>
<p>肯定有人跟你说过这样的话“你有看电视的那么长时间，都可以用来写一本书了”，不可否认写书肯定比看电视更好的利用了时间，但是这个结论的成立需要一个假设:”时间是可互换的”，也就是说看电视的时间可以轻松的用来写书。但是很遗憾，事实并非如此。<br>不同的时间有不同的质量等级。如果我在走向地铁站的路上发现自己的笔记本忘带了，我就很难集中注意力写文章。同样，当你不停的被打断的时候，你也很难集中注意力。这里还有一些心理和情感上的因素，有的时候我心情很好，愿意主动去做一些事，但还有一些时候我感到很抑郁和疲惫，就只能看看电视了。<br>如果你想变的更加有效率，你必须意识到这个事实，并且很好的处理它。首先，你必须很好的利用不同种类的时间。其次，你必须让你的时间更有效率。</p>
<h3 id="u66F4_u6709_u6548_u7684_u5229_u7528_u4F60_u7684_u65F6_u95F4"><a href="#u66F4_u6709_u6548_u7684_u5229_u7528_u4F60_u7684_u65F6_u95F4" class="headerlink" title="更有效的利用你的时间"></a>更有效的利用你的时间</h3><h4 id="u9009_u62E9_u5408_u9002_u7684_u95EE_u9898"><a href="#u9009_u62E9_u5408_u9002_u7684_u95EE_u9898" class="headerlink" title="选择合适的问题"></a>选择合适的问题</h4><p>生命是如此的短暂，为什么浪费时间做一些没意义的事呢？做一些让你感到舒适的事很容易，但是你应该问问自己为什么要做这些事呢？有没有一些更重要的事等着你去做？为什么你不去做那些事呢？这些问题很难回答，但是每解决一个都会让你更有效率。<br>这不是说你所有的时间都应该用来做那些最重要的事。我的时间就肯定不是这样(否则，我现在就不会在写这篇文章了)。但是，这是我衡量自己的生活是否充实的重要标准。</p>
<h4 id="u6536_u96C6_u5F88_u591A_u95EE_u9898"><a href="#u6536_u96C6_u5F88_u591A_u95EE_u9898" class="headerlink" title="收集很多问题"></a>收集很多问题</h4><p>另一个很多人都知道的秘密是：如果你认准一个问题，投入全部精力去解决它，这样你的效率是最高的。我发现这却是很难实现的。以现在为例，我正在锻炼身体，喝橙汁，整理桌面，和我弟弟聊天，同时在写现在这篇文章。今天一整天，我写了现在这篇文章，读了一本书，吃了点东西，回复了几封邮件，和一些朋友聊了聊天，买了点东西，改了改其他几篇文章，备份了硬盘，还整理了一下图书列表。<br>有很多不同的项目让我能够在不同质量的时间下做不同的工作。更重要的是，在你卡壳或是厌烦的时候有其他的一些事可以做。<br>这同时会让你变得更加有创造力。创造力就是你把自己从其他地方学到的东西能够用到你的工作中。如果你同时做许多不同方向的工作，那你就会得到更多的想法和创意。</p>
<h4 id="u5217_u4E00_u4E2A_u6E05_u5355"><a href="#u5217_u4E00_u4E2A_u6E05_u5355" class="headerlink" title="列一个清单"></a>列一个清单</h4><p>找一些不同的事同时做并不困难，大部分人都有很多很多的待办事项。但是如果你想把它们全记在脑袋里的话，它们就会慢慢消失。要记住所有这些事所给你带来的心智上的压力会把你压垮。解决办法仍然是很简单：把它们写下来。<br>一旦你把要做的事列成了一个清单，你就可以更好的分类组织它们了。比如说，我的清单包括：编程，思考，差事，读书，娱乐休息。<br>大部分项目都包括很多不同的任务。以写这篇文章为例，除了真正的写作过程，还包括了阅读其他关于拖沓的文章，考虑文章的各个部分，整理语句，向别人请教问题等等。每一项任务都属于清单的不同部分，所以你可以在合适的时间才去做某一部分。</p>
<h4 id="u628A_u4EFB_u52A1_u6E05_u5355_u548C_u4F60_u7684_u751F_u6D3B_u7ED3_u5408_u8D77_u6765"><a href="#u628A_u4EFB_u52A1_u6E05_u5355_u548C_u4F60_u7684_u751F_u6D3B_u7ED3_u5408_u8D77_u6765" class="headerlink" title="把任务清单和你的生活结合起来"></a>把任务清单和你的生活结合起来</h4><p>一旦你有了这样一个任务清单，你需要做的事就是时常记得它，而记住它的最好方法是把它放在你能看到的地方。比如说，我总在我桌子上放一摞书，最上面的那一本就是我最近在读的。当我想要读书的时候，我就直接从上面拿一本书来读。<br>对于看电视/电影我也这么做。当我对某一个电影感兴趣的时候，我会把它放在电脑中一个特殊的文件夹内。每当我想休息一下，看看电影的时候，我就会打开那个文件夹。<br>我也想过一些更深入的方式，比如说我把一些想看的文章标记为”待读”(to read)，当我想要上网的时候就看看那些从前积累下来的未读文章。</p>
<h4 id="u63D0_u9AD8_u4F60_u65F6_u95F4_u7684_u8D28_u91CF"><a href="#u63D0_u9AD8_u4F60_u65F6_u95F4_u7684_u8D28_u91CF" class="headerlink" title="提高你时间的质量"></a>提高你时间的质量</h4><p>像上面那样最大限度的利用时间还远远不够，更重要的是提高你自己的时间的质量。那你究竟该怎样做呢？</p>
<h3 id="u51CF_u8F7B_u8EAB_u4F53_u4E0A_u7684_u7EA6_u675F"><a href="#u51CF_u8F7B_u8EAB_u4F53_u4E0A_u7684_u7EA6_u675F" class="headerlink" title="减轻身体上的约束"></a>减轻身体上的约束</h3><h4 id="u643A_u5E26_u7EB8_u548C_u7B14"><a href="#u643A_u5E26_u7EB8_u548C_u7B14" class="headerlink" title="携带纸和笔"></a>携带纸和笔</h4><p>我认识的很多人的口袋里都有记事簿之类的东西。纸和笔在很多时候都是非常有用的，你可以随时随刻的记录自己的想法，我甚至通过这种方法在地铁上写过整篇文章。</p>
<h4 id="u907F_u514D_u88AB_u6253_u6270"><a href="#u907F_u514D_u88AB_u6253_u6270" class="headerlink" title="避免被打扰"></a>避免被打扰</h4><p>对于那些需要集中注意力的任务，你应该尽量避免被打扰。一个很简单的方法是去一个没人能打扰你的地方，另一个方法是告诉周围的人未来一段时间不要打扰你。<br>关于这点不要过犹不及。当你在浪费时间的时候你反倒应该被打扰一下，帮助别人解决问题肯定比坐在那里看新闻更好的利用了时间。</p>
<h3 id="u51CF_u8F7B_u5FC3_u7406_u4E0A_u7684_u7EA6_u675F"><a href="#u51CF_u8F7B_u5FC3_u7406_u4E0A_u7684_u7EA6_u675F" class="headerlink" title="减轻心理上的约束"></a>减轻心理上的约束</h3><h4 id="u5403_uFF0C_u7761_uFF0C_u8FD0_u52A8"><a href="#u5403_uFF0C_u7761_uFF0C_u8FD0_u52A8" class="headerlink" title="吃，睡，运动"></a>吃，睡，运动</h4><p>当你感到很饿，很累，很焦躁的时候，你的时间的质量会很低。解决这个问题很简单，就是：去吃，去睡，去运动。对自己说“虽然我很累了，但我不能休息，因为我必须要工作”会让你感到自己很努力，但事实上休息之后你的效率会更高。既然你迟早都要睡觉，还不如先休息好，来提高剩余时间内的效率。</p>
<h4 id="u4E0E_u5FEB_u4E50_u7684_u4EBA_u76F8_u5904"><a href="#u4E0E_u5FEB_u4E50_u7684_u4EBA_u76F8_u5904" class="headerlink" title="与快乐的人相处"></a>与快乐的人相处</h4><p>跟快乐的人相处会也会让你变得快乐，也会让你心态更放松。也许很多人愿意躲在屋子里，不与其他人接触，埋头干活，他们觉得这样的话时间才没有被“浪费”，但事实上这会让他们变得情绪低落，工作效率也会大大下降。</p>
<h4 id="u4E0E_u670B_u53CB_u5206_u62C5_u4F60_u7684_u538B_u529B"><a href="#u4E0E_u670B_u53CB_u5206_u62C5_u4F60_u7684_u538B_u529B" class="headerlink" title="与朋友分担你的压力"></a>与朋友分担你的压力</h4><p>即使你的朋友并不是能够感染他人，给你带来快乐的那种人，和其他的人一起解决复杂的问题也会让问题变得简单。一方面，精神上的压力大家可以互相分担，另一方面，和其他人在一起可以让你专注于工作而不是时常分心。</p>
<h4 id="u62D6_u6C93"><a href="#u62D6_u6C93" class="headerlink" title="拖沓"></a>拖沓</h4><p>上面所说的那些并不是问题的重点，关于效率大家最大的问题还是“拖沓”。虽然很多人不承认，但是几乎所有人都或多或少的会拖沓。那又该如何避免呢？<br>拖沓是什么？从旁观者来看，你在做好玩的事(如玩游戏，看新闻)而不是做真正的工作。但问题的关键是：你究竟为什么会这样？你的脑子里究竟是怎么想的？<br>我花了很多时间来研究这件事，我能给出的最好解释是在你的大脑赋予“脑力场”给每一项任务。你玩过两块磁铁相互作用吗？如果你让它们异极相对，他们就会相互排斥，你会感到他们之间的磁场力。你越是想要把它们和在一起，越会感到它们之间的排斥力。<br>心智和精神上也是类似的。它是看不见摸不着的，但你却可以感受到它的存在。并且你越是想要接近它，它会离你越远。<br>你不可能通过蛮力来克服两个场之间的排斥力，相反，你应该做的是调转方向。<br>那又是什么产生了“精神力场”呢？似乎有两个主要原因：任务是否艰巨，任务是否是被指派的。</p>
<h3 id="u8270_u5DE8_u7684_u4EFB_u52A1"><a href="#u8270_u5DE8_u7684_u4EFB_u52A1" class="headerlink" title="艰巨的任务"></a>艰巨的任务</h3><h4 id="u628A_u4EFB_u52A1_u7EC6_u5206"><a href="#u628A_u4EFB_u52A1_u7EC6_u5206" class="headerlink" title="把任务细分"></a>把任务细分</h4><p>一个任务很艰巨的原因之一是这个任务很宏大。比如说你想要做一个菜谱构造程序，没有人能一下子完成它，这是一个目标而不是一项任务。一项任务是使你能够朝向目标更进一步的具体概念。一个好的任务是你能够立即拿来实施的，比如”画一个展示菜谱的草图”。<br>当你完成了上一个任务后，下一步就会变得更加清晰。你将会考虑一个菜谱有什么构成，你需要什么样的搜索机制，如何构建菜谱的数据库，等等。这样你就构建了一个引擎，每一个任务都会通向下一个任务。<br>对于每一个比较大的项目，我都会考虑我需要完成一连串什么样的任务，并且将这些任务加入到我的待办事项列表中去。同样，当我做完一些任务之后我会把接下来需要完成的任务再加入任务列表中去。</p>
<h4 id="u7B80_u5316_u4EFB_u52A1"><a href="#u7B80_u5316_u4EFB_u52A1" class="headerlink" title="简化任务"></a>简化任务</h4><p>另一个让任务变得艰巨的原因就是它太复杂了。”写一本书”这个任务会放你感到无从下手，那么就先从写一篇文章开始吧。如果一篇文章也觉得太多了，那么就先写一个段落的概要吧。最重要的是真正做了一些工作，真正的有进展。<br>一旦你明确了你的任务之后，你就可以更清楚的判断它，更容易的理解它。提高完善一些已有的东西比从头创建东西更容易。如果你的一个段落写好了，那么一点一点积累，它会变成一篇文章，最终变成一本书。</p>
<h4 id="u8BA4_u771F_u8003_u8651_u5B83"><a href="#u8BA4_u771F_u8003_u8651_u5B83" class="headerlink" title="认真考虑它"></a>认真考虑它</h4><p>通常来说解决一个困难问题需要一些灵感。如果你对那个领域并不熟悉，你应该从研究这个领域开始，借鉴一下其他人的经验，慢慢的研究理解这个领域，并且做一些小的尝试看看你能否搞定这个领域。</p>
<h4 id="u88AB_u6307_u6D3E_u7684_u4EFB_u52A1"><a href="#u88AB_u6307_u6D3E_u7684_u4EFB_u52A1" class="headerlink" title="被指派的任务"></a>被指派的任务</h4><p>被指派的任务是那些你被要求完成的任务。很多心理学实验都表明:当你”刺激”其他人做什么事的时候，他们反倒不容易做好那个事。奖励，惩罚等外部刺激会扼杀”内在动机”–你对于某个问题发自内心的兴趣。人类的大脑对于被要求做的事有先天的抗拒力。<br>这种现象不仅局限于其他人要求你做的事，当你向自己分配任务时仍然会出现这种现象。如果你对自己说”我应该好好做X工作了，这是我现在最重要的事”，之后你就会感到X突然变成了世界上最困难的事情了。然而一旦当Y变成了”最重要的事”，原来的那个X又变得简单了。</p>
<h4 id="u865A_u6784_u4E00_u4E2A_u4EFB_u52A1"><a href="#u865A_u6784_u4E00_u4E2A_u4EFB_u52A1" class="headerlink" title="虚构一个任务"></a>虚构一个任务</h4><p>如果你要完成X，那就告诉自己做Y。然而不幸的是，这样欺骗自己却很难，因为你清楚你究竟要做什么。</p>
<h4 id="u4E0D_u8981_u81EA_u5DF1_u7ED9_u81EA_u5DF1_u5E03_u7F6E_u4EFB_u52A1"><a href="#u4E0D_u8981_u81EA_u5DF1_u7ED9_u81EA_u5DF1_u5E03_u7F6E_u4EFB_u52A1" class="headerlink" title="不要自己给自己布置任务"></a>不要自己给自己布置任务</h4><p>给自己布置任务看起来很诱人，比如对自己说”我要写完这篇文章才去吃饭”，更糟糕的是让别人假装布置给你一些任务。但是这两种方式都会让你变得更没有效率，事实上你还是在给自己布置任务，你的大脑只会去逃避它。</p>
<h4 id="u628A_u4E8B_u60C5_u53D8_u5F97_u6709_u8DA3"><a href="#u628A_u4E8B_u60C5_u53D8_u5F97_u6709_u8DA3" class="headerlink" title="把事情变得有趣"></a>把事情变得有趣</h4><p>困难的工作听起来不会令人感到愉悦，但事实上这可能就是最能让我感到高兴的事。一个困难的问题不但能让你集中全部注意力，而且当你完成它的时候你会感到非常棒，非常有成就感。<br>所以帮助自己完成一件事的秘密不是说服自己必须完成它，而是说服自己这件事确实非常有意思。如果一件事没有意思的话，你需要做的就是让它变得有意思</p>
<h3 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h3><p>效率的真正秘密在于”聆听自己”，在你饿的时候吃饭，在你疲惫的时候睡觉，当你厌烦的时候休息一下，做那些有趣好玩的项目。<br>这看起来很容易，但是社会上的一些观念正在把我们向相反的方向引导。要想变得更加有效率，我们需要做的就是转过头来”聆听自己”</p>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.cnblogs.com/meng-meng/archive/2011/11/17/2252225.html" target="_blank" rel="external">http://www.cnblogs.com/meng-meng/archive/2011/11/17/2252225.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>帮助自己完成一件事的秘密不是说服自己必须完成它，而是说服自己这件事确实非常有意思。如果一件事没有意思的话，你需要做的就是让它变得有意思.</p>
</blockquote>
<p>肯定有人跟你说过这样的话“你有看电视的那么长时间，都可以用来写一本书]]>
    </summary>
    
      <category term="效率" scheme="http://paranoidq.github.io/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="效率" scheme="http://paranoidq.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[什么是中间件？]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/middleware-expalined-simply/"/>
    <id>http://paranoidq.github.io/2016/05/27/middleware-expalined-simply/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<p>之前找工作之后，主管打电话问将来希望做哪个方向的技术，中间件还是linux还是云计算之类的，没头绪。发现自己其实对于这些方向的具体内容倒不明确了。其他的还好说，之前也有了解到淘宝中间件团队这样的，觉得很NB，但是对于这个中间件到底是什么，似乎没有深究。元旦正好空闲，查阅资料研究研究。</p>
<h3 id="u5B9A_u4E49"><a href="#u5B9A_u4E49" class="headerlink" title="定义"></a>定义</h3><p>维基百科定义：</p>
<blockquote>
<p>提供系统软件和应用软件之间连接的软件，以便于软件各部件之间的沟，特别是应用软件对于系统软件的集中的逻辑，在现代信息技术应用框架如Web服务、面向服务的体系结构等中应用比较广泛。如数据库、Apache的Tomcat，IBM公司的WebSphere,BEA公司的WebLogic[[应用服务器]，东方通公司的Tong系列中间件，以及Kingdee公司的等都属于中间件。</p>
</blockquote>
<p>简单归纳：<br>业务应用 - 中间件 - 基础资源</p>
<ul>
<li>中间件处于两者中间的的位置，封装基础资源，向上层提供更完善的功能。</li>
<li>基础资源包括硬的资源：如CPU、存储(分布式)、网络；我个人认为也包括进程、线程、消息队列、数据库这种软性资源，中间件对这些资源做了封装处理。</li>
</ul>
<h3 id="u4F5C_u7528"><a href="#u4F5C_u7528" class="headerlink" title="作用"></a>作用</h3><ul>
<li>封装</li>
<li>整合</li>
<li>屏蔽</li>
<li>容错</li>
</ul>
<p>我个人归纳为这四个主要功能。封装和整合的是基础资源，使得难用的基础资源更便于使用，而不用考虑细节。（调用顺序、分布式、配置、初始化属性等等）。屏蔽的是底层细节，同时也屏蔽底层的差异（例如，JVM这种本质意义上其实也可算作中间件，通过JVM屏蔽不同系统的差异，从而能够无差异运行Java程序）。容错，则是中间件的另一个重要作用，保证上层无论如何调用，都会得到相应的处理，而不会将错误传递到底层去或直接消失。</p>
<h3 id="u5E38_u89C1_u79CD_u7C7B_uFF1A"><a href="#u5E38_u89C1_u79CD_u7C7B_uFF1A" class="headerlink" title="常见种类："></a>常见种类：</h3><ul>
<li>分布式调用RPC：</li>
<li>消息队列</li>
<li>事务处理</li>
<li>数据库组件</li>
<li>安全组件</li>
<li>并发组件</li>
<li>应用容器组件</li>
<li>日志组件：Apache Kafaka</li>
<li>监控组件：Zookkeeper, Mesos, </li>
</ul>
<h3 id="u963F_u91CC_u5DF4_u5DF4_u4E2D_u95F4_u4EF6_u7684_u51E0_u4E2A_u6848_u4F8B_28_u672C_u8282_u6765_u81EA_u963F_u91CC_u5DF4_u5DF4_u4E2D_u95F4_u4EF6_u56E2_u961F_u535A_u5BA2_29"><a href="#u963F_u91CC_u5DF4_u5DF4_u4E2D_u95F4_u4EF6_u7684_u51E0_u4E2A_u6848_u4F8B_28_u672C_u8282_u6765_u81EA_u963F_u91CC_u5DF4_u5DF4_u4E2D_u95F4_u4EF6_u56E2_u961F_u535A_u5BA2_29" class="headerlink" title="阿里巴巴中间件的几个案例(本节来自阿里巴巴中间件团队博客)"></a>阿里巴巴中间件的几个案例(本节来自阿里巴巴中间件团队博客)</h3><p><img src="http://jm.taobao.org/wp-content/uploads/2013/07/jm.jpg" alt="阿里巴巴中间件支撑平台"></p>
<ul>
<li><strong>Diamond</strong>: 软负载配置中心，用于存储静态配置，并能够提供配置变更动态推送功能，结构简单，超高可用性。在全网被使用于存储不经常发生变化的配置信息。</li>
<li><strong>Notify</strong>, <strong>Meta</strong>: 消息中间件</li>
<li><strong>HSF</strong>: 阿里分布式服务框架，统一整个集团rpc的调用，包括服务方式的统一调用，软负载，服务治理等，提供一套简单方便，高性能的分布式服务框架。</li>
<li><strong>eagleeye</strong>: 淘宝分布式跟踪系统，该系统实现基于单链路的实时监控，系统依赖，性能调优，风险控制等</li>
<li><strong>Pandora</strong>: 淘宝隔离容器，该系统主要解决大规模富二方包升级，二方包隔离，二方包监控等问题。</li>
<li><strong>TDDL</strong>: 通用数据访问层，部署在客户端的jar包，用于将用户的SQL路由到指定的数据库中。目前有1000+应用在使用</li>
<li><strong>精卫</strong>: 通用数据总线，用于将数据从一个数据节点迁移到其他一个或多个数据节点中，目前支持mysql,oracle,hbase等。目前有100+应用在使用</li>
<li><strong>愚公</strong>: 数据自动迁移引擎，海量数据自动运维工具，可用于对用户无影响的自动扩容和缩容，数据平滑迁移，以及异构数据源迁移，目前已经完成了214次业务迁移或扩容。</li>
<li><strong>NewSQL</strong>: NewSQL系统，可以将SQL运行于传统MYSQL/Oracle关系数据库，也可以支持NoSQL数据库如bdb , hbase等。 可以实现其中的跨机合并和跨机交操作等复杂关系操作。</li>
<li><strong>CSP2.0</strong>: 持续稳定性平台帮助阿里系统保障高可用性，包含线上压测、容量规划、依赖治理、限流降级、监控报警、问题定位等模块。</li>
<li><strong>Hotspot</strong>: 性能分析平台通过对基础软件、服务端、前端加载、网络、CDN等方面的性能分析，来帮助阿里系统提升吞吐量、降低延迟时间、节约成本。</li>
<li><strong>TProfiler</strong>: TProfiler是可以在生产环境长期使用的性能分析工具，通过在Java层面记录代码执行热点、对象创建热点等数据，帮助系统定位性能瓶颈。</li>
</ul>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BB%B6" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BB%B6</a><br><a href="http://jm-blog.aliapp.com/?page_id=2449" target="_blank" rel="external">阿里巴巴中间件团队博客</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前找工作之后，主管打电话问将来希望做哪个方向的技术，中间件还是linux还是云计算之类的，没头绪。发现自己其实对于这些方向的具体内容倒不明确了。其他的还好说，之前也有了解到淘宝中间件团队这样的，觉得很NB，但是对于这个中间件到底是什么，似乎没有深究。元旦正好空闲，查阅资料]]>
    </summary>
    
      <category term="java" scheme="http://paranoidq.github.io/tags/java/"/>
    
      <category term="架构" scheme="http://paranoidq.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="中间件" scheme="http://paranoidq.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="架构" scheme="http://paranoidq.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac Terminal Commands]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/mac-terminal-commands/"/>
    <id>http://paranoidq.github.io/2016/05/27/mac-terminal-commands/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<p>   本文所有快捷键基于iterm2. 有些快捷键被系统屏蔽了，到<code>系统偏好设置</code>中删除无用的快捷键即可</p>
<h3 id="u5149_u6807_u64CD_u4F5C"><a href="#u5149_u6807_u64CD_u4F5C" class="headerlink" title="光标操作"></a>光标操作</h3><ul>
<li>显示光标位置： <code>command + /</code></li>
<li>移动到行首： <code>ctrl + a</code></li>
<li>移动到行尾： <code>ctrl + e</code></li>
<li>向前移动一个字符： <code>ctrl + f</code> = Forward</li>
<li>向后移动一个字符： <code>ctrl + b</code> = Backward</li>
<li>向前移动一个单词： <code>alt + f</code></li>
<li>向后移动一个单词： <code>alt + b</code></li>
</ul>
<h3 id="u5B57_u7B26_u64CD_u4F5C"><a href="#u5B57_u7B26_u64CD_u4F5C" class="headerlink" title="字符操作"></a>字符操作</h3><ul>
<li>删除一个字符： <code>ctrl + d</code> = <code>Delete</code></li>
<li>删除一个字符（前向）： <code>ctrl + h</code> = <code>Backspace</code></li>
<li>删除光标前到行首的字符： <code>ctrl + u</code> = 清除本行</li>
<li>删除光标前到行尾的字符： <code>ctrl + k</code></li>
<li>恢复之前的操作： <code>ctrl + y</code></li>
</ul>
<h3 id="u8F93_u5165_u64CD_u4F5C"><a href="#u8F93_u5165_u64CD_u4F5C" class="headerlink" title="输入操作"></a>输入操作</h3><ul>
<li>自动补全历史记录： <code>command + ;</code></li>
</ul>
<h3 id="u5C4F_u5E55_u64CD_u4F5C"><a href="#u5C4F_u5E55_u64CD_u4F5C" class="headerlink" title="屏幕操作"></a>屏幕操作</h3><ul>
<li>清屏： <code>command + r</code></li>
<li>新建标签： <code>ctrl + t</code></li>
<li>关闭当前标签页： <code>command + w</code></li>
<li>左右分割： <code>command + d</code></li>
<li>垂直分割： <code>command + shift + d</code></li>
<li>切换标签页： <code>command + (+alt) +[number]/[up/down]</code></li>
<li></li>
</ul>
<h3 id="u6587_u4EF6_u64CD_u4F5C"><a href="#u6587_u4EF6_u64CD_u4F5C" class="headerlink" title="文件操作"></a>文件操作</h3><ul>
<li>打开文件： <code>command + [Click]</code></li>
</ul>
<h3 id="job_u64CD_u4F5C"><a href="#job_u64CD_u4F5C" class="headerlink" title="job操作"></a>job操作</h3><ul>
<li>挂起job： <code>ctrl + z</code></li>
<li>查看挂起的job： <code>jobs</code></li>
<li>继续执行挂起的job： <code>fg</code></li>
<li></li>
<li></li>
<li></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>   本文所有快捷键基于iterm2. 有些快捷键被系统屏蔽了，到<code>系统偏好设置</code>中删除无用的快捷键即可</p>
<h3 id="u5149_u6807_u64CD_u4F5C"><a href="#u5149_u6807_u64CD_u4F5C" c]]>
    </summary>
    
      <category term="mac" scheme="http://paranoidq.github.io/tags/mac/"/>
    
      <category term="快捷键" scheme="http://paranoidq.github.io/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
      <category term="mac" scheme="http://paranoidq.github.io/categories/mac/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[近几年前端技术盘点以及2016年技术发展方向(好文，转)]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/front-end-trend/"/>
    <id>http://paranoidq.github.io/2016/05/27/front-end-trend/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.barretlee.com/blog/2015/12/10/after-framework-we-gonna-to-hug-data/" target="_blank" rel="external">http://www.barretlee.com/blog/2015/12/10/after-framework-we-gonna-to-hug-data/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.barretlee.com/blog/2015/12/10/after-framework-we-gonna-to-hug-data/" target="_blank" rel="external">http://www.barret]]>
    </summary>
    
      <category term="前端" scheme="http://paranoidq.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="前端" scheme="http://paranoidq.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[20个工具监控Linux服务性的性能(转)]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/linux-server-monitoring-tools/"/>
    <id>http://paranoidq.github.io/2016/05/27/linux-server-monitoring-tools/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<p>对于每个系统管理员或网络管理员来说，每天要监控和调试 Linux 系统性能问题都是非常困难的工作。我已经有5年 Linux 管理员的工作经历，知道如何监控系统使其保持正常运行。为此，我们编写了对于 Linux/Unix 系统管理员非常有用的并且最常用的20个命令行系统监视工具。这些命令可以在所有版本的 Linux 下使用去监控和查找系统性能的实际原因。这些监控命令足够你选择适合你的监控场景。</p>
<a id="more"></a>
<h3 id="top__u2014Linux_u7CFB_u7EDF_u8FDB_u7A0B_u76D1_u63A7"><a href="#top__u2014Linux_u7CFB_u7EDF_u8FDB_u7A0B_u76D1_u63A7" class="headerlink" title="top —Linux系统进程监控"></a>top —Linux系统进程监控</h3><p>top 命令是性能监控程序，它可以在很多 Linux/Unix 版本下使用，并且它也是 Linux 系统管理员经常使用的监控系统性能的工具。Top 命令可以定期显示所有正在运行和实际运行并且更新到列表中，它显示出 CPU 的使用、内存的使用、交换内存、缓存大小、缓冲区大小、过程控制、用户和更多命令。它也会显示内存和 CPU 使用率过高的正在运行的进程。当我们对 Linux 系统需要去监控和采取正确的行动时，top 命令对于系统管理员是非常有用的。让我们看下 top 命令的实际操作。</p>
<p><img src="http://www.linuxstory.org/wp-content/uploads/2015/12/1.jpg" alt="top"></p>
<h3 id="vmstat__u2014__u865A_u62DF_u5185_u5B58_u7EDF_u8BA1"><a href="#vmstat__u2014__u865A_u62DF_u5185_u5B58_u7EDF_u8BA1" class="headerlink" title="vmstat — 虚拟内存统计"></a>vmstat — 虚拟内存统计</h3><p>vmstat 命令是用于显示虚拟内存、内核线程、磁盘、系统进程、I/O 模块、中断、CPU 活跃状态等更多信息。在默认的情况下，Linux 系统是没有 vmstat 这个命令的，如果你要使用它，必须安装一个包名叫 sysstat 的程序包。命令格式常用用法如下：<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span> <span class="comment">vmstat</span></span><br><span class="line"><span class="comment">procs</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">memory</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">swap</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">io</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">system</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">cpu</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line"> <span class="comment">r</span>  <span class="comment">b</span>   <span class="comment">swpd</span>   <span class="comment">free</span>  <span class="comment">inact</span> <span class="comment">active</span>   <span class="comment">si</span>   <span class="comment">so</span>    <span class="comment">bi</span>    <span class="comment">bo</span>   <span class="comment">in</span>   <span class="comment">cs</span> <span class="comment">us</span> <span class="comment">sy</span> <span class="comment">id</span> <span class="comment">wa</span> <span class="comment">st</span></span><br><span class="line"> <span class="comment">1</span>  <span class="comment">0</span>      <span class="comment">0</span> <span class="comment">810420</span>  <span class="comment">97380</span>  <span class="comment">70628</span>    <span class="comment">0</span>    <span class="comment">0</span>   <span class="comment">115</span>     <span class="comment">4</span>   <span class="comment">89</span>   <span class="comment">79</span>  <span class="comment">1</span>  <span class="comment">6</span> <span class="comment">90</span>  <span class="comment">3</span>  <span class="comment">0</span></span><br></pre></td></tr></table></figure></p>
<h3 id="lsof__u2014__u6253_u5F00_u6587_u4EF6_u5217_u8868"><a href="#lsof__u2014__u6253_u5F00_u6587_u4EF6_u5217_u8868" class="headerlink" title="lsof — 打开文件列表"></a>lsof — 打开文件列表</h3><p>lsof 命令对于很多 Linux/Unix 系统都可以使用，主要以列表的形式显示打开的文件和进程。</p>
<p>打开的文件主要包括磁盘文件、网络套接字、管道、设备和进程。使用这个命令的主要原因是一个一个盘不能卸载并且显示文件正在使用或者打开的错误信息。这个命令很容易看出哪些文件正在使用。这个命令最常用的格式：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lsof</span></span><br><span class="line">COMMAND     PID      USER   FD      TYPE     DEVICE     SIZE       NODE NAME</span><br><span class="line">init          <span class="number">1</span>      root  cwd       DIR      <span class="number">104</span>,<span class="number">2</span>     <span class="number">4096</span>          <span class="number">2</span> /</span><br><span class="line">init          <span class="number">1</span>      root  rtd       DIR      <span class="number">104</span>,<span class="number">2</span>     <span class="number">4096</span>          <span class="number">2</span> /</span><br><span class="line">init          <span class="number">1</span>      root  txt       REG      <span class="number">104</span>,<span class="number">2</span>    <span class="number">38652</span>   <span class="number">17710339</span> /sbin/init</span><br><span class="line">init          <span class="number">1</span>      root  mem       REG      <span class="number">104</span>,<span class="number">2</span>   <span class="number">129900</span>     <span class="number">196453</span> /<span class="class"><span class="keyword">lib</span>/<span class="title">ld</span>-2.5.<span class="title">so</span></span></span><br><span class="line">init          <span class="number">1</span>      root  mem       REG      <span class="number">104</span>,<span class="number">2</span>  <span class="number">1693812</span>     <span class="number">196454</span> /<span class="class"><span class="keyword">lib</span>/<span class="title">libc</span>-2.5.<span class="title">so</span></span></span><br><span class="line">init          <span class="number">1</span>      root  mem       REG      <span class="number">104</span>,<span class="number">2</span>    <span class="number">20668</span>     <span class="number">196479</span> /<span class="class"><span class="keyword">lib</span>/<span class="title">libdl</span>-2.5.<span class="title">so</span></span></span><br><span class="line">init          <span class="number">1</span>      root  mem       REG      <span class="number">104</span>,<span class="number">2</span>   <span class="number">245376</span>     <span class="number">196419</span> /<span class="class"><span class="keyword">lib</span>/<span class="title">libsepol</span>.<span class="title">so</span>.1</span></span><br><span class="line">init          <span class="number">1</span>      root  mem       REG      <span class="number">104</span>,<span class="number">2</span>    <span class="number">93508</span>     <span class="number">196431</span> /<span class="class"><span class="keyword">lib</span>/<span class="title">libselinux</span>.<span class="title">so</span>.1</span></span><br><span class="line">init          <span class="number">1</span>      root   <span class="number">10</span>u     FIFO       <span class="number">0</span>,<span class="number">17</span>                 <span class="number">953</span> /dev/initctl</span><br></pre></td></tr></table></figure>
<h3 id="tcpdump__u2014__u7F51_u7EDC_u6570_u636E_u5305_u5206_u6790_u5668"><a href="#tcpdump__u2014__u7F51_u7EDC_u6570_u636E_u5305_u5206_u6790_u5668" class="headerlink" title="tcpdump — 网络数据包分析器"></a>tcpdump — 网络数据包分析器</h3><p>tcpdump 是一种使用最广泛的命令行网络数据包分析器或数据包嗅探程序，主要用于捕获和过滤 TCP/IP 包收到或者转移在一个网络的特定借口信息。它也提供了一个选项参数去保存将捕获的包在一个文件中用于以后分析使用，tcpdump 几乎在所有的 Linux 版本中都是可用的。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">tcpdump</span> <span class="selector-tag">-i</span> <span class="selector-tag">eth0</span></span><br><span class="line"><span class="selector-tag">tcpdump</span>: <span class="selector-tag">verbose</span> <span class="selector-tag">output</span> <span class="selector-tag">suppressed</span>, <span class="selector-tag">use</span> <span class="selector-tag">-v</span> <span class="selector-tag">or</span> <span class="selector-tag">-vv</span> <span class="selector-tag">for</span> <span class="selector-tag">full</span> <span class="selector-tag">protocol</span> <span class="selector-tag">decode</span></span><br><span class="line"><span class="selector-tag">listening</span> <span class="selector-tag">on</span> <span class="selector-tag">eth0</span>, <span class="selector-tag">link-type</span> <span class="selector-tag">EN10MB</span> (<span class="selector-tag">Ethernet</span>), <span class="selector-tag">capture</span> <span class="selector-tag">size</span> 96 <span class="selector-tag">bytes</span></span><br><span class="line">22<span class="selector-pseudo">:08</span><span class="selector-pseudo">:59.617628</span> <span class="selector-tag">IP</span> <span class="selector-tag">tecmint</span><span class="selector-class">.com</span><span class="selector-class">.ssh</span> &gt; 115<span class="selector-class">.113</span><span class="selector-class">.134</span><span class="selector-class">.3</span><span class="selector-class">.static-mumbai</span><span class="selector-class">.vsnl</span><span class="selector-class">.net</span><span class="selector-class">.in</span><span class="selector-class">.28472</span>: <span class="selector-tag">P</span> 2532133365<span class="selector-pseudo">:2532133481(116)</span> <span class="selector-tag">ack</span> 3561562349 <span class="selector-tag">win</span> 9648</span><br><span class="line">22<span class="selector-pseudo">:09</span><span class="selector-pseudo">:07.653466</span> <span class="selector-tag">IP</span> <span class="selector-tag">tecmint</span><span class="selector-class">.com</span><span class="selector-class">.ssh</span> &gt; 115<span class="selector-class">.113</span><span class="selector-class">.134</span><span class="selector-class">.3</span><span class="selector-class">.static-mumbai</span><span class="selector-class">.vsnl</span><span class="selector-class">.net</span><span class="selector-class">.in</span><span class="selector-class">.28472</span>: <span class="selector-tag">P</span> 116<span class="selector-pseudo">:232(116)</span> <span class="selector-tag">ack</span> 1 <span class="selector-tag">win</span> 9648</span><br><span class="line">22<span class="selector-pseudo">:08</span><span class="selector-pseudo">:59.617916</span> <span class="selector-tag">IP</span> 115<span class="selector-class">.113</span><span class="selector-class">.134</span><span class="selector-class">.3</span><span class="selector-class">.static-mumbai</span><span class="selector-class">.vsnl</span><span class="selector-class">.net</span><span class="selector-class">.in</span><span class="selector-class">.28472</span> &gt; <span class="selector-tag">tecmint</span><span class="selector-class">.com</span><span class="selector-class">.ssh</span>: . <span class="selector-tag">ack</span> 116 <span class="selector-tag">win</span> 64347</span><br></pre></td></tr></table></figure></p>
<h3 id="netstat__u2014__u7F51_u7EDC_u7EDF_u8BA1"><a href="#netstat__u2014__u7F51_u7EDC_u7EDF_u8BA1" class="headerlink" title="netstat — 网络统计"></a>netstat — 网络统计</h3><p>netstat 命令是一个监控网络数据包传入和传出的统计界面的命令行工具。它对于许多系统管理员去监控网络性能和解决网络相关问题是一个非常有用的工具。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># netstat -a | more</span></span><br><span class="line">Active Internet connections (servers <span class="keyword">and</span> established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address               Foreign Address             State</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> *<span class="symbol">:mysql</span>                     *<span class="symbol">:*</span>                         LISTEN</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> *<span class="symbol">:sunrpc</span>                    *<span class="symbol">:*</span>                         LISTEN</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> *<span class="symbol">:realm-rusd</span>                *<span class="symbol">:*</span>                         LISTEN</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> *<span class="symbol">:ftp</span>                       *<span class="symbol">:*</span>                         LISTEN</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> localhost.<span class="symbol">localdomain:</span>ipp   *<span class="symbol">:*</span>                         LISTEN</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> localhost.<span class="symbol">localdomain:</span>smtp  *<span class="symbol">:*</span>                         LISTEN</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> localhost.<span class="symbol">localdomain:</span>smtp  localhost.<span class="symbol">localdomain:</span><span class="number">42709</span> TIME_WAIT</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> localhost.<span class="symbol">localdomain:</span>smtp  localhost.<span class="symbol">localdomain:</span><span class="number">42710</span> TIME_WAIT</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> *<span class="symbol">:http</span>                      *<span class="symbol">:*</span>                         LISTEN</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> *<span class="symbol">:ssh</span>                       *<span class="symbol">:*</span>                         LISTEN</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> *<span class="symbol">:https</span>                     *<span class="symbol">:*</span>                         LISTEN</span><br></pre></td></tr></table></figure></p>
<p>(Linux Story译文这里的图片给错了，我重新从英文原文找到对应的图)</p>
<h3 id="htop__u2014__u8FDB_u7A0B_u76D1_u63A7"><a href="#htop__u2014__u8FDB_u7A0B_u76D1_u63A7" class="headerlink" title="htop — 进程监控"></a>htop — 进程监控</h3><p>htop 是一个更加先进的交互式的实时监控工具。htop 与 top 命令非常相似，但是他有一些非常丰富的功能，如用户友好界面管理进程、快捷键、横向和纵向进程等更多的。htop 是一个第三方工具并不包括在 Linux 系统中，你需要使用包管理工具进行安装。</p>
<p><img src="http://www.linuxstory.org/wp-content/uploads/2015/12/6.jpg" alt="htop"></p>
<h3 id="iotop__u2014__u76D1_u63A7_Linux__u78C1_u76D8_I/O"><a href="#iotop__u2014__u76D1_u63A7_Linux__u78C1_u76D8_I/O" class="headerlink" title="iotop — 监控 Linux 磁盘 I/O"></a>iotop — 监控 Linux 磁盘 I/O</h3><p>iotop 也是和 top 和 htop 命令相似，但是它会有一个报告功能去监控和显示实时的磁盘 I/O 输入和输出和程序进程。这个工具对于查找精确的高的磁盘读/写过程是非常有用的。</p>
<p><img src="http://www.linuxstory.org/wp-content/uploads/2015/12/7.jpg" alt="iotop"></p>
<h3 id="iostat__u2014__u8F93_u5165/_u8F93_u51FA_u7EDF_u8BA1"><a href="#iostat__u2014__u8F93_u5165/_u8F93_u51FA_u7EDF_u8BA1" class="headerlink" title="iostat — 输入/输出统计"></a>iostat — 输入/输出统计</h3><p>iostat 是收集和展示系统输入和输出存储设备统计的简单工具。这个工具通常用于查找存储设备性能问题，包括设备、本地磁盘、例如 NFS 远程磁盘。<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># iostat</span><br><span class="line">Linux <span class="number">2.6.18-238</span>.<span class="number">9</span>.<span class="number">1</span>.el5 (tecmint.com)         <span class="number">09/13/2012</span></span><br><span class="line"> </span><br><span class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">           <span class="number">2</span>.<span class="number">60</span>    <span class="number">3</span>.<span class="number">65</span>    <span class="number">1</span>.<span class="number">04</span>    <span class="number">4</span>.<span class="number">29</span>    <span class="number">0</span>.<span class="number">00</span>   <span class="number">88</span>.<span class="number">42</span></span><br><span class="line"> </span><br><span class="line">Device:            tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn</span><br><span class="line">cciss/c0d0       <span class="number">17</span>.<span class="number">79</span>       <span class="number">545</span>.<span class="number">80</span>       <span class="number">256</span>.<span class="number">52</span>  <span class="number">855159769</span>  <span class="number">401914750</span></span><br><span class="line">cciss/c0d0p1      <span class="number">0</span>.<span class="number">00</span>         <span class="number">0</span>.<span class="number">00</span>         <span class="number">0</span>.<span class="number">00</span>       <span class="number">5459</span>       <span class="number">3518</span></span><br><span class="line">cciss/c0d0p2     <span class="number">16</span>.<span class="number">45</span>       <span class="number">533</span>.<span class="number">97</span>       <span class="number">245</span>.<span class="number">18</span>  <span class="number">836631746</span>  <span class="number">384153384</span></span><br><span class="line">cciss/c0d0p3      <span class="number">0</span>.<span class="number">63</span>         <span class="number">5</span>.<span class="number">58</span>         <span class="number">3</span>.<span class="number">97</span>    <span class="number">8737650</span>    <span class="number">6215544</span></span><br><span class="line">cciss/c0d0p4      <span class="number">0</span>.<span class="number">00</span>         <span class="number">0</span>.<span class="number">00</span>         <span class="number">0</span>.<span class="number">00</span>          <span class="number">8</span>          <span class="number">0</span></span><br><span class="line">cciss/c0d0p5      <span class="number">0</span>.<span class="number">63</span>         <span class="number">3</span>.<span class="number">79</span>         <span class="number">5</span>.<span class="number">03</span>    <span class="number">5936778</span>    <span class="number">7882528</span></span><br><span class="line">cciss/c0d0p6      <span class="number">0</span>.<span class="number">08</span>         <span class="number">2</span>.<span class="number">46</span>         <span class="number">2</span>.<span class="number">34</span>    <span class="number">3847771</span>    <span class="number">3659776</span></span><br></pre></td></tr></table></figure></p>
<h3 id="IPTraf__u2014_u5B9E_u65F6IP_u5C40_u57DF_u7F51_u76D1_u63A7"><a href="#IPTraf__u2014_u5B9E_u65F6IP_u5C40_u57DF_u7F51_u76D1_u63A7" class="headerlink" title="IPTraf —实时IP局域网监控"></a>IPTraf —实时IP局域网监控</h3><p>IPTraf 是一个基于开源的 Linux 系统实时网络（IP 网络）监测的工具。它能收集到各种各样的信息，如通过网络对 IP 流量监测，包括 TCP 标志信息、ICMP 详细细节、TCP/UDP 流量故障、TCP 连接的数据包和拜恩计数。并且它还收集 TCP，UDP，ICMP，IP，非 IP，IP 校验错误，界面活性等一般信息和详细信息的接口统计数据。<br><img src="http://www.tecmint.com/wp-content/uploads/2013/02/IPTraf2.png" alt="IPtraf"></p>
<h3 id="Psacct__u6216_u8005_Acct__u2014__u76D1_u89C6_u7528_u6237_u6D3B_u52A8"><a href="#Psacct__u6216_u8005_Acct__u2014__u76D1_u89C6_u7528_u6237_u6D3B_u52A8" class="headerlink" title="Psacct 或者 Acct — 监视用户活动"></a>Psacct 或者 Acct — 监视用户活动</h3><p>Psacct 或者 Acct 是用于监测每个用户对系统的活跃状态的一个非常有用的工具。在后台有两个守护进程在运行，一个是密切关注系统上每个用户的整体活动，另一个进程关注有哪些资源被它们消耗。</p>
<p>这个工具对于系统管理员是非常有用的去跟踪每个用户的活动，可以知道用户正在做什么，发出了什么样的命令，占用了多少资源，多长时间活跃在系统上。</p>
<h3 id="Monit__u2014__u7A0B_u5E8F_u548C_u670D_u52A1_u76D1_u6D4B"><a href="#Monit__u2014__u7A0B_u5E8F_u548C_u670D_u52A1_u76D1_u6D4B" class="headerlink" title="Monit — 程序和服务监测"></a>Monit — 程序和服务监测</h3><p>这是一个免费的开源的基于 web 程序的自动监控和管理系统进程、程序、文件、目录、权限、校验文件系统。它监控的服务包括 Apache、MYSQL、Mail、FTP、Nginx 等等。系统状态是可以从命令行或者自己的网络接口来查看。</p>
<p><img src="http://www.tecmint.com/wp-content/uploads/2013/02/Monit-Monitoring.jpg" alt="Monit"></p>
<h3 id="NetHogs__u2014__u76D1_u89C6_u6BCF_u4E2A_u8FDB_u7A0B_u7684_u7F51_u7EDC_u5E26_u5BBD"><a href="#NetHogs__u2014__u76D1_u89C6_u6BCF_u4E2A_u8FDB_u7A0B_u7684_u7F51_u7EDC_u5E26_u5BBD" class="headerlink" title="NetHogs — 监视每个进程的网络带宽"></a>NetHogs — 监视每个进程的网络带宽</h3><p>NetHogs 是一个开源的漂亮的小程序（类似于 Linux 上面的 top 命令），在您的系统上保持每个进程的网络活动状态。它也保持了一个程序或者应用实时的网络流量带宽使用情况。</p>
<p><img src="http://www.tecmint.com/wp-content/uploads/2013/02/NetHogs-bandwidth-Monitoring.jpg" alt="NetHogs"></p>
<h3 id="iftop__u2014__u7F51_u7EDC_u5E26_u5BBD_u76D1_u63A7"><a href="#iftop__u2014__u7F51_u7EDC_u5E26_u5BBD_u76D1_u63A7" class="headerlink" title="iftop — 网络带宽监控"></a>iftop — 网络带宽监控</h3><p>iftop 是另一个基于终端的开源的系统监测工具，主要功能是通过你自己系统上的网络接口显示一个经常更新的网络带宽利用率的列表（即源主机和目的主机）。iftop 监控的是网络的使用情况，而 top 监控的是 CPU 的使用情况。iftop 监视一个选定的接口并且显示两台主机之间当前宽带的使用情况。</p>
<p><img src="http://www.tecmint.com/wp-content/uploads/2013/04/iftop.png" alt="iftop"></p>
<h3 id="Monitorix__u2014__u7CFB_u7EDF_u548C_u7F51_u7EDC_u76D1_u63A7"><a href="#Monitorix__u2014__u7CFB_u7EDF_u548C_u7F51_u7EDC_u76D1_u63A7" class="headerlink" title="Monitorix — 系统和网络监控"></a>Monitorix — 系统和网络监控</h3><p>Monitorix 是一个尽可能多的在 Linux/Unix 上一个轻量级监控工具，主要设计是监控正在运行的系统和网络资源。它有一个内置的 HTTP web 服务去定期收集系统和网络信息并显示成图片。它可以监视系统的平均负载使用、内存的分配、磁盘驱动器、系统服务、网络端口、邮件统计（Sendmail、Postfix、Dovecot 等等）、MYSQL 数据库等等更多的服务。它的主要目的是监控整个系统的性能，并且有助于监测故障、瓶颈、异常活动等状况。</p>
<p><img src="http://www.tecmint.com/wp-content/uploads/2013/04/Monitorix-Monitoring.png" alt="Monitorix"></p>
<h3 id="Arpwatch__u2014__u4EE5_u592A_u7F51_u6D3B_u52A8_u76D1_u63A7_u5668"><a href="#Arpwatch__u2014__u4EE5_u592A_u7F51_u6D3B_u52A8_u76D1_u63A7_u5668" class="headerlink" title="Arpwatch — 以太网活动监控器"></a>Arpwatch — 以太网活动监控器</h3><p>Arpwatch是一种用来监视 Linux 网络的以太网的网络流量的地址解析（网络地址转换）的一个程序。它一直随着网络时间戳的变化监视以太网流量和产生日志的 IP 和 MAC 地址对。当一个 IP 地址或 MAC 地址对发生变化的时候，它会发送电子邮件通知管理员。</p>
<p>并且它在检测 ARP 攻击是非常有用的。</p>
<h3 id="Suricata__u2014__u7F51_u7EDC_u5B89_u5168_u76D1_u63A7"><a href="#Suricata__u2014__u7F51_u7EDC_u5B89_u5168_u76D1_u63A7" class="headerlink" title="Suricata — 网络安全监控"></a>Suricata — 网络安全监控</h3><p>Suricata 是一个高性能的开源的网络安全与入侵检测与预防 Linux、FreeBSD、Windows 等操作系统的监控工具。它是一个非营利基金 OISF（Open Information Security Foundation）拥有的。</p>
<h3 id="VnStat_PHP__u2014__u76D1_u6D4B_u7F51_u7EDC_u5E26_u5BBD"><a href="#VnStat_PHP__u2014__u76D1_u6D4B_u7F51_u7EDC_u5E26_u5BBD" class="headerlink" title="VnStat PHP — 监测网络带宽"></a>VnStat PHP — 监测网络带宽</h3><p>VnStat PHP 是一个 web 前端应用最流行的社交工具叫“vnstat”。 VnStat PHP 使用了很好的图形模式监控网络流量的使用情况。它显示了每时、每天、每月的总结报告中的网络流量使用情况。</p>
<h3 id="Nagios__u2014__u7F51_u7EDC/_u670D_u52A1_u5668_u76D1_u63A7"><a href="#Nagios__u2014__u7F51_u7EDC/_u670D_u52A1_u5668_u76D1_u63A7" class="headerlink" title="Nagios — 网络/服务器监控"></a>Nagios — 网络/服务器监控</h3><p>Nagios 是一个领先的开源的强大的监控系统，网络/系统管理员在他们影响主要业务流程之前识别和解决服务器相关的问题。Nagios 可以监控远程 Linux、Windows、开关、单窗口的路由器和打印机。它能显示你的网络和服务器关键的告警，有利于在错误反生之前帮助你解决问题。</p>
<h3 id="Nmon__u2014__u76D1_u63A7Linux_u7CFB_u7EDF_u6027_u80FD"><a href="#Nmon__u2014__u76D1_u63A7Linux_u7CFB_u7EDF_u6027_u80FD" class="headerlink" title="Nmon — 监控Linux系统性能"></a>Nmon — 监控Linux系统性能</h3><p>Nmon（即奈吉尔性能监视器）工具用来监视 Linux 系统的所有资源包括：CPU、内存、磁盘使用率、网络上的进程、NFS、内核等等。这个工具有两个模式：即在线模式和捕捉模式。在线模式适用于实时监控，捕捉模式用于存储输出为 CSV 格式后的处理。</p>
<p><img src="http://www.tecmint.com/wp-content/uploads/2013/12/Nmon.jpeg" alt="Nmon"></p>
<h3 id="Collectl__u2014__u4E00_u4F53_u5316_u6027_u80FD_u68C0_u6D4B_u5DE5_u5177"><a href="#Collectl__u2014__u4E00_u4F53_u5316_u6027_u80FD_u68C0_u6D4B_u5DE5_u5177" class="headerlink" title="Collectl — 一体化性能检测工具"></a>Collectl — 一体化性能检测工具</h3><p>Collectl 是另一个功能强大的基于命令行的监控工具，它可用于收集有关系统资源的信息，包括 CPU 使用率、内存、网络、节点、进程、NFS、TCP 套接等等。</p>
<p><img src="http://www.tecmint.com/wp-content/uploads/2013/12/Collectl.jpg" alt="Collectl"></p>
<h3 id="LinuxStory_u8BD1_u6587_uFF0C_u539F_u6587"><a href="#LinuxStory_u8BD1_u6587_uFF0C_u539F_u6587" class="headerlink" title="LinuxStory译文，原文"></a>LinuxStory译文，原文</h3><p><a href="http://www.linuxstory.org/command-line-tools-to-monitor-linux-performance/" target="_blank" rel="external">http://www.linuxstory.org/command-line-tools-to-monitor-linux-performance/</a><br><a href="http://www.tecmint.com/command-line-tools-to-monitor-linux-performance/" target="_blank" rel="external">http://www.tecmint.com/command-line-tools-to-monitor-linux-performance/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>对于每个系统管理员或网络管理员来说，每天要监控和调试 Linux 系统性能问题都是非常困难的工作。我已经有5年 Linux 管理员的工作经历，知道如何监控系统使其保持正常运行。为此，我们编写了对于 Linux/Unix 系统管理员非常有用的并且最常用的20个命令行系统监视工具。这些命令可以在所有版本的 Linux 下使用去监控和查找系统性能的实际原因。这些监控命令足够你选择适合你的监控场景。</p>]]>
    
    </summary>
    
      <category term="linux" scheme="http://paranoidq.github.io/tags/linux/"/>
    
      <category term="server" scheme="http://paranoidq.github.io/tags/server/"/>
    
      <category term="linux" scheme="http://paranoidq.github.io/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux Server Commands]]></title>
    <link href="http://paranoidq.github.io/2016/05/27/linux-server-command/"/>
    <id>http://paranoidq.github.io/2016/05/27/linux-server-command/</id>
    <published>2016-05-27T15:45:36.000Z</published>
    <updated>2016-05-27T15:45:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="ssh_u8FDC_u7A0B_u767B_u5F55"><a href="#ssh_u8FDC_u7A0B_u767B_u5F55" class="headerlink" title="ssh远程登录"></a>ssh远程登录</h3><p>服务器需要开启远程服务</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 针对fedora</span></span><br><span class="line">service sshd status</span><br><span class="line"><span class="meta"># 通用检测方法：</span></span><br><span class="line">ps -e | grep ssh</span><br><span class="line"></span><br><span class="line"><span class="meta"># fedora</span></span><br><span class="line">service sshd start</span><br><span class="line"><span class="meta"># ubuntu</span></span><br><span class="line">/etc/init.d/ssh start[/stop/restart]</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>客户端登陆：</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh paranoidq@<span class="string">[ip]</span></span><br></pre></td></tr></table></figure>
<p>免密码登陆</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh-keygen -t rsa </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将公钥id_rsa.pub拷贝到目标机器上的对应位置</span></span><br><span class="line"><span class="variable">$ </span>scp /Users/paranoidq/.ssh/id_rsa.pub paranoidq<span class="variable">@192</span>.<span class="number">168.235</span>.<span class="number">131</span><span class="symbol">:/home/paranoidq/</span>.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<h3 id="u67E5_u770BLinux_u670D_u52A1_u5668_u72B6_u51B5"><a href="#u67E5_u770BLinux_u670D_u52A1_u5668_u72B6_u51B5" class="headerlink" title="查看Linux服务器状况"></a>查看Linux服务器状况</h3><h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><p>主要通过/proc文件夹下面的文件来获取</p>
<figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取CPU个数</span></span><br><span class="line">cat /<span class="keyword">proc</span>/cpuinfo |<span class="title"> grep</span> "physical<span class="title"> id"</span> |<span class="title"> sort</span> |<span class="title"> uniq</span> |<span class="title"> wc</span> -l</span><br><span class="line"></span><br><span class="line"># 获取CPU<span class="title"> core个数</span></span><br><span class="line">cat /<span class="keyword">proc</span>/cpuinfo |<span class="title"> grep</span> "cpu<span class="title"> cores"</span> |<span class="title"> uniq</span></span><br><span class="line"></span><br><span class="line"># 获取逻辑CPU个数 =<span class="title"> CPU个数</span> *<span class="title"> cores</span></span><br><span class="line">cat /<span class="keyword">proc</span>/cupinfo |<span class="title"> grep</span> "processor" |<span class="title"> wc</span> -l</span><br></pre></td></tr></table></figure>
<h4 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 查看内存</span></span><br><span class="line">free -m <span class="meta"># 以MB的方式显示</span></span><br><span class="line"></span><br><span class="line">total   used    free    shared      buffers     cached</span><br><span class="line"><span class="number">3949</span>    <span class="number">1397</span>    <span class="number">2551</span>    <span class="number">0</span>           <span class="number">268</span>         <span class="number">917</span></span><br><span class="line">-/+ buffers/cached      <span class="number">211</span>        <span class="number">3737</span></span><br><span class="line"><span class="symbol">Swap:</span>   <span class="number">8001</span>       <span class="number">0</span>        <span class="number">8001</span></span><br></pre></td></tr></table></figure>
<ul>
<li>total：总内存</li>
<li>used：已使用</li>
<li>free：空闲</li>
<li>shared: 多个进程共享内存</li>
<li>buffers：buffer cache 和 cached page cache: 磁盘缓存</li>
<li>-buffers/cached：(已用内存) = used - buffers - cached</li>
<li>+buffers/cached：(<code>程序</code>可用内存) = free + buffers + cached</li>
</ul>
<p>注：</p>
<ul>
<li>buffer 和 cached 对操作系统来讲属于被使用的部分，但是程序可以挪用他们，因此程序可用内存需要算上这两个</li>
<li>Linux系统内存是拿来用的，不满时不会使用到swap分区（这点和Windows不同，无论何时都会使用硬盘交换文件来读）。因此<code>如果swap没有被使用，那么就不用担心内存小。如果经常看到swap被使用，就需要考虑增加物理内存了——这是判断linux内存是否够用的标准</code></li>
</ul>
<h4 id="Disk"><a href="#Disk" class="headerlink" title="Disk"></a>Disk</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 查看硬盘分区</span></span><br><span class="line">fdisk -l</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看fs的硬盘占用情况</span></span><br><span class="line">df -h</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看硬盘IO的性能</span></span><br><span class="line">iostat -d -x -k <span class="number">1</span> <span class="number">10</span> ???</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看目录大小</span></span><br><span class="line">du -sh /data</span><br><span class="line"></span><br><span class="line">找出占用空间最多的文件或目录前十</span><br><span class="line">du -cks * | sort -rn | head -n <span class="number">10</span></span><br></pre></td></tr></table></figure>
<h4 id="Linux_Load"><a href="#Linux_Load" class="headerlink" title="Linux Load"></a>Linux Load</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 动态反应系统负载状况</span></span><br><span class="line">top</span><br><span class="line"></span><br><span class="line"><span class="meta"># 过去1min、5min、15min内进程队列的平均进程数量</span></span><br><span class="line">uptime</span><br><span class="line"></span><br><span class="line"><span class="meta"># 可以查看系统当前有哪些用户，占用哪些终端</span></span><br><span class="line">w</span><br><span class="line"></span><br><span class="line"><span class="meta"># </span></span><br><span class="line">vmstat</span><br></pre></td></tr></table></figure>
<ul>
<li>uptime输出的三个load average值一般不能大于系统逻辑CPU的个数，如果长期大于，则表明CPU过于繁忙，系统负载较高</li>
</ul>
<h4 id="u6574_u4F53_u6027_u80FD"><a href="#u6574_u4F53_u6027_u80FD" class="headerlink" title="整体性能"></a>整体性能</h4><p>vmstat [采样时间间隔/s] [采样次数]</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vmstat</span> <span class="number">1</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>
<ul>
<li>procs<ul>
<li>r: 等待运行的进程数</li>
<li>b: 处于非中断睡眠状态的进程数</li>
</ul>
</li>
<li>memory: <ul>
<li>swpd: 虚拟内存使用情况（KB）</li>
<li>free: 空闲内存</li>
<li>buff: 被用来作为缓存的内存</li>
</ul>
</li>
<li>swap：<ul>
<li>si: 从磁盘交换到内存的页数（KB/s）</li>
<li>so: 从内存交换到磁盘的页数（-）</li>
</ul>
</li>
<li>io:<ul>
<li>bi: 发送到块设备的块数（块/s）</li>
<li>bo: 从块设备接收的块数</li>
</ul>
</li>
<li>system:<ul>
<li>in: 每秒的中断数，包括时钟中断</li>
<li>cs: 每秒的上下文切换次数</li>
</ul>
</li>
<li>cpu: (按CPU使用的百分比时间显示)<ul>
<li>us: cpu用户模式使用时间</li>
<li>sy: cpu系统模式使用时间</li>
<li>id: cpu闲置时间</li>
</ul>
</li>
</ul>
<p>标准状况：r &lt; 5 和 b ·= 0</p>
<p>如果r经常大于4，id经常少于50, | usr%+sy% &gt; 85% ，则表示系统的性能比较糟糕。</p>
<h4 id="u5176_u4ED6_u67E5_u770B_u547D_u4EE4"><a href="#u5176_u4ED6_u67E5_u770B_u547D_u4EE4" class="headerlink" title="其他查看命令"></a>其他查看命令</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 查看内核</span></span><br><span class="line">uname -a</span><br><span class="line"></span><br><span class="line"><span class="meta"># 简化版</span></span><br><span class="line">uname -r</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看发行版信息</span></span><br><span class="line"></span><br><span class="line">lsb_release -a</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看载入的模块(用lsmod查看lvs模块是否已经载入)</span></span><br><span class="line">lsmod | grep ip_vs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看系统是否64位</span></span><br><span class="line"><span class="meta"># 1. 查找 /lib64目录</span></span><br><span class="line">ls -lF / | grep /$ | grep lib64</span><br><span class="line"></span><br><span class="line"><span class="meta"># 2. 通过file判断文件是32或64位</span></span><br><span class="line">file /sbin/init</span><br></pre></td></tr></table></figure>
<h3 id="u67E5_u770B_u7F51_u7EDC_u914D_u7F6E"><a href="#u67E5_u770B_u7F51_u7EDC_u914D_u7F6E" class="headerlink" title="查看网络配置"></a>查看网络配置</h3><h4 id="Linux_u4E0B_u57FA_u672C_u7F51_u7EDC_u914D_u7F6E"><a href="#Linux_u4E0B_u57FA_u672C_u7F51_u7EDC_u914D_u7F6E" class="headerlink" title="Linux下基本网络配置"></a>Linux下基本网络配置</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 修改hostname</span></span><br><span class="line">vi <span class="meta-keyword">/etc/</span>sysconfig/network</span><br><span class="line"></span><br><span class="line"><span class="meta"># 修改hosts</span></span><br><span class="line">vi <span class="meta-keyword">/etc/</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># DNS域名</span></span><br><span class="line">vi <span class="meta-keyword">/etc/</span>resolv.conf</span><br></pre></td></tr></table></figure>
<h4 id="u670D_u52A1_u5668_u7F51_u7EDC_u8FDE_u63A5_u72B6_u51B5"><a href="#u670D_u52A1_u5668_u7F51_u7EDC_u8FDE_u63A5_u72B6_u51B5" class="headerlink" title="服务器网络连接状况"></a>服务器网络连接状况</h4><p>1.ifconfig</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ifconfig -a</span><br><span class="line"></span><br><span class="line"><span class="meta"># 只显示eth0的网络配置</span></span><br><span class="line">ifconfig eth0</span><br><span class="line"></span><br><span class="line"><span class="meta"># 只显示ehto0的Ip地址</span></span><br><span class="line"><span class="meta"># awk语句以空格和:为分隔符，并且打印第四列</span></span><br><span class="line">ifconfig eth0 | grep <span class="string">"inet addr"</span> | awk -F[:<span class="string">" "</span>] + <span class="string">'&#123;print $4&#125;'</span></span><br></pre></td></tr></table></figure>
<p>2.ping </p>
<p>使用ICMP协议中的ECHO_REQUEST数据报强制从特定主机返回相应，用于检测网络中某个主机是否活动或发生故障</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 发生5个数据包</span></span><br><span class="line"><span class="built_in">ping</span> -c <span class="number">5</span> www<span class="number">.163</span>.com</span><br></pre></td></tr></table></figure>
<p>3.netstat</p>
<p>显示网络连接、路由表和网络接口等信息。常用参数：</p>
<ul>
<li>-a: 显示所有套接字状态</li>
<li>-n: 打印实际地址，而不是显示对地址的解释或显示主机网络名之类的符号</li>
<li>-r: 打印路由选择表</li>
</ul>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -an <span class="string">| grep -v unix</span></span><br><span class="line"></span><br><span class="line">netstat -rn</span><br></pre></td></tr></table></figure>
<p>4.traceroute</p>
<p>跟踪网络数据包的路由途径，默认包大小40B。第一条是本机client的网关地址。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tracerout</span> <span class="selector-tag">www</span><span class="selector-class">.163</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure>
<p>5.nslookup / dig</p>
<p>查询机器的IP地址和对应的域名，其中nslookup是基于交互的，dig则直接在参数中附带网址</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nslookup</span></span><br><span class="line">&gt; <span class="selector-tag">www</span><span class="selector-class">.163</span><span class="selector-class">.com</span></span><br><span class="line">&gt; ...</span><br><span class="line">&gt; ...</span><br><span class="line">&gt; <span class="selector-tag">exit</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">dig</span> <span class="selector-tag">www</span><span class="selector-class">.163</span><span class="selector-class">.com</span></span><br><span class="line"></span><br><span class="line"># 从根服务器开始追踪域名的解析过程</span><br><span class="line"><span class="selector-tag">dig</span> <span class="selector-tag">www</span><span class="selector-class">.163</span><span class="selector-class">.com</span> + <span class="selector-tag">trace</span></span><br></pre></td></tr></table></figure>
<p>6.finger</p>
<p>查询用户信息，例如用户名、主目录、登录时间等。类似w</p>
<p>7.<code>lsof</code></p>
<p>非常有用的命令，list open files。查看当前系统打开了哪些文件。</p>
<p><code>利用lsof查看打开文件列表，对于系统检测和排错非常有帮助。</code></p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看某一个端口被哪些程序占用</span></span><br><span class="line"><span class="attribute">lsof</span> -i :<span class="number">22</span></span><br></pre></td></tr></table></figure>
<p>8.Sockstat</p>
<p>查看打开的socket情况，只适用于FreeBSD和OpenBSD，CentOS没有此命令</p>
<h3 id="u67E5_u770B_u670D_u52A1_u5668_u8FDB_u7A0B"><a href="#u67E5_u770B_u670D_u52A1_u5668_u8FDB_u7A0B" class="headerlink" title="查看服务器进程"></a>查看服务器进程</h3><h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><p>确定有哪些进程正在运行和运行状态、占用资源等</p>
<p>选项：参见man</p>
<p>常用：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 显示所有</span><br><span class="line"><span class="keyword">ps</span> aux</span><br><span class="line"></span><br><span class="line"># 结合<span class="keyword">grep</span>，精确定位需要的进程号</span><br><span class="line"># -v ：反向选择，亦即显示出没有 <span class="string">'搜寻字符串'</span> 内容的那一行</span><br><span class="line"><span class="keyword">ps</span> aux | <span class="keyword">grep</span> -v <span class="keyword">grep</span> | <span class="keyword">grep</span> nginx</span><br></pre></td></tr></table></figure>
<h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><p>动态查看进程信息</p>
<p>还可以通过交互命令完成功能：</p>
<ul>
<li>P: 根据CPU使用多少排序</li>
<li>T: 根据时间、累计时间排序</li>
<li>M: 根据使用内存大小排序</li>
<li>q: 退出top命令</li>
<li>m: 切换显示内存信息</li>
<li>t：切换显示进程和CPU状态信息</li>
<li>c: 切换显示命令名称和完整命令行</li>
<li>W: 将当前的设置写入~/.toprc文件，这是写top配置文件的推荐方法</li>
</ul>
<p>最好使用的<code>htop</code>，使用更方便快捷！！！</p>
<h4 id="pgrep"><a href="#pgrep" class="headerlink" title="pgrep"></a>pgrep</h4><p>查找当前运行的进程Id</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pgrep</span> nginx</span><br></pre></td></tr></table></figure>
<h4 id="kill__u548C_killall"><a href="#kill__u548C_killall" class="headerlink" title="kill 和 killall"></a>kill 和 killall</h4><p>向linux内核发送操作系统信号和某个程序的进程标识号，然后系统内核就可以对进程标识号指定的进程进行kill操作。</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 强行终止</span></span><br><span class="line">kill <span class="number">-9</span> [pid]</span><br><span class="line"></span><br><span class="line"><span class="meta"># 根据名称删除程序下所有进程</span></span><br><span class="line">killall nginx</span><br></pre></td></tr></table></figure>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p>[1] 构建高可用Linux服务器</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="ssh_u8FDC_u7A0B_u767B_u5F55"><a href="#ssh_u8FDC_u7A0B_u767B_u5F55" class="headerlink" title="ssh远程登录"></a>ssh远程登录</h3><p>服务器需要开启远程服务</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 针对fedora</span></span><br><span class="line">service sshd status</span><br><span class="line"><span class="meta"># 通用检测方法：</span></span><br><span class="line">ps -e | grep ssh</span><br><span class="line"></span><br><span class="line"><span class="meta"># fedora</span></span><br><span class="line">service sshd start</span><br><span class="line"><span class="meta"># ubuntu</span></span><br><span class="line">/etc/init.d/ssh start[/stop/restart]</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="linux" scheme="http://paranoidq.github.io/tags/linux/"/>
    
      <category term="server" scheme="http://paranoidq.github.io/tags/server/"/>
    
      <category term="linux" scheme="http://paranoidq.github.io/categories/linux/"/>
    
  </entry>
  
</feed>
